
Magisterka_FREERTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001770  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001920  08001920  00011920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001958  08001958  00011958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001960  08001960  00011960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001964  08001964  00011964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08001968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  8 .bss          00003d70  20000010  20000010  00020010  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003d80  20003d80  00020010  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000a62c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001e40  00000000  00000000  0002a66c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000329c  00000000  00000000  0002c4ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000748  00000000  00000000  0002f748  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000898  00000000  00000000  0002fe90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000039a4  00000000  00000000  00030728  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000032ea  00000000  00000000  000340cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000373b6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001278  00000000  00000000  00037434  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001908 	.word	0x08001908

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08001908 	.word	0x08001908

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b97a 	b.w	80004fc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	468c      	mov	ip, r1
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	9e08      	ldr	r6, [sp, #32]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d151      	bne.n	80002d4 <__udivmoddi4+0xb4>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d96d      	bls.n	8000312 <__udivmoddi4+0xf2>
 8000236:	fab2 fe82 	clz	lr, r2
 800023a:	f1be 0f00 	cmp.w	lr, #0
 800023e:	d00b      	beq.n	8000258 <__udivmoddi4+0x38>
 8000240:	f1ce 0c20 	rsb	ip, lr, #32
 8000244:	fa01 f50e 	lsl.w	r5, r1, lr
 8000248:	fa20 fc0c 	lsr.w	ip, r0, ip
 800024c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000250:	ea4c 0c05 	orr.w	ip, ip, r5
 8000254:	fa00 f40e 	lsl.w	r4, r0, lr
 8000258:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800025c:	0c25      	lsrs	r5, r4, #16
 800025e:	fbbc f8fa 	udiv	r8, ip, sl
 8000262:	fa1f f987 	uxth.w	r9, r7
 8000266:	fb0a cc18 	mls	ip, sl, r8, ip
 800026a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026e:	fb08 f309 	mul.w	r3, r8, r9
 8000272:	42ab      	cmp	r3, r5
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x6c>
 8000276:	19ed      	adds	r5, r5, r7
 8000278:	f108 32ff 	add.w	r2, r8, #4294967295
 800027c:	f080 8123 	bcs.w	80004c6 <__udivmoddi4+0x2a6>
 8000280:	42ab      	cmp	r3, r5
 8000282:	f240 8120 	bls.w	80004c6 <__udivmoddi4+0x2a6>
 8000286:	f1a8 0802 	sub.w	r8, r8, #2
 800028a:	443d      	add	r5, r7
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb5 f0fa 	udiv	r0, r5, sl
 8000294:	fb0a 5510 	mls	r5, sl, r0, r5
 8000298:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800029c:	fb00 f909 	mul.w	r9, r0, r9
 80002a0:	45a1      	cmp	r9, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x98>
 80002a4:	19e4      	adds	r4, r4, r7
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 810a 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80002ae:	45a1      	cmp	r9, r4
 80002b0:	f240 8107 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	eba4 0409 	sub.w	r4, r4, r9
 80002bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c0:	2100      	movs	r1, #0
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d061      	beq.n	800038a <__udivmoddi4+0x16a>
 80002c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ca:	2300      	movs	r3, #0
 80002cc:	6034      	str	r4, [r6, #0]
 80002ce:	6073      	str	r3, [r6, #4]
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xc8>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d054      	beq.n	8000386 <__udivmoddi4+0x166>
 80002dc:	2100      	movs	r1, #0
 80002de:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	f040 808e 	bne.w	800040e <__udivmoddi4+0x1ee>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xdc>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2d0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	46ac      	mov	ip, r5
 8000306:	2e00      	cmp	r6, #0
 8000308:	d03f      	beq.n	800038a <__udivmoddi4+0x16a>
 800030a:	e886 1010 	stmia.w	r6, {r4, ip}
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	b912      	cbnz	r2, 800031a <__udivmoddi4+0xfa>
 8000314:	2701      	movs	r7, #1
 8000316:	fbb7 f7f2 	udiv	r7, r7, r2
 800031a:	fab7 fe87 	clz	lr, r7
 800031e:	f1be 0f00 	cmp.w	lr, #0
 8000322:	d134      	bne.n	800038e <__udivmoddi4+0x16e>
 8000324:	1beb      	subs	r3, r5, r7
 8000326:	0c3a      	lsrs	r2, r7, #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000332:	0c25      	lsrs	r5, r4, #16
 8000334:	fb02 3318 	mls	r3, r2, r8, r3
 8000338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800033c:	fb0c f308 	mul.w	r3, ip, r8
 8000340:	42ab      	cmp	r3, r5
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x134>
 8000344:	19ed      	adds	r5, r5, r7
 8000346:	f108 30ff 	add.w	r0, r8, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x132>
 800034c:	42ab      	cmp	r3, r5
 800034e:	f200 80d1 	bhi.w	80004f4 <__udivmoddi4+0x2d4>
 8000352:	4680      	mov	r8, r0
 8000354:	1aed      	subs	r5, r5, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb5 f0f2 	udiv	r0, r5, r2
 800035c:	fb02 5510 	mls	r5, r2, r0, r5
 8000360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000364:	fb0c fc00 	mul.w	ip, ip, r0
 8000368:	45a4      	cmp	ip, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x15c>
 800036c:	19e4      	adds	r4, r4, r7
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x15a>
 8000374:	45a4      	cmp	ip, r4
 8000376:	f200 80b8 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 040c 	sub.w	r4, r4, ip
 8000380:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000384:	e79d      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000386:	4631      	mov	r1, r6
 8000388:	4630      	mov	r0, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	f1ce 0420 	rsb	r4, lr, #32
 8000392:	fa05 f30e 	lsl.w	r3, r5, lr
 8000396:	fa07 f70e 	lsl.w	r7, r7, lr
 800039a:	fa20 f804 	lsr.w	r8, r0, r4
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa25 f404 	lsr.w	r4, r5, r4
 80003a4:	ea48 0803 	orr.w	r8, r8, r3
 80003a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b0:	fb02 4411 	mls	r4, r2, r1, r4
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003bc:	fb01 f30c 	mul.w	r3, r1, ip
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x1bc>
 80003c8:	19ed      	adds	r5, r5, r7
 80003ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ce:	f080 808a 	bcs.w	80004e6 <__udivmoddi4+0x2c6>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	f240 8087 	bls.w	80004e6 <__udivmoddi4+0x2c6>
 80003d8:	3902      	subs	r1, #2
 80003da:	443d      	add	r5, r7
 80003dc:	1aeb      	subs	r3, r5, r3
 80003de:	fa1f f588 	uxth.w	r5, r8
 80003e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ee:	fb00 f30c 	mul.w	r3, r0, ip
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1e6>
 80003f6:	19ed      	adds	r5, r5, r7
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fc:	d26f      	bcs.n	80004de <__udivmoddi4+0x2be>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d96d      	bls.n	80004de <__udivmoddi4+0x2be>
 8000402:	3802      	subs	r0, #2
 8000404:	443d      	add	r5, r7
 8000406:	1aeb      	subs	r3, r5, r3
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	e78f      	b.n	800032e <__udivmoddi4+0x10e>
 800040e:	f1c1 0720 	rsb	r7, r1, #32
 8000412:	fa22 f807 	lsr.w	r8, r2, r7
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 f401 	lsl.w	r4, r5, r1
 800041c:	ea48 0303 	orr.w	r3, r8, r3
 8000420:	fa20 fe07 	lsr.w	lr, r0, r7
 8000424:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4e 0e04 	orr.w	lr, lr, r4
 800042e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000432:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000436:	fb0c 5519 	mls	r5, ip, r9, r5
 800043a:	fa1f f883 	uxth.w	r8, r3
 800043e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000442:	fb09 f408 	mul.w	r4, r9, r8
 8000446:	42ac      	cmp	r4, r5
 8000448:	fa02 f201 	lsl.w	r2, r2, r1
 800044c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x244>
 8000452:	18ed      	adds	r5, r5, r3
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d243      	bcs.n	80004e2 <__udivmoddi4+0x2c2>
 800045a:	42ac      	cmp	r4, r5
 800045c:	d941      	bls.n	80004e2 <__udivmoddi4+0x2c2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	441d      	add	r5, r3
 8000464:	1b2d      	subs	r5, r5, r4
 8000466:	fa1f fe8e 	uxth.w	lr, lr
 800046a:	fbb5 f0fc 	udiv	r0, r5, ip
 800046e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000472:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45a0      	cmp	r8, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x26e>
 800047e:	18e4      	adds	r4, r4, r3
 8000480:	f100 35ff 	add.w	r5, r0, #4294967295
 8000484:	d229      	bcs.n	80004da <__udivmoddi4+0x2ba>
 8000486:	45a0      	cmp	r8, r4
 8000488:	d927      	bls.n	80004da <__udivmoddi4+0x2ba>
 800048a:	3802      	subs	r0, #2
 800048c:	441c      	add	r4, r3
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba4 0408 	sub.w	r4, r4, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454c      	cmp	r4, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	464d      	mov	r5, r9
 80004a0:	d315      	bcc.n	80004ce <__udivmoddi4+0x2ae>
 80004a2:	d012      	beq.n	80004ca <__udivmoddi4+0x2aa>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x29c>
 80004a6:	ebba 030e 	subs.w	r3, sl, lr
 80004aa:	eb64 0405 	sbc.w	r4, r4, r5
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431f      	orrs	r7, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	6037      	str	r7, [r6, #0]
 80004ba:	6074      	str	r4, [r6, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	4618      	mov	r0, r3
 80004c4:	e6f8      	b.n	80002b8 <__udivmoddi4+0x98>
 80004c6:	4690      	mov	r8, r2
 80004c8:	e6e0      	b.n	800028c <__udivmoddi4+0x6c>
 80004ca:	45c2      	cmp	sl, r8
 80004cc:	d2ea      	bcs.n	80004a4 <__udivmoddi4+0x284>
 80004ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d2:	eb69 0503 	sbc.w	r5, r9, r3
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7e4      	b.n	80004a4 <__udivmoddi4+0x284>
 80004da:	4628      	mov	r0, r5
 80004dc:	e7d7      	b.n	800048e <__udivmoddi4+0x26e>
 80004de:	4640      	mov	r0, r8
 80004e0:	e791      	b.n	8000406 <__udivmoddi4+0x1e6>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e7be      	b.n	8000464 <__udivmoddi4+0x244>
 80004e6:	4601      	mov	r1, r0
 80004e8:	e778      	b.n	80003dc <__udivmoddi4+0x1bc>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	e745      	b.n	800037c <__udivmoddi4+0x15c>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xe6>
 80004f4:	f1a8 0802 	sub.w	r8, r8, #2
 80004f8:	443d      	add	r5, r7
 80004fa:	e72b      	b.n	8000354 <__udivmoddi4+0x134>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000500:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000502:	4a0e      	ldr	r2, [pc, #56]	; (800053c <HAL_InitTick+0x3c>)
 8000504:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <HAL_InitTick+0x40>)
{
 8000506:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000508:	7818      	ldrb	r0, [r3, #0]
 800050a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000512:	6810      	ldr	r0, [r2, #0]
 8000514:	fbb0 f0f3 	udiv	r0, r0, r3
 8000518:	f000 f888 	bl	800062c <HAL_SYSTICK_Config>
 800051c:	4604      	mov	r4, r0
 800051e:	b958      	cbnz	r0, 8000538 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000520:	2d0f      	cmp	r5, #15
 8000522:	d809      	bhi.n	8000538 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000524:	4602      	mov	r2, r0
 8000526:	4629      	mov	r1, r5
 8000528:	f04f 30ff 	mov.w	r0, #4294967295
 800052c:	f000 f84a 	bl	80005c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000530:	4b04      	ldr	r3, [pc, #16]	; (8000544 <HAL_InitTick+0x44>)
 8000532:	4620      	mov	r0, r4
 8000534:	601d      	str	r5, [r3, #0]
 8000536:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000538:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800053a:	bd38      	pop	{r3, r4, r5, pc}
 800053c:	2000000c 	.word	0x2000000c
 8000540:	20000000 	.word	0x20000000
 8000544:	20000004 	.word	0x20000004

08000548 <HAL_Init>:
{
 8000548:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <HAL_Init+0x30>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000552:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800055a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000562:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000564:	2003      	movs	r0, #3
 8000566:	f000 f81b 	bl	80005a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800056a:	200f      	movs	r0, #15
 800056c:	f7ff ffc8 	bl	8000500 <HAL_InitTick>
  HAL_MspInit();
 8000570:	f001 f91e 	bl	80017b0 <HAL_MspInit>
}
 8000574:	2000      	movs	r0, #0
 8000576:	bd08      	pop	{r3, pc}
 8000578:	40023c00 	.word	0x40023c00

0800057c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800057c:	4a03      	ldr	r2, [pc, #12]	; (800058c <HAL_IncTick+0x10>)
 800057e:	4b04      	ldr	r3, [pc, #16]	; (8000590 <HAL_IncTick+0x14>)
 8000580:	6811      	ldr	r1, [r2, #0]
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	440b      	add	r3, r1
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20003d78 	.word	0x20003d78
 8000590:	20000000 	.word	0x20000000

08000594 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000594:	4b01      	ldr	r3, [pc, #4]	; (800059c <HAL_GetTick+0x8>)
 8000596:	6818      	ldr	r0, [r3, #0]
}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20003d78 	.word	0x20003d78

080005a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005a2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005a8:	041b      	lsls	r3, r3, #16
 80005aa:	0c1b      	lsrs	r3, r3, #16
 80005ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005b0:	0200      	lsls	r0, r0, #8
 80005b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ba:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005bc:	60d3      	str	r3, [r2, #12]
 80005be:	4770      	bx	lr
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005c6:	b530      	push	{r4, r5, lr}
 80005c8:	68dc      	ldr	r4, [r3, #12]
 80005ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ce:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	bf28      	it	cs
 80005d8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005da:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	f04f 0501 	mov.w	r5, #1
 80005e0:	fa05 f303 	lsl.w	r3, r5, r3
 80005e4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e8:	bf8c      	ite	hi
 80005ea:	3c03      	subhi	r4, #3
 80005ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ee:	4019      	ands	r1, r3
 80005f0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f2:	fa05 f404 	lsl.w	r4, r5, r4
 80005f6:	3c01      	subs	r4, #1
 80005f8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	ea42 0201 	orr.w	r2, r2, r1
 8000600:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	bfad      	iteet	ge
 8000606:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	f000 000f 	andlt.w	r0, r0, #15
 800060e:	4b06      	ldrlt	r3, [pc, #24]	; (8000628 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	bfb5      	itete	lt
 8000616:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00
 8000628:	e000ed14 	.word	0xe000ed14

0800062c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800062c:	3801      	subs	r0, #1
 800062e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000632:	d20a      	bcs.n	800064a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000636:	4a07      	ldr	r2, [pc, #28]	; (8000654 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000638:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063a:	21f0      	movs	r1, #240	; 0xf0
 800063c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000640:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000642:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000644:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800064a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000e010 	.word	0xe000e010
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000658:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800065c:	4604      	mov	r4, r0
 800065e:	b918      	cbnz	r0, 8000668 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000660:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000662:	b002      	add	sp, #8
 8000664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000668:	6803      	ldr	r3, [r0, #0]
 800066a:	07dd      	lsls	r5, r3, #31
 800066c:	d410      	bmi.n	8000690 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800066e:	6823      	ldr	r3, [r4, #0]
 8000670:	0798      	lsls	r0, r3, #30
 8000672:	d458      	bmi.n	8000726 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000674:	6823      	ldr	r3, [r4, #0]
 8000676:	071a      	lsls	r2, r3, #28
 8000678:	f100 809a 	bmi.w	80007b0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800067c:	6823      	ldr	r3, [r4, #0]
 800067e:	075b      	lsls	r3, r3, #29
 8000680:	f100 80b8 	bmi.w	80007f4 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000684:	69a2      	ldr	r2, [r4, #24]
 8000686:	2a00      	cmp	r2, #0
 8000688:	f040 8119 	bne.w	80008be <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 800068c:	2000      	movs	r0, #0
 800068e:	e7e8      	b.n	8000662 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000690:	4ba6      	ldr	r3, [pc, #664]	; (800092c <HAL_RCC_OscConfig+0x2d4>)
 8000692:	689a      	ldr	r2, [r3, #8]
 8000694:	f002 020c 	and.w	r2, r2, #12
 8000698:	2a04      	cmp	r2, #4
 800069a:	d007      	beq.n	80006ac <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800069c:	689a      	ldr	r2, [r3, #8]
 800069e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80006a2:	2a08      	cmp	r2, #8
 80006a4:	d10a      	bne.n	80006bc <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	0259      	lsls	r1, r3, #9
 80006aa:	d507      	bpl.n	80006bc <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80006ac:	4b9f      	ldr	r3, [pc, #636]	; (800092c <HAL_RCC_OscConfig+0x2d4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	039a      	lsls	r2, r3, #14
 80006b2:	d5dc      	bpl.n	800066e <HAL_RCC_OscConfig+0x16>
 80006b4:	6863      	ldr	r3, [r4, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1d9      	bne.n	800066e <HAL_RCC_OscConfig+0x16>
 80006ba:	e7d1      	b.n	8000660 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006bc:	6863      	ldr	r3, [r4, #4]
 80006be:	4d9b      	ldr	r5, [pc, #620]	; (800092c <HAL_RCC_OscConfig+0x2d4>)
 80006c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006c4:	d111      	bne.n	80006ea <HAL_RCC_OscConfig+0x92>
 80006c6:	682b      	ldr	r3, [r5, #0]
 80006c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80006ce:	f7ff ff61 	bl	8000594 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006d2:	4d96      	ldr	r5, [pc, #600]	; (800092c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80006d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006d6:	682b      	ldr	r3, [r5, #0]
 80006d8:	039b      	lsls	r3, r3, #14
 80006da:	d4c8      	bmi.n	800066e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006dc:	f7ff ff5a 	bl	8000594 <HAL_GetTick>
 80006e0:	1b80      	subs	r0, r0, r6
 80006e2:	2864      	cmp	r0, #100	; 0x64
 80006e4:	d9f7      	bls.n	80006d6 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80006e6:	2003      	movs	r0, #3
 80006e8:	e7bb      	b.n	8000662 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80006ee:	d104      	bne.n	80006fa <HAL_RCC_OscConfig+0xa2>
 80006f0:	682b      	ldr	r3, [r5, #0]
 80006f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006f6:	602b      	str	r3, [r5, #0]
 80006f8:	e7e5      	b.n	80006c6 <HAL_RCC_OscConfig+0x6e>
 80006fa:	682a      	ldr	r2, [r5, #0]
 80006fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000700:	602a      	str	r2, [r5, #0]
 8000702:	682a      	ldr	r2, [r5, #0]
 8000704:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000708:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1df      	bne.n	80006ce <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800070e:	f7ff ff41 	bl	8000594 <HAL_GetTick>
 8000712:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000714:	682b      	ldr	r3, [r5, #0]
 8000716:	039f      	lsls	r7, r3, #14
 8000718:	d5a9      	bpl.n	800066e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800071a:	f7ff ff3b 	bl	8000594 <HAL_GetTick>
 800071e:	1b80      	subs	r0, r0, r6
 8000720:	2864      	cmp	r0, #100	; 0x64
 8000722:	d9f7      	bls.n	8000714 <HAL_RCC_OscConfig+0xbc>
 8000724:	e7df      	b.n	80006e6 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000726:	4b81      	ldr	r3, [pc, #516]	; (800092c <HAL_RCC_OscConfig+0x2d4>)
 8000728:	689a      	ldr	r2, [r3, #8]
 800072a:	f012 0f0c 	tst.w	r2, #12
 800072e:	d007      	beq.n	8000740 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000730:	689a      	ldr	r2, [r3, #8]
 8000732:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000736:	2a08      	cmp	r2, #8
 8000738:	d111      	bne.n	800075e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	025e      	lsls	r6, r3, #9
 800073e:	d40e      	bmi.n	800075e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000740:	4b7a      	ldr	r3, [pc, #488]	; (800092c <HAL_RCC_OscConfig+0x2d4>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	0795      	lsls	r5, r2, #30
 8000746:	d502      	bpl.n	800074e <HAL_RCC_OscConfig+0xf6>
 8000748:	68e2      	ldr	r2, [r4, #12]
 800074a:	2a01      	cmp	r2, #1
 800074c:	d188      	bne.n	8000660 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	6921      	ldr	r1, [r4, #16]
 8000752:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000756:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800075a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800075c:	e78a      	b.n	8000674 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800075e:	68e2      	ldr	r2, [r4, #12]
 8000760:	4b73      	ldr	r3, [pc, #460]	; (8000930 <HAL_RCC_OscConfig+0x2d8>)
 8000762:	b1b2      	cbz	r2, 8000792 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000764:	2201      	movs	r2, #1
 8000766:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000768:	f7ff ff14 	bl	8000594 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800076c:	4d6f      	ldr	r5, [pc, #444]	; (800092c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800076e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000770:	682b      	ldr	r3, [r5, #0]
 8000772:	0798      	lsls	r0, r3, #30
 8000774:	d507      	bpl.n	8000786 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000776:	682b      	ldr	r3, [r5, #0]
 8000778:	6922      	ldr	r2, [r4, #16]
 800077a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800077e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000782:	602b      	str	r3, [r5, #0]
 8000784:	e776      	b.n	8000674 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000786:	f7ff ff05 	bl	8000594 <HAL_GetTick>
 800078a:	1b80      	subs	r0, r0, r6
 800078c:	2802      	cmp	r0, #2
 800078e:	d9ef      	bls.n	8000770 <HAL_RCC_OscConfig+0x118>
 8000790:	e7a9      	b.n	80006e6 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000792:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000794:	f7ff fefe 	bl	8000594 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000798:	4d64      	ldr	r5, [pc, #400]	; (800092c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800079a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800079c:	682b      	ldr	r3, [r5, #0]
 800079e:	0799      	lsls	r1, r3, #30
 80007a0:	f57f af68 	bpl.w	8000674 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007a4:	f7ff fef6 	bl	8000594 <HAL_GetTick>
 80007a8:	1b80      	subs	r0, r0, r6
 80007aa:	2802      	cmp	r0, #2
 80007ac:	d9f6      	bls.n	800079c <HAL_RCC_OscConfig+0x144>
 80007ae:	e79a      	b.n	80006e6 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80007b0:	6962      	ldr	r2, [r4, #20]
 80007b2:	4b60      	ldr	r3, [pc, #384]	; (8000934 <HAL_RCC_OscConfig+0x2dc>)
 80007b4:	b17a      	cbz	r2, 80007d6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80007b6:	2201      	movs	r2, #1
 80007b8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80007ba:	f7ff feeb 	bl	8000594 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007be:	4d5b      	ldr	r5, [pc, #364]	; (800092c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80007c0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007c2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80007c4:	079f      	lsls	r7, r3, #30
 80007c6:	f53f af59 	bmi.w	800067c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007ca:	f7ff fee3 	bl	8000594 <HAL_GetTick>
 80007ce:	1b80      	subs	r0, r0, r6
 80007d0:	2802      	cmp	r0, #2
 80007d2:	d9f6      	bls.n	80007c2 <HAL_RCC_OscConfig+0x16a>
 80007d4:	e787      	b.n	80006e6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80007d6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80007d8:	f7ff fedc 	bl	8000594 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007dc:	4d53      	ldr	r5, [pc, #332]	; (800092c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80007de:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007e0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80007e2:	0798      	lsls	r0, r3, #30
 80007e4:	f57f af4a 	bpl.w	800067c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007e8:	f7ff fed4 	bl	8000594 <HAL_GetTick>
 80007ec:	1b80      	subs	r0, r0, r6
 80007ee:	2802      	cmp	r0, #2
 80007f0:	d9f6      	bls.n	80007e0 <HAL_RCC_OscConfig+0x188>
 80007f2:	e778      	b.n	80006e6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007f4:	4b4d      	ldr	r3, [pc, #308]	; (800092c <HAL_RCC_OscConfig+0x2d4>)
 80007f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007f8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80007fc:	d128      	bne.n	8000850 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	9201      	str	r2, [sp, #4]
 8000800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000802:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000806:	641a      	str	r2, [r3, #64]	; 0x40
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080e:	9301      	str	r3, [sp, #4]
 8000810:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000812:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000814:	4d48      	ldr	r5, [pc, #288]	; (8000938 <HAL_RCC_OscConfig+0x2e0>)
 8000816:	682b      	ldr	r3, [r5, #0]
 8000818:	05d9      	lsls	r1, r3, #23
 800081a:	d51b      	bpl.n	8000854 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800081c:	68a3      	ldr	r3, [r4, #8]
 800081e:	4d43      	ldr	r5, [pc, #268]	; (800092c <HAL_RCC_OscConfig+0x2d4>)
 8000820:	2b01      	cmp	r3, #1
 8000822:	d127      	bne.n	8000874 <HAL_RCC_OscConfig+0x21c>
 8000824:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800082c:	f7ff feb2 	bl	8000594 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000830:	4d3e      	ldr	r5, [pc, #248]	; (800092c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000832:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000834:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000838:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800083a:	079b      	lsls	r3, r3, #30
 800083c:	d539      	bpl.n	80008b2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800083e:	2e00      	cmp	r6, #0
 8000840:	f43f af20 	beq.w	8000684 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000844:	4a39      	ldr	r2, [pc, #228]	; (800092c <HAL_RCC_OscConfig+0x2d4>)
 8000846:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800084c:	6413      	str	r3, [r2, #64]	; 0x40
 800084e:	e719      	b.n	8000684 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000850:	2600      	movs	r6, #0
 8000852:	e7df      	b.n	8000814 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000854:	682b      	ldr	r3, [r5, #0]
 8000856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800085a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800085c:	f7ff fe9a 	bl	8000594 <HAL_GetTick>
 8000860:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000862:	682b      	ldr	r3, [r5, #0]
 8000864:	05da      	lsls	r2, r3, #23
 8000866:	d4d9      	bmi.n	800081c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000868:	f7ff fe94 	bl	8000594 <HAL_GetTick>
 800086c:	1bc0      	subs	r0, r0, r7
 800086e:	2802      	cmp	r0, #2
 8000870:	d9f7      	bls.n	8000862 <HAL_RCC_OscConfig+0x20a>
 8000872:	e738      	b.n	80006e6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000874:	2b05      	cmp	r3, #5
 8000876:	d104      	bne.n	8000882 <HAL_RCC_OscConfig+0x22a>
 8000878:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	672b      	str	r3, [r5, #112]	; 0x70
 8000880:	e7d0      	b.n	8000824 <HAL_RCC_OscConfig+0x1cc>
 8000882:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000884:	f022 0201 	bic.w	r2, r2, #1
 8000888:	672a      	str	r2, [r5, #112]	; 0x70
 800088a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800088c:	f022 0204 	bic.w	r2, r2, #4
 8000890:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000892:	2b00      	cmp	r3, #0
 8000894:	d1ca      	bne.n	800082c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000896:	f7ff fe7d 	bl	8000594 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800089a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800089e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80008a2:	0798      	lsls	r0, r3, #30
 80008a4:	d5cb      	bpl.n	800083e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008a6:	f7ff fe75 	bl	8000594 <HAL_GetTick>
 80008aa:	1bc0      	subs	r0, r0, r7
 80008ac:	4540      	cmp	r0, r8
 80008ae:	d9f7      	bls.n	80008a0 <HAL_RCC_OscConfig+0x248>
 80008b0:	e719      	b.n	80006e6 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008b2:	f7ff fe6f 	bl	8000594 <HAL_GetTick>
 80008b6:	1bc0      	subs	r0, r0, r7
 80008b8:	4540      	cmp	r0, r8
 80008ba:	d9bd      	bls.n	8000838 <HAL_RCC_OscConfig+0x1e0>
 80008bc:	e713      	b.n	80006e6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80008be:	4d1b      	ldr	r5, [pc, #108]	; (800092c <HAL_RCC_OscConfig+0x2d4>)
 80008c0:	68ab      	ldr	r3, [r5, #8]
 80008c2:	f003 030c 	and.w	r3, r3, #12
 80008c6:	2b08      	cmp	r3, #8
 80008c8:	f43f aeca 	beq.w	8000660 <HAL_RCC_OscConfig+0x8>
 80008cc:	4e1b      	ldr	r6, [pc, #108]	; (800093c <HAL_RCC_OscConfig+0x2e4>)
 80008ce:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008d0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80008d2:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008d4:	d134      	bne.n	8000940 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80008d6:	f7ff fe5d 	bl	8000594 <HAL_GetTick>
 80008da:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80008dc:	682b      	ldr	r3, [r5, #0]
 80008de:	0199      	lsls	r1, r3, #6
 80008e0:	d41e      	bmi.n	8000920 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80008e2:	6a22      	ldr	r2, [r4, #32]
 80008e4:	69e3      	ldr	r3, [r4, #28]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008ea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80008ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80008f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80008f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80008f6:	4c0d      	ldr	r4, [pc, #52]	; (800092c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80008f8:	0852      	lsrs	r2, r2, #1
 80008fa:	3a01      	subs	r2, #1
 80008fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000900:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000902:	2301      	movs	r3, #1
 8000904:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000906:	f7ff fe45 	bl	8000594 <HAL_GetTick>
 800090a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800090c:	6823      	ldr	r3, [r4, #0]
 800090e:	019a      	lsls	r2, r3, #6
 8000910:	f53f aebc 	bmi.w	800068c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000914:	f7ff fe3e 	bl	8000594 <HAL_GetTick>
 8000918:	1b40      	subs	r0, r0, r5
 800091a:	2802      	cmp	r0, #2
 800091c:	d9f6      	bls.n	800090c <HAL_RCC_OscConfig+0x2b4>
 800091e:	e6e2      	b.n	80006e6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000920:	f7ff fe38 	bl	8000594 <HAL_GetTick>
 8000924:	1bc0      	subs	r0, r0, r7
 8000926:	2802      	cmp	r0, #2
 8000928:	d9d8      	bls.n	80008dc <HAL_RCC_OscConfig+0x284>
 800092a:	e6dc      	b.n	80006e6 <HAL_RCC_OscConfig+0x8e>
 800092c:	40023800 	.word	0x40023800
 8000930:	42470000 	.word	0x42470000
 8000934:	42470e80 	.word	0x42470e80
 8000938:	40007000 	.word	0x40007000
 800093c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000940:	f7ff fe28 	bl	8000594 <HAL_GetTick>
 8000944:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000946:	682b      	ldr	r3, [r5, #0]
 8000948:	019b      	lsls	r3, r3, #6
 800094a:	f57f ae9f 	bpl.w	800068c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800094e:	f7ff fe21 	bl	8000594 <HAL_GetTick>
 8000952:	1b00      	subs	r0, r0, r4
 8000954:	2802      	cmp	r0, #2
 8000956:	d9f6      	bls.n	8000946 <HAL_RCC_OscConfig+0x2ee>
 8000958:	e6c5      	b.n	80006e6 <HAL_RCC_OscConfig+0x8e>
 800095a:	bf00      	nop

0800095c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800095c:	4913      	ldr	r1, [pc, #76]	; (80009ac <HAL_RCC_GetSysClockFreq+0x50>)
{
 800095e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000960:	688b      	ldr	r3, [r1, #8]
 8000962:	f003 030c 	and.w	r3, r3, #12
 8000966:	2b04      	cmp	r3, #4
 8000968:	d003      	beq.n	8000972 <HAL_RCC_GetSysClockFreq+0x16>
 800096a:	2b08      	cmp	r3, #8
 800096c:	d003      	beq.n	8000976 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800096e:	4810      	ldr	r0, [pc, #64]	; (80009b0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000970:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000972:	4810      	ldr	r0, [pc, #64]	; (80009b4 <HAL_RCC_GetSysClockFreq+0x58>)
 8000974:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000976:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000978:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800097a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800097c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000980:	bf14      	ite	ne
 8000982:	480c      	ldrne	r0, [pc, #48]	; (80009b4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000984:	480a      	ldreq	r0, [pc, #40]	; (80009b0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000986:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800098a:	bf18      	it	ne
 800098c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800098e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000992:	fba1 0100 	umull	r0, r1, r1, r0
 8000996:	f7ff fc2b 	bl	80001f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <HAL_RCC_GetSysClockFreq+0x50>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80009a2:	3301      	adds	r3, #1
 80009a4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80009a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80009aa:	bd08      	pop	{r3, pc}
 80009ac:	40023800 	.word	0x40023800
 80009b0:	00f42400 	.word	0x00f42400
 80009b4:	017d7840 	.word	0x017d7840

080009b8 <HAL_RCC_ClockConfig>:
{
 80009b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009bc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80009be:	4604      	mov	r4, r0
 80009c0:	b910      	cbnz	r0, 80009c8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80009c2:	2001      	movs	r0, #1
 80009c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80009c8:	4b44      	ldr	r3, [pc, #272]	; (8000adc <HAL_RCC_ClockConfig+0x124>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	f002 020f 	and.w	r2, r2, #15
 80009d0:	428a      	cmp	r2, r1
 80009d2:	d328      	bcc.n	8000a26 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009d4:	6821      	ldr	r1, [r4, #0]
 80009d6:	078f      	lsls	r7, r1, #30
 80009d8:	d42d      	bmi.n	8000a36 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80009da:	07c8      	lsls	r0, r1, #31
 80009dc:	d440      	bmi.n	8000a60 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80009de:	4b3f      	ldr	r3, [pc, #252]	; (8000adc <HAL_RCC_ClockConfig+0x124>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	f002 020f 	and.w	r2, r2, #15
 80009e6:	4295      	cmp	r5, r2
 80009e8:	d366      	bcc.n	8000ab8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009ea:	6822      	ldr	r2, [r4, #0]
 80009ec:	0751      	lsls	r1, r2, #29
 80009ee:	d46c      	bmi.n	8000aca <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80009f0:	0713      	lsls	r3, r2, #28
 80009f2:	d507      	bpl.n	8000a04 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80009f4:	4a3a      	ldr	r2, [pc, #232]	; (8000ae0 <HAL_RCC_ClockConfig+0x128>)
 80009f6:	6921      	ldr	r1, [r4, #16]
 80009f8:	6893      	ldr	r3, [r2, #8]
 80009fa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80009fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000a02:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000a04:	f7ff ffaa 	bl	800095c <HAL_RCC_GetSysClockFreq>
 8000a08:	4b35      	ldr	r3, [pc, #212]	; (8000ae0 <HAL_RCC_ClockConfig+0x128>)
 8000a0a:	4a36      	ldr	r2, [pc, #216]	; (8000ae4 <HAL_RCC_ClockConfig+0x12c>)
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000a12:	5cd3      	ldrb	r3, [r2, r3]
 8000a14:	40d8      	lsrs	r0, r3
 8000a16:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <HAL_RCC_ClockConfig+0x130>)
 8000a18:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a1a:	200f      	movs	r0, #15
 8000a1c:	f7ff fd70 	bl	8000500 <HAL_InitTick>
  return HAL_OK;
 8000a20:	2000      	movs	r0, #0
 8000a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a26:	b2ca      	uxtb	r2, r1
 8000a28:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f003 030f 	and.w	r3, r3, #15
 8000a30:	4299      	cmp	r1, r3
 8000a32:	d1c6      	bne.n	80009c2 <HAL_RCC_ClockConfig+0xa>
 8000a34:	e7ce      	b.n	80009d4 <HAL_RCC_ClockConfig+0x1c>
 8000a36:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a38:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000a3c:	bf1e      	ittt	ne
 8000a3e:	689a      	ldrne	r2, [r3, #8]
 8000a40:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000a44:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a46:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000a48:	bf42      	ittt	mi
 8000a4a:	689a      	ldrmi	r2, [r3, #8]
 8000a4c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000a50:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a52:	689a      	ldr	r2, [r3, #8]
 8000a54:	68a0      	ldr	r0, [r4, #8]
 8000a56:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000a5a:	4302      	orrs	r2, r0
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	e7bc      	b.n	80009da <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a60:	6862      	ldr	r2, [r4, #4]
 8000a62:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <HAL_RCC_ClockConfig+0x128>)
 8000a64:	2a01      	cmp	r2, #1
 8000a66:	d11d      	bne.n	8000aa4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a6e:	d0a8      	beq.n	80009c2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a70:	4e1b      	ldr	r6, [pc, #108]	; (8000ae0 <HAL_RCC_ClockConfig+0x128>)
 8000a72:	68b3      	ldr	r3, [r6, #8]
 8000a74:	f023 0303 	bic.w	r3, r3, #3
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000a7c:	f7ff fd8a 	bl	8000594 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a80:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000a84:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000a86:	68b3      	ldr	r3, [r6, #8]
 8000a88:	6862      	ldr	r2, [r4, #4]
 8000a8a:	f003 030c 	and.w	r3, r3, #12
 8000a8e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000a92:	d0a4      	beq.n	80009de <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a94:	f7ff fd7e 	bl	8000594 <HAL_GetTick>
 8000a98:	1bc0      	subs	r0, r0, r7
 8000a9a:	4540      	cmp	r0, r8
 8000a9c:	d9f3      	bls.n	8000a86 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000a9e:	2003      	movs	r0, #3
}
 8000aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000aa4:	1e91      	subs	r1, r2, #2
 8000aa6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000aa8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000aaa:	d802      	bhi.n	8000ab2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000aac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000ab0:	e7dd      	b.n	8000a6e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ab2:	f013 0f02 	tst.w	r3, #2
 8000ab6:	e7da      	b.n	8000a6e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ab8:	b2ea      	uxtb	r2, r5
 8000aba:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f003 030f 	and.w	r3, r3, #15
 8000ac2:	429d      	cmp	r5, r3
 8000ac4:	f47f af7d 	bne.w	80009c2 <HAL_RCC_ClockConfig+0xa>
 8000ac8:	e78f      	b.n	80009ea <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000aca:	4905      	ldr	r1, [pc, #20]	; (8000ae0 <HAL_RCC_ClockConfig+0x128>)
 8000acc:	68e0      	ldr	r0, [r4, #12]
 8000ace:	688b      	ldr	r3, [r1, #8]
 8000ad0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000ad4:	4303      	orrs	r3, r0
 8000ad6:	608b      	str	r3, [r1, #8]
 8000ad8:	e78a      	b.n	80009f0 <HAL_RCC_ClockConfig+0x38>
 8000ada:	bf00      	nop
 8000adc:	40023c00 	.word	0x40023c00
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	08001945 	.word	0x08001945
 8000ae8:	2000000c 	.word	0x2000000c

08000aec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8000aec:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8000aee:	f000 fc3f 	bl	8001370 <vTaskStartScheduler>
  
  return osOK;
}
 8000af2:	2000      	movs	r0, #0
 8000af4:	bd08      	pop	{r3, pc}

08000af6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000af6:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000af8:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8000afc:	8a02      	ldrh	r2, [r0, #16]
{
 8000afe:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000b00:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8000b04:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8000b06:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8000b08:	bf14      	ite	ne
 8000b0a:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8000b0c:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000b0e:	a803      	add	r0, sp, #12
 8000b10:	9001      	str	r0, [sp, #4]
 8000b12:	9400      	str	r4, [sp, #0]
 8000b14:	4628      	mov	r0, r5
 8000b16:	f000 fb5b 	bl	80011d0 <xTaskCreate>
 8000b1a:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8000b1c:	bf0c      	ite	eq
 8000b1e:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8000b20:	2000      	movne	r0, #0
}
 8000b22:	b005      	add	sp, #20
 8000b24:	bd30      	pop	{r4, r5, pc}

08000b26 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8000b26:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8000b28:	2800      	cmp	r0, #0
 8000b2a:	bf08      	it	eq
 8000b2c:	2001      	moveq	r0, #1
 8000b2e:	f000 fd6d 	bl	800160c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8000b32:	2000      	movs	r0, #0
 8000b34:	bd08      	pop	{r3, pc}

08000b36 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8000b36:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b38:	f000 fdc6 	bl	80016c8 <xTaskGetSchedulerState>
 8000b3c:	2801      	cmp	r0, #1
 8000b3e:	d003      	beq.n	8000b48 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8000b40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8000b44:	f000 b916 	b.w	8000d74 <xPortSysTickHandler>
 8000b48:	bd08      	pop	{r3, pc}

08000b4a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b4a:	f100 0308 	add.w	r3, r0, #8
 8000b4e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000b50:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b54:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b56:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000b58:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000b5a:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000b5c:	6003      	str	r3, [r0, #0]
 8000b5e:	4770      	bx	lr

08000b60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	6103      	str	r3, [r0, #16]
 8000b64:	4770      	bx	lr

08000b66 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000b66:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000b68:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000b6a:	689a      	ldr	r2, [r3, #8]
 8000b6c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000b6e:	689a      	ldr	r2, [r3, #8]
 8000b70:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000b72:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000b74:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000b76:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8000b78:	3301      	adds	r3, #1
 8000b7a:	6003      	str	r3, [r0, #0]
 8000b7c:	4770      	bx	lr

08000b7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000b7e:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000b80:	1c53      	adds	r3, r2, #1
{
 8000b82:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8000b84:	d10a      	bne.n	8000b9c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000b86:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000b8c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000b8e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8000b90:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000b92:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000b94:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8000b96:	3301      	adds	r3, #1
 8000b98:	6003      	str	r3, [r0, #0]
 8000b9a:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b9c:	f100 0308 	add.w	r3, r0, #8
 8000ba0:	685c      	ldr	r4, [r3, #4]
 8000ba2:	6825      	ldr	r5, [r4, #0]
 8000ba4:	42aa      	cmp	r2, r5
 8000ba6:	d3ef      	bcc.n	8000b88 <vListInsert+0xa>
 8000ba8:	4623      	mov	r3, r4
 8000baa:	e7f9      	b.n	8000ba0 <vListInsert+0x22>

08000bac <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000bac:	6841      	ldr	r1, [r0, #4]
 8000bae:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000bb0:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000bb2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000bb4:	6882      	ldr	r2, [r0, #8]
 8000bb6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000bb8:	6859      	ldr	r1, [r3, #4]
 8000bba:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000bbc:	bf08      	it	eq
 8000bbe:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	3a01      	subs	r2, #1
 8000bc8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000bca:	6818      	ldr	r0, [r3, #0]
}
 8000bcc:	4770      	bx	lr
	...

08000bd0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000bd0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <prvTaskExitError+0x3c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	d008      	beq.n	8000bf0 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000be2:	f383 8811 	msr	BASEPRI, r3
 8000be6:	f3bf 8f6f 	isb	sy
 8000bea:	f3bf 8f4f 	dsb	sy
 8000bee:	e7fe      	b.n	8000bee <prvTaskExitError+0x1e>
 8000bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bf4:	f383 8811 	msr	BASEPRI, r3
 8000bf8:	f3bf 8f6f 	isb	sy
 8000bfc:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000c00:	9b01      	ldr	r3, [sp, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d0fc      	beq.n	8000c00 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000c06:	b002      	add	sp, #8
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000008 	.word	0x20000008

08000c10 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8000c10:	4808      	ldr	r0, [pc, #32]	; (8000c34 <prvPortStartFirstTask+0x24>)
 8000c12:	6800      	ldr	r0, [r0, #0]
 8000c14:	6800      	ldr	r0, [r0, #0]
 8000c16:	f380 8808 	msr	MSP, r0
 8000c1a:	f04f 0000 	mov.w	r0, #0
 8000c1e:	f380 8814 	msr	CONTROL, r0
 8000c22:	b662      	cpsie	i
 8000c24:	b661      	cpsie	f
 8000c26:	f3bf 8f4f 	dsb	sy
 8000c2a:	f3bf 8f6f 	isb	sy
 8000c2e:	df00      	svc	0
 8000c30:	bf00      	nop
 8000c32:	0000      	.short	0x0000
 8000c34:	e000ed08 	.word	0xe000ed08

08000c38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8000c38:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000c48 <vPortEnableVFP+0x10>
 8000c3c:	6801      	ldr	r1, [r0, #0]
 8000c3e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000c42:	6001      	str	r1, [r0, #0]
 8000c44:	4770      	bx	lr
 8000c46:	0000      	.short	0x0000
 8000c48:	e000ed88 	.word	0xe000ed88

08000c4c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000c4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c50:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <pxPortInitialiseStack+0x28>)
 8000c56:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000c5a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8000c5e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000c62:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000c66:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8000c6a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8000c6e:	3844      	subs	r0, #68	; 0x44
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	08000bd1 	.word	0x08000bd1
	...

08000c80 <SVC_Handler>:
	__asm volatile (
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <pxCurrentTCBConst2>)
 8000c82:	6819      	ldr	r1, [r3, #0]
 8000c84:	6808      	ldr	r0, [r1, #0]
 8000c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c8a:	f380 8809 	msr	PSP, r0
 8000c8e:	f3bf 8f6f 	isb	sy
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	f380 8811 	msr	BASEPRI, r0
 8000c9a:	4770      	bx	lr
 8000c9c:	f3af 8000 	nop.w

08000ca0 <pxCurrentTCBConst2>:
 8000ca0:	20003c4c 	.word	0x20003c4c

08000ca4 <vPortEnterCritical>:
 8000ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ca8:	f383 8811 	msr	BASEPRI, r3
 8000cac:	f3bf 8f6f 	isb	sy
 8000cb0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <vPortEnterCritical+0x3c>)
 8000cb6:	6813      	ldr	r3, [r2, #0]
 8000cb8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8000cba:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8000cbc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8000cbe:	d10d      	bne.n	8000cdc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <vPortEnterCritical+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000cc8:	d008      	beq.n	8000cdc <vPortEnterCritical+0x38>
 8000cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cce:	f383 8811 	msr	BASEPRI, r3
 8000cd2:	f3bf 8f6f 	isb	sy
 8000cd6:	f3bf 8f4f 	dsb	sy
 8000cda:	e7fe      	b.n	8000cda <vPortEnterCritical+0x36>
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	e000ed04 	.word	0xe000ed04

08000ce8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8000ce8:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <vPortExitCritical+0x24>)
 8000cea:	6813      	ldr	r3, [r2, #0]
 8000cec:	b943      	cbnz	r3, 8000d00 <vPortExitCritical+0x18>
 8000cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cf2:	f383 8811 	msr	BASEPRI, r3
 8000cf6:	f3bf 8f6f 	isb	sy
 8000cfa:	f3bf 8f4f 	dsb	sy
 8000cfe:	e7fe      	b.n	8000cfe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8000d00:	3b01      	subs	r3, #1
 8000d02:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000d04:	b90b      	cbnz	r3, 8000d0a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000d06:	f383 8811 	msr	BASEPRI, r3
 8000d0a:	4770      	bx	lr
 8000d0c:	20000008 	.word	0x20000008

08000d10 <PendSV_Handler>:
	__asm volatile
 8000d10:	f3ef 8009 	mrs	r0, PSP
 8000d14:	f3bf 8f6f 	isb	sy
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <pxCurrentTCBConst>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	f01e 0f10 	tst.w	lr, #16
 8000d20:	bf08      	it	eq
 8000d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d2a:	6010      	str	r0, [r2, #0]
 8000d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000d34:	f380 8811 	msr	BASEPRI, r0
 8000d38:	f3bf 8f4f 	dsb	sy
 8000d3c:	f3bf 8f6f 	isb	sy
 8000d40:	f000 fc88 	bl	8001654 <vTaskSwitchContext>
 8000d44:	f04f 0000 	mov.w	r0, #0
 8000d48:	f380 8811 	msr	BASEPRI, r0
 8000d4c:	bc09      	pop	{r0, r3}
 8000d4e:	6819      	ldr	r1, [r3, #0]
 8000d50:	6808      	ldr	r0, [r1, #0]
 8000d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d56:	f01e 0f10 	tst.w	lr, #16
 8000d5a:	bf08      	it	eq
 8000d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000d60:	f380 8809 	msr	PSP, r0
 8000d64:	f3bf 8f6f 	isb	sy
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	f3af 8000 	nop.w

08000d70 <pxCurrentTCBConst>:
 8000d70:	20003c4c 	.word	0x20003c4c

08000d74 <xPortSysTickHandler>:
{
 8000d74:	b508      	push	{r3, lr}
	__asm volatile
 8000d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d7a:	f383 8811 	msr	BASEPRI, r3
 8000d7e:	f3bf 8f6f 	isb	sy
 8000d82:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8000d86:	f000 fb37 	bl	80013f8 <xTaskIncrementTick>
 8000d8a:	b118      	cbz	r0, 8000d94 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <xPortSysTickHandler+0x28>)
 8000d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d92:	601a      	str	r2, [r3, #0]
	__asm volatile
 8000d94:	2300      	movs	r3, #0
 8000d96:	f383 8811 	msr	BASEPRI, r3
 8000d9a:	bd08      	pop	{r3, pc}
 8000d9c:	e000ed04 	.word	0xe000ed04

08000da0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000da0:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000da2:	4909      	ldr	r1, [pc, #36]	; (8000dc8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000da8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <vPortSetupTimerInterrupt+0x2c>)
 8000dac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db6:	4906      	ldr	r1, [pc, #24]	; (8000dd0 <vPortSetupTimerInterrupt+0x30>)
 8000db8:	3b01      	subs	r3, #1
 8000dba:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010
 8000dc8:	e000e018 	.word	0xe000e018
 8000dcc:	2000000c 	.word	0x2000000c
 8000dd0:	e000e014 	.word	0xe000e014

08000dd4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000dd4:	4b39      	ldr	r3, [pc, #228]	; (8000ebc <xPortStartScheduler+0xe8>)
 8000dd6:	4a3a      	ldr	r2, [pc, #232]	; (8000ec0 <xPortStartScheduler+0xec>)
{
 8000dd8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000dda:	6819      	ldr	r1, [r3, #0]
 8000ddc:	4291      	cmp	r1, r2
 8000dde:	d108      	bne.n	8000df2 <xPortStartScheduler+0x1e>
	__asm volatile
 8000de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000de4:	f383 8811 	msr	BASEPRI, r3
 8000de8:	f3bf 8f6f 	isb	sy
 8000dec:	f3bf 8f4f 	dsb	sy
 8000df0:	e7fe      	b.n	8000df0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b33      	ldr	r3, [pc, #204]	; (8000ec4 <xPortStartScheduler+0xf0>)
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d108      	bne.n	8000e0c <xPortStartScheduler+0x38>
 8000dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dfe:	f383 8811 	msr	BASEPRI, r3
 8000e02:	f3bf 8f6f 	isb	sy
 8000e06:	f3bf 8f4f 	dsb	sy
 8000e0a:	e7fe      	b.n	8000e0a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000e0c:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <xPortStartScheduler+0xf4>)
 8000e0e:	781a      	ldrb	r2, [r3, #0]
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000e14:	22ff      	movs	r2, #255	; 0xff
 8000e16:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000e18:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000e1a:	4a2c      	ldr	r2, [pc, #176]	; (8000ecc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000e22:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000e26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000e2a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000e2c:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <xPortStartScheduler+0xfc>)
 8000e2e:	2207      	movs	r2, #7
 8000e30:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000e32:	2100      	movs	r1, #0
 8000e34:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8000e38:	0600      	lsls	r0, r0, #24
 8000e3a:	f102 34ff 	add.w	r4, r2, #4294967295
 8000e3e:	d40d      	bmi.n	8000e5c <xPortStartScheduler+0x88>
 8000e40:	b101      	cbz	r1, 8000e44 <xPortStartScheduler+0x70>
 8000e42:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	2a03      	cmp	r2, #3
 8000e48:	d011      	beq.n	8000e6e <xPortStartScheduler+0x9a>
 8000e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e4e:	f383 8811 	msr	BASEPRI, r3
 8000e52:	f3bf 8f6f 	isb	sy
 8000e56:	f3bf 8f4f 	dsb	sy
 8000e5a:	e7fe      	b.n	8000e5a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000e5c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8000e60:	0052      	lsls	r2, r2, #1
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	f88d 2003 	strb.w	r2, [sp, #3]
 8000e68:	2101      	movs	r1, #1
 8000e6a:	4622      	mov	r2, r4
 8000e6c:	e7e2      	b.n	8000e34 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000e6e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000e70:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000e74:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000e76:	9b01      	ldr	r3, [sp, #4]
 8000e78:	4a13      	ldr	r2, [pc, #76]	; (8000ec8 <xPortStartScheduler+0xf4>)
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <xPortStartScheduler+0x100>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000e86:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8000e8e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8000e90:	f7ff ff86 	bl	8000da0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8000e94:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <xPortStartScheduler+0x104>)
 8000e96:	2400      	movs	r4, #0
 8000e98:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8000e9a:	f7ff fecd 	bl	8000c38 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000e9e:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <xPortStartScheduler+0x108>)
 8000ea0:	6813      	ldr	r3, [r2, #0]
 8000ea2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000ea6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8000ea8:	f7ff feb2 	bl	8000c10 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8000eac:	f000 fbd2 	bl	8001654 <vTaskSwitchContext>
	prvTaskExitError();
 8000eb0:	f7ff fe8e 	bl	8000bd0 <prvTaskExitError>
}
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	b002      	add	sp, #8
 8000eb8:	bd10      	pop	{r4, pc}
 8000eba:	bf00      	nop
 8000ebc:	e000ed00 	.word	0xe000ed00
 8000ec0:	410fc271 	.word	0x410fc271
 8000ec4:	410fc270 	.word	0x410fc270
 8000ec8:	e000e400 	.word	0xe000e400
 8000ecc:	2000002c 	.word	0x2000002c
 8000ed0:	20000030 	.word	0x20000030
 8000ed4:	e000ed20 	.word	0xe000ed20
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	e000ef34 	.word	0xe000ef34

08000ee0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000ee0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <prvInsertBlockIntoFreeList+0x40>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4282      	cmp	r2, r0
 8000ee8:	d318      	bcc.n	8000f1c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000eea:	685c      	ldr	r4, [r3, #4]
 8000eec:	1919      	adds	r1, r3, r4
 8000eee:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000ef0:	bf01      	itttt	eq
 8000ef2:	6841      	ldreq	r1, [r0, #4]
 8000ef4:	4618      	moveq	r0, r3
 8000ef6:	1909      	addeq	r1, r1, r4
 8000ef8:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000efa:	6844      	ldr	r4, [r0, #4]
 8000efc:	1901      	adds	r1, r0, r4
 8000efe:	428a      	cmp	r2, r1
 8000f00:	d107      	bne.n	8000f12 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <prvInsertBlockIntoFreeList+0x44>)
 8000f04:	6809      	ldr	r1, [r1, #0]
 8000f06:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000f08:	bf1f      	itttt	ne
 8000f0a:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000f0c:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000f0e:	1909      	addne	r1, r1, r4
 8000f10:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000f12:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000f14:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000f16:	bf18      	it	ne
 8000f18:	6018      	strne	r0, [r3, #0]
 8000f1a:	bd10      	pop	{r4, pc}
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	e7e1      	b.n	8000ee4 <prvInsertBlockIntoFreeList+0x4>
 8000f20:	20003c44 	.word	0x20003c44
 8000f24:	20000034 	.word	0x20000034

08000f28 <pvPortMalloc>:
{
 8000f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f2c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8000f2e:	f000 fa5b 	bl	80013e8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8000f32:	493e      	ldr	r1, [pc, #248]	; (800102c <pvPortMalloc+0x104>)
 8000f34:	4d3e      	ldr	r5, [pc, #248]	; (8001030 <pvPortMalloc+0x108>)
 8000f36:	680b      	ldr	r3, [r1, #0]
 8000f38:	bb0b      	cbnz	r3, 8000f7e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8000f3a:	4a3e      	ldr	r2, [pc, #248]	; (8001034 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000f3c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000f3e:	bf1f      	itttt	ne
 8000f40:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000f42:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000f46:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8000f4a:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000f4c:	bf14      	ite	ne
 8000f4e:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000f50:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000f54:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8000f56:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000f58:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000f5c:	4e36      	ldr	r6, [pc, #216]	; (8001038 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8000f5e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000f60:	2000      	movs	r0, #0
 8000f62:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000f64:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8000f66:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000f68:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000f6a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000f6c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000f6e:	4b33      	ldr	r3, [pc, #204]	; (800103c <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000f70:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000f72:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000f74:	4b32      	ldr	r3, [pc, #200]	; (8001040 <pvPortMalloc+0x118>)
 8000f76:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000f78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000f7c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000f7e:	682f      	ldr	r7, [r5, #0]
 8000f80:	4227      	tst	r7, r4
 8000f82:	d116      	bne.n	8000fb2 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d041      	beq.n	800100c <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8000f88:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000f8c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000f8e:	bf1c      	itt	ne
 8000f90:	f023 0307 	bicne.w	r3, r3, #7
 8000f94:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000f96:	b163      	cbz	r3, 8000fb2 <pvPortMalloc+0x8a>
 8000f98:	4a29      	ldr	r2, [pc, #164]	; (8001040 <pvPortMalloc+0x118>)
 8000f9a:	6816      	ldr	r6, [r2, #0]
 8000f9c:	42b3      	cmp	r3, r6
 8000f9e:	4690      	mov	r8, r2
 8000fa0:	d807      	bhi.n	8000fb2 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8000fa2:	4a25      	ldr	r2, [pc, #148]	; (8001038 <pvPortMalloc+0x110>)
 8000fa4:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000fa6:	6868      	ldr	r0, [r5, #4]
 8000fa8:	4283      	cmp	r3, r0
 8000faa:	d804      	bhi.n	8000fb6 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8000fac:	6809      	ldr	r1, [r1, #0]
 8000fae:	428d      	cmp	r5, r1
 8000fb0:	d107      	bne.n	8000fc2 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8000fb2:	2400      	movs	r4, #0
 8000fb4:	e02a      	b.n	800100c <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000fb6:	682c      	ldr	r4, [r5, #0]
 8000fb8:	2c00      	cmp	r4, #0
 8000fba:	d0f7      	beq.n	8000fac <pvPortMalloc+0x84>
 8000fbc:	462a      	mov	r2, r5
 8000fbe:	4625      	mov	r5, r4
 8000fc0:	e7f1      	b.n	8000fa6 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000fc2:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000fc4:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000fc6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000fc8:	1ac2      	subs	r2, r0, r3
 8000fca:	2a10      	cmp	r2, #16
 8000fcc:	d90f      	bls.n	8000fee <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000fce:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fd0:	0741      	lsls	r1, r0, #29
 8000fd2:	d008      	beq.n	8000fe6 <pvPortMalloc+0xbe>
 8000fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fd8:	f383 8811 	msr	BASEPRI, r3
 8000fdc:	f3bf 8f6f 	isb	sy
 8000fe0:	f3bf 8f4f 	dsb	sy
 8000fe4:	e7fe      	b.n	8000fe4 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000fe6:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000fe8:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000fea:	f7ff ff79 	bl	8000ee0 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000fee:	4913      	ldr	r1, [pc, #76]	; (800103c <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000ff0:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000ff2:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000ff4:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000ff6:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000ff8:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8000ffa:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000ffe:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001002:	bf38      	it	cc
 8001004:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001006:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001008:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800100a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800100c:	f000 fa86 	bl	800151c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001010:	0763      	lsls	r3, r4, #29
 8001012:	d008      	beq.n	8001026 <pvPortMalloc+0xfe>
 8001014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001018:	f383 8811 	msr	BASEPRI, r3
 800101c:	f3bf 8f6f 	isb	sy
 8001020:	f3bf 8f4f 	dsb	sy
 8001024:	e7fe      	b.n	8001024 <pvPortMalloc+0xfc>
}
 8001026:	4620      	mov	r0, r4
 8001028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800102c:	20000034 	.word	0x20000034
 8001030:	20003c38 	.word	0x20003c38
 8001034:	20000038 	.word	0x20000038
 8001038:	20003c44 	.word	0x20003c44
 800103c:	20003c40 	.word	0x20003c40
 8001040:	20003c3c 	.word	0x20003c3c

08001044 <vPortFree>:
{
 8001044:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001046:	4604      	mov	r4, r0
 8001048:	b370      	cbz	r0, 80010a8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800104a:	4a18      	ldr	r2, [pc, #96]	; (80010ac <vPortFree+0x68>)
 800104c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001050:	6812      	ldr	r2, [r2, #0]
 8001052:	4213      	tst	r3, r2
 8001054:	d108      	bne.n	8001068 <vPortFree+0x24>
 8001056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800105a:	f383 8811 	msr	BASEPRI, r3
 800105e:	f3bf 8f6f 	isb	sy
 8001062:	f3bf 8f4f 	dsb	sy
 8001066:	e7fe      	b.n	8001066 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001068:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800106c:	b141      	cbz	r1, 8001080 <vPortFree+0x3c>
 800106e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001072:	f383 8811 	msr	BASEPRI, r3
 8001076:	f3bf 8f6f 	isb	sy
 800107a:	f3bf 8f4f 	dsb	sy
 800107e:	e7fe      	b.n	800107e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001080:	ea23 0302 	bic.w	r3, r3, r2
 8001084:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001088:	f000 f9ae 	bl	80013e8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800108c:	4a08      	ldr	r2, [pc, #32]	; (80010b0 <vPortFree+0x6c>)
 800108e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8001092:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001094:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001098:	440b      	add	r3, r1
 800109a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800109c:	f7ff ff20 	bl	8000ee0 <prvInsertBlockIntoFreeList>
}
 80010a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80010a4:	f000 ba3a 	b.w	800151c <xTaskResumeAll>
 80010a8:	bd10      	pop	{r4, pc}
 80010aa:	bf00      	nop
 80010ac:	20003c38 	.word	0x20003c38
 80010b0:	20003c3c 	.word	0x20003c3c

080010b4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80010b4:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <prvResetNextTaskUnblockTime+0x1c>)
 80010b6:	6813      	ldr	r3, [r2, #0]
 80010b8:	6819      	ldr	r1, [r3, #0]
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <prvResetNextTaskUnblockTime+0x20>)
 80010bc:	b919      	cbnz	r1, 80010c6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80010be:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80010c6:	6812      	ldr	r2, [r2, #0]
 80010c8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80010ca:	68d2      	ldr	r2, [r2, #12]
 80010cc:	6852      	ldr	r2, [r2, #4]
 80010ce:	e7f8      	b.n	80010c2 <prvResetNextTaskUnblockTime+0xe>
 80010d0:	20003c50 	.word	0x20003c50
 80010d4:	20003d28 	.word	0x20003d28

080010d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80010d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80010dc:	4e1b      	ldr	r6, [pc, #108]	; (800114c <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80010de:	681d      	ldr	r5, [r3, #0]
{
 80010e0:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80010e2:	6830      	ldr	r0, [r6, #0]
 80010e4:	3004      	adds	r0, #4
{
 80010e6:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80010e8:	f7ff fd60 	bl	8000bac <uxListRemove>
 80010ec:	4633      	mov	r3, r6
 80010ee:	b940      	cbnz	r0, 8001102 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80010f0:	6831      	ldr	r1, [r6, #0]
 80010f2:	4e17      	ldr	r6, [pc, #92]	; (8001150 <prvAddCurrentTaskToDelayedList+0x78>)
 80010f4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80010f6:	6832      	ldr	r2, [r6, #0]
 80010f8:	2001      	movs	r0, #1
 80010fa:	4088      	lsls	r0, r1
 80010fc:	ea22 0200 	bic.w	r2, r2, r0
 8001100:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001102:	1c62      	adds	r2, r4, #1
 8001104:	d107      	bne.n	8001116 <prvAddCurrentTaskToDelayedList+0x3e>
 8001106:	b137      	cbz	r7, 8001116 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001108:	6819      	ldr	r1, [r3, #0]
 800110a:	4812      	ldr	r0, [pc, #72]	; (8001154 <prvAddCurrentTaskToDelayedList+0x7c>)
 800110c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800110e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001112:	f7ff bd28 	b.w	8000b66 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001116:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001118:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800111a:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800111c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800111e:	d907      	bls.n	8001130 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <prvAddCurrentTaskToDelayedList+0x80>)
 8001122:	6810      	ldr	r0, [r2, #0]
 8001124:	6819      	ldr	r1, [r3, #0]
}
 8001126:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800112a:	3104      	adds	r1, #4
 800112c:	f7ff bd27 	b.w	8000b7e <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001130:	4a0a      	ldr	r2, [pc, #40]	; (800115c <prvAddCurrentTaskToDelayedList+0x84>)
 8001132:	6810      	ldr	r0, [r2, #0]
 8001134:	6819      	ldr	r1, [r3, #0]
 8001136:	3104      	adds	r1, #4
 8001138:	f7ff fd21 	bl	8000b7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <prvAddCurrentTaskToDelayedList+0x88>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001142:	bf38      	it	cc
 8001144:	601c      	strcc	r4, [r3, #0]
 8001146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001148:	20003d70 	.word	0x20003d70
 800114c:	20003c4c 	.word	0x20003c4c
 8001150:	20003cf8 	.word	0x20003cf8
 8001154:	20003d48 	.word	0x20003d48
 8001158:	20003c54 	.word	0x20003c54
 800115c:	20003c50 	.word	0x20003c50
 8001160:	20003d28 	.word	0x20003d28

08001164 <prvIdleTask>:
{
 8001164:	b580      	push	{r7, lr}
				taskYIELD();
 8001166:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80011cc <prvIdleTask+0x68>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800116a:	4f14      	ldr	r7, [pc, #80]	; (80011bc <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800116c:	4c14      	ldr	r4, [pc, #80]	; (80011c0 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 800116e:	4e15      	ldr	r6, [pc, #84]	; (80011c4 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	b963      	cbnz	r3, 800118e <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <prvIdleTask+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d9f8      	bls.n	800116e <prvIdleTask+0xa>
				taskYIELD();
 800117c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001180:	f8c8 3000 	str.w	r3, [r8]
 8001184:	f3bf 8f4f 	dsb	sy
 8001188:	f3bf 8f6f 	isb	sy
 800118c:	e7ee      	b.n	800116c <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 800118e:	f7ff fd89 	bl	8000ca4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001196:	1d28      	adds	r0, r5, #4
 8001198:	f7ff fd08 	bl	8000bac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800119c:	6833      	ldr	r3, [r6, #0]
 800119e:	3b01      	subs	r3, #1
 80011a0:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 80011a2:	6823      	ldr	r3, [r4, #0]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80011a8:	f7ff fd9e 	bl	8000ce8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80011ac:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80011ae:	f7ff ff49 	bl	8001044 <vPortFree>
			vPortFree( pxTCB );
 80011b2:	4628      	mov	r0, r5
 80011b4:	f7ff ff46 	bl	8001044 <vPortFree>
 80011b8:	e7da      	b.n	8001170 <prvIdleTask+0xc>
 80011ba:	bf00      	nop
 80011bc:	20003d5c 	.word	0x20003d5c
 80011c0:	20003ce8 	.word	0x20003ce8
 80011c4:	20003ce4 	.word	0x20003ce4
 80011c8:	20003c58 	.word	0x20003c58
 80011cc:	e000ed04 	.word	0xe000ed04

080011d0 <xTaskCreate>:
	{
 80011d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80011d4:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80011d8:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80011da:	4650      	mov	r0, sl
	{
 80011dc:	460f      	mov	r7, r1
 80011de:	4699      	mov	r9, r3
 80011e0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80011e2:	f7ff fea1 	bl	8000f28 <pvPortMalloc>
			if( pxStack != NULL )
 80011e6:	4605      	mov	r5, r0
 80011e8:	2800      	cmp	r0, #0
 80011ea:	f000 8096 	beq.w	800131a <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80011ee:	2054      	movs	r0, #84	; 0x54
 80011f0:	f7ff fe9a 	bl	8000f28 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80011f4:	4604      	mov	r4, r0
 80011f6:	2800      	cmp	r0, #0
 80011f8:	f000 808c 	beq.w	8001314 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80011fc:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8001200:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001202:	4455      	add	r5, sl
 8001204:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001206:	f025 0a07 	bic.w	sl, r5, #7
 800120a:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800120e:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001210:	7859      	ldrb	r1, [r3, #1]
 8001212:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001216:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800121a:	b109      	cbz	r1, 8001220 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800121c:	42bb      	cmp	r3, r7
 800121e:	d1f7      	bne.n	8001210 <xTaskCreate+0x40>
 8001220:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001222:	2d06      	cmp	r5, #6
 8001224:	bf28      	it	cs
 8001226:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001228:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800122c:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800122e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001230:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001232:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001234:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001238:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800123c:	f7ff fc90 	bl	8000b60 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001240:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001244:	f104 0018 	add.w	r0, r4, #24
 8001248:	f7ff fc8a 	bl	8000b60 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800124c:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001250:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001252:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001254:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001256:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800125a:	464a      	mov	r2, r9
 800125c:	4641      	mov	r1, r8
 800125e:	4650      	mov	r0, sl
 8001260:	f7ff fcf4 	bl	8000c4c <pxPortInitialiseStack>
 8001264:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001266:	b106      	cbz	r6, 800126a <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001268:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800126a:	f7ff fd1b 	bl	8000ca4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800126e:	4b32      	ldr	r3, [pc, #200]	; (8001338 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8001270:	4e32      	ldr	r6, [pc, #200]	; (800133c <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001368 <xTaskCreate+0x198>
 8001278:	3201      	adds	r2, #1
 800127a:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800127c:	6835      	ldr	r5, [r6, #0]
 800127e:	2d00      	cmp	r5, #0
 8001280:	d14e      	bne.n	8001320 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8001282:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d11d      	bne.n	80012c6 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800128a:	eb08 0005 	add.w	r0, r8, r5
 800128e:	3514      	adds	r5, #20
 8001290:	f7ff fc5b 	bl	8000b4a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001294:	2d8c      	cmp	r5, #140	; 0x8c
 8001296:	d1f8      	bne.n	800128a <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8001298:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800136c <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 800129c:	4d28      	ldr	r5, [pc, #160]	; (8001340 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 800129e:	4648      	mov	r0, r9
 80012a0:	f7ff fc53 	bl	8000b4a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80012a4:	4628      	mov	r0, r5
 80012a6:	f7ff fc50 	bl	8000b4a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80012aa:	4826      	ldr	r0, [pc, #152]	; (8001344 <xTaskCreate+0x174>)
 80012ac:	f7ff fc4d 	bl	8000b4a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80012b0:	4825      	ldr	r0, [pc, #148]	; (8001348 <xTaskCreate+0x178>)
 80012b2:	f7ff fc4a 	bl	8000b4a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80012b6:	4825      	ldr	r0, [pc, #148]	; (800134c <xTaskCreate+0x17c>)
 80012b8:	f7ff fc47 	bl	8000b4a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80012bc:	4b24      	ldr	r3, [pc, #144]	; (8001350 <xTaskCreate+0x180>)
 80012be:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80012c2:	4b24      	ldr	r3, [pc, #144]	; (8001354 <xTaskCreate+0x184>)
 80012c4:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80012c6:	4a24      	ldr	r2, [pc, #144]	; (8001358 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 80012c8:	4924      	ldr	r1, [pc, #144]	; (800135c <xTaskCreate+0x18c>)
		uxTaskNumber++;
 80012ca:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80012cc:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80012ce:	3301      	adds	r3, #1
 80012d0:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80012d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012d4:	2501      	movs	r5, #1
 80012d6:	fa05 f302 	lsl.w	r3, r5, r2
 80012da:	4303      	orrs	r3, r0
 80012dc:	2014      	movs	r0, #20
 80012de:	600b      	str	r3, [r1, #0]
 80012e0:	fb00 8002 	mla	r0, r0, r2, r8
 80012e4:	4639      	mov	r1, r7
 80012e6:	f7ff fc3e 	bl	8000b66 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80012ea:	f7ff fcfd 	bl	8000ce8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <xTaskCreate+0x190>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	b163      	cbz	r3, 800130e <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80012f4:	6833      	ldr	r3, [r6, #0]
 80012f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d207      	bcs.n	800130e <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 80012fe:	4b19      	ldr	r3, [pc, #100]	; (8001364 <xTaskCreate+0x194>)
 8001300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	f3bf 8f4f 	dsb	sy
 800130a:	f3bf 8f6f 	isb	sy
	}
 800130e:	4628      	mov	r0, r5
 8001310:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8001314:	4628      	mov	r0, r5
 8001316:	f7ff fe95 	bl	8001044 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800131a:	f04f 35ff 	mov.w	r5, #4294967295
 800131e:	e7f6      	b.n	800130e <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <xTaskCreate+0x190>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1ce      	bne.n	80012c6 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001328:	6833      	ldr	r3, [r6, #0]
 800132a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800132c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800132e:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001330:	bf98      	it	ls
 8001332:	6034      	strls	r4, [r6, #0]
 8001334:	e7c7      	b.n	80012c6 <xTaskCreate+0xf6>
 8001336:	bf00      	nop
 8001338:	20003ce4 	.word	0x20003ce4
 800133c:	20003c4c 	.word	0x20003c4c
 8001340:	20003d10 	.word	0x20003d10
 8001344:	20003d30 	.word	0x20003d30
 8001348:	20003d5c 	.word	0x20003d5c
 800134c:	20003d48 	.word	0x20003d48
 8001350:	20003c50 	.word	0x20003c50
 8001354:	20003c54 	.word	0x20003c54
 8001358:	20003cf4 	.word	0x20003cf4
 800135c:	20003cf8 	.word	0x20003cf8
 8001360:	20003d44 	.word	0x20003d44
 8001364:	e000ed04 	.word	0xe000ed04
 8001368:	20003c58 	.word	0x20003c58
 800136c:	20003cfc 	.word	0x20003cfc

08001370 <vTaskStartScheduler>:
{
 8001370:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <vTaskStartScheduler+0x60>)
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	2400      	movs	r4, #0
 8001378:	9400      	str	r4, [sp, #0]
 800137a:	4623      	mov	r3, r4
 800137c:	2280      	movs	r2, #128	; 0x80
 800137e:	4915      	ldr	r1, [pc, #84]	; (80013d4 <vTaskStartScheduler+0x64>)
 8001380:	4815      	ldr	r0, [pc, #84]	; (80013d8 <vTaskStartScheduler+0x68>)
 8001382:	f7ff ff25 	bl	80011d0 <xTaskCreate>
	if( xReturn == pdPASS )
 8001386:	2801      	cmp	r0, #1
 8001388:	d114      	bne.n	80013b4 <vTaskStartScheduler+0x44>
 800138a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800138e:	f383 8811 	msr	BASEPRI, r3
 8001392:	f3bf 8f6f 	isb	sy
 8001396:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <vTaskStartScheduler+0x6c>)
 800139c:	f04f 32ff 	mov.w	r2, #4294967295
 80013a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <vTaskStartScheduler+0x70>)
 80013a4:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <vTaskStartScheduler+0x74>)
 80013a8:	601c      	str	r4, [r3, #0]
}
 80013aa:	b002      	add	sp, #8
 80013ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80013b0:	f7ff bd10 	b.w	8000dd4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80013b4:	3001      	adds	r0, #1
 80013b6:	d108      	bne.n	80013ca <vTaskStartScheduler+0x5a>
 80013b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013bc:	f383 8811 	msr	BASEPRI, r3
 80013c0:	f3bf 8f6f 	isb	sy
 80013c4:	f3bf 8f4f 	dsb	sy
 80013c8:	e7fe      	b.n	80013c8 <vTaskStartScheduler+0x58>
}
 80013ca:	b002      	add	sp, #8
 80013cc:	bd10      	pop	{r4, pc}
 80013ce:	bf00      	nop
 80013d0:	20003d24 	.word	0x20003d24
 80013d4:	08001934 	.word	0x08001934
 80013d8:	08001165 	.word	0x08001165
 80013dc:	20003d28 	.word	0x20003d28
 80013e0:	20003d44 	.word	0x20003d44
 80013e4:	20003d70 	.word	0x20003d70

080013e8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80013e8:	4a02      	ldr	r2, [pc, #8]	; (80013f4 <vTaskSuspendAll+0xc>)
 80013ea:	6813      	ldr	r3, [r2, #0]
 80013ec:	3301      	adds	r3, #1
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20003cf0 	.word	0x20003cf0

080013f8 <xTaskIncrementTick>:
{
 80013f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80013fc:	4b3c      	ldr	r3, [pc, #240]	; (80014f0 <xTaskIncrementTick+0xf8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d153      	bne.n	80014ac <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001404:	4b3b      	ldr	r3, [pc, #236]	; (80014f4 <xTaskIncrementTick+0xfc>)
 8001406:	681c      	ldr	r4, [r3, #0]
 8001408:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800140a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800140c:	b9bc      	cbnz	r4, 800143e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800140e:	4b3a      	ldr	r3, [pc, #232]	; (80014f8 <xTaskIncrementTick+0x100>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	6812      	ldr	r2, [r2, #0]
 8001414:	b142      	cbz	r2, 8001428 <xTaskIncrementTick+0x30>
 8001416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800141a:	f383 8811 	msr	BASEPRI, r3
 800141e:	f3bf 8f6f 	isb	sy
 8001422:	f3bf 8f4f 	dsb	sy
 8001426:	e7fe      	b.n	8001426 <xTaskIncrementTick+0x2e>
 8001428:	4a34      	ldr	r2, [pc, #208]	; (80014fc <xTaskIncrementTick+0x104>)
 800142a:	6819      	ldr	r1, [r3, #0]
 800142c:	6810      	ldr	r0, [r2, #0]
 800142e:	6018      	str	r0, [r3, #0]
 8001430:	6011      	str	r1, [r2, #0]
 8001432:	4a33      	ldr	r2, [pc, #204]	; (8001500 <xTaskIncrementTick+0x108>)
 8001434:	6813      	ldr	r3, [r2, #0]
 8001436:	3301      	adds	r3, #1
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	f7ff fe3b 	bl	80010b4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800143e:	4d31      	ldr	r5, [pc, #196]	; (8001504 <xTaskIncrementTick+0x10c>)
 8001440:	4f31      	ldr	r7, [pc, #196]	; (8001508 <xTaskIncrementTick+0x110>)
 8001442:	682b      	ldr	r3, [r5, #0]
 8001444:	429c      	cmp	r4, r3
 8001446:	f04f 0b00 	mov.w	fp, #0
 800144a:	d33e      	bcc.n	80014ca <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800144c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80014f8 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001450:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001518 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001454:	f8d8 2000 	ldr.w	r2, [r8]
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	bb72      	cbnz	r2, 80014ba <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800145c:	f04f 32ff 	mov.w	r2, #4294967295
 8001460:	602a      	str	r2, [r5, #0]
					break;
 8001462:	e032      	b.n	80014ca <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001464:	f106 0a04 	add.w	sl, r6, #4
 8001468:	4650      	mov	r0, sl
 800146a:	f7ff fb9f 	bl	8000bac <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800146e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001470:	b119      	cbz	r1, 800147a <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001472:	f106 0018 	add.w	r0, r6, #24
 8001476:	f7ff fb99 	bl	8000bac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800147a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800147c:	f8d9 3000 	ldr.w	r3, [r9]
 8001480:	2201      	movs	r2, #1
 8001482:	fa02 f100 	lsl.w	r1, r2, r0
 8001486:	4319      	orrs	r1, r3
 8001488:	4b20      	ldr	r3, [pc, #128]	; (800150c <xTaskIncrementTick+0x114>)
 800148a:	f8c9 1000 	str.w	r1, [r9]
 800148e:	f04f 0e14 	mov.w	lr, #20
 8001492:	4651      	mov	r1, sl
 8001494:	fb0e 3000 	mla	r0, lr, r0, r3
 8001498:	f7ff fb65 	bl	8000b66 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800149c:	6838      	ldr	r0, [r7, #0]
 800149e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80014a0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80014a2:	4291      	cmp	r1, r2
 80014a4:	bf28      	it	cs
 80014a6:	f04f 0b01 	movcs.w	fp, #1
 80014aa:	e7d3      	b.n	8001454 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80014ac:	4a18      	ldr	r2, [pc, #96]	; (8001510 <xTaskIncrementTick+0x118>)
 80014ae:	6813      	ldr	r3, [r2, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80014b4:	f04f 0b00 	mov.w	fp, #0
 80014b8:	e011      	b.n	80014de <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80014ba:	f8d8 2000 	ldr.w	r2, [r8]
 80014be:	68d2      	ldr	r2, [r2, #12]
 80014c0:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80014c2:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80014c4:	428c      	cmp	r4, r1
 80014c6:	d2cd      	bcs.n	8001464 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 80014c8:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <xTaskIncrementTick+0x114>)
 80014ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80014d0:	2214      	movs	r2, #20
 80014d2:	434a      	muls	r2, r1
 80014d4:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80014d6:	2a02      	cmp	r2, #2
 80014d8:	bf28      	it	cs
 80014da:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80014de:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <xTaskIncrementTick+0x11c>)
 80014e0:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80014e2:	2a00      	cmp	r2, #0
 80014e4:	bf18      	it	ne
 80014e6:	f04f 0b01 	movne.w	fp, #1
}
 80014ea:	4658      	mov	r0, fp
 80014ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014f0:	20003cf0 	.word	0x20003cf0
 80014f4:	20003d70 	.word	0x20003d70
 80014f8:	20003c50 	.word	0x20003c50
 80014fc:	20003c54 	.word	0x20003c54
 8001500:	20003d2c 	.word	0x20003d2c
 8001504:	20003d28 	.word	0x20003d28
 8001508:	20003c4c 	.word	0x20003c4c
 800150c:	20003c58 	.word	0x20003c58
 8001510:	20003cec 	.word	0x20003cec
 8001514:	20003d74 	.word	0x20003d74
 8001518:	20003cf8 	.word	0x20003cf8

0800151c <xTaskResumeAll>:
{
 800151c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001520:	4c31      	ldr	r4, [pc, #196]	; (80015e8 <xTaskResumeAll+0xcc>)
 8001522:	6823      	ldr	r3, [r4, #0]
 8001524:	b943      	cbnz	r3, 8001538 <xTaskResumeAll+0x1c>
 8001526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800152a:	f383 8811 	msr	BASEPRI, r3
 800152e:	f3bf 8f6f 	isb	sy
 8001532:	f3bf 8f4f 	dsb	sy
 8001536:	e7fe      	b.n	8001536 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8001538:	f7ff fbb4 	bl	8000ca4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800153c:	6823      	ldr	r3, [r4, #0]
 800153e:	3b01      	subs	r3, #1
 8001540:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001542:	6824      	ldr	r4, [r4, #0]
 8001544:	b12c      	cbz	r4, 8001552 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8001546:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001548:	f7ff fbce 	bl	8000ce8 <vPortExitCritical>
}
 800154c:	4620      	mov	r0, r4
 800154e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001552:	4b26      	ldr	r3, [pc, #152]	; (80015ec <xTaskResumeAll+0xd0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f5      	beq.n	8001546 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800155a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001604 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 800155e:	4f24      	ldr	r7, [pc, #144]	; (80015f0 <xTaskResumeAll+0xd4>)
 8001560:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001608 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001564:	f8d9 3000 	ldr.w	r3, [r9]
 8001568:	b9e3      	cbnz	r3, 80015a4 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 800156a:	b10c      	cbz	r4, 8001570 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 800156c:	f7ff fda2 	bl	80010b4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001570:	4d20      	ldr	r5, [pc, #128]	; (80015f4 <xTaskResumeAll+0xd8>)
 8001572:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001574:	b144      	cbz	r4, 8001588 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8001576:	4e20      	ldr	r6, [pc, #128]	; (80015f8 <xTaskResumeAll+0xdc>)
 8001578:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800157a:	f7ff ff3d 	bl	80013f8 <xTaskIncrementTick>
 800157e:	b100      	cbz	r0, 8001582 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8001580:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001582:	3c01      	subs	r4, #1
 8001584:	d1f9      	bne.n	800157a <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8001586:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <xTaskResumeAll+0xdc>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0da      	beq.n	8001546 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <xTaskResumeAll+0xe0>)
 8001592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	f3bf 8f4f 	dsb	sy
 800159c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80015a0:	2401      	movs	r4, #1
 80015a2:	e7d1      	b.n	8001548 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80015a4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80015a8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80015aa:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80015ac:	f104 0018 	add.w	r0, r4, #24
 80015b0:	f7ff fafc 	bl	8000bac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80015b4:	4630      	mov	r0, r6
 80015b6:	f7ff faf9 	bl	8000bac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80015ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80015bc:	6839      	ldr	r1, [r7, #0]
 80015be:	2501      	movs	r5, #1
 80015c0:	fa05 f302 	lsl.w	r3, r5, r2
 80015c4:	2014      	movs	r0, #20
 80015c6:	430b      	orrs	r3, r1
 80015c8:	fb00 8002 	mla	r0, r0, r2, r8
 80015cc:	4631      	mov	r1, r6
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	f7ff fac9 	bl	8000b66 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80015d4:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <xTaskResumeAll+0xe4>)
 80015d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015dc:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80015de:	bf24      	itt	cs
 80015e0:	4b05      	ldrcs	r3, [pc, #20]	; (80015f8 <xTaskResumeAll+0xdc>)
 80015e2:	601d      	strcs	r5, [r3, #0]
 80015e4:	e7be      	b.n	8001564 <xTaskResumeAll+0x48>
 80015e6:	bf00      	nop
 80015e8:	20003cf0 	.word	0x20003cf0
 80015ec:	20003ce4 	.word	0x20003ce4
 80015f0:	20003cf8 	.word	0x20003cf8
 80015f4:	20003cec 	.word	0x20003cec
 80015f8:	20003d74 	.word	0x20003d74
 80015fc:	e000ed04 	.word	0xe000ed04
 8001600:	20003c4c 	.word	0x20003c4c
 8001604:	20003d30 	.word	0x20003d30
 8001608:	20003c58 	.word	0x20003c58

0800160c <vTaskDelay>:
	{
 800160c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800160e:	b940      	cbnz	r0, 8001622 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <vTaskDelay+0x40>)
 8001612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	f3bf 8f4f 	dsb	sy
 800161c:	f3bf 8f6f 	isb	sy
 8001620:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <vTaskDelay+0x44>)
 8001624:	6819      	ldr	r1, [r3, #0]
 8001626:	b141      	cbz	r1, 800163a <vTaskDelay+0x2e>
 8001628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800162c:	f383 8811 	msr	BASEPRI, r3
 8001630:	f3bf 8f6f 	isb	sy
 8001634:	f3bf 8f4f 	dsb	sy
 8001638:	e7fe      	b.n	8001638 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800163a:	f7ff fed5 	bl	80013e8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800163e:	f7ff fd4b 	bl	80010d8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001642:	f7ff ff6b 	bl	800151c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001646:	2800      	cmp	r0, #0
 8001648:	d0e2      	beq.n	8001610 <vTaskDelay+0x4>
 800164a:	bd08      	pop	{r3, pc}
 800164c:	e000ed04 	.word	0xe000ed04
 8001650:	20003cf0 	.word	0x20003cf0

08001654 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001654:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <vTaskSwitchContext+0x60>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <vTaskSwitchContext+0x64>)
{
 800165a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800165c:	b112      	cbz	r2, 8001664 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800165e:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8001664:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <vTaskSwitchContext+0x68>)
 8001668:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800166a:	fab3 f383 	clz	r3, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	f1c3 031f 	rsb	r3, r3, #31
 8001674:	2214      	movs	r2, #20
 8001676:	4912      	ldr	r1, [pc, #72]	; (80016c0 <vTaskSwitchContext+0x6c>)
 8001678:	435a      	muls	r2, r3
 800167a:	1888      	adds	r0, r1, r2
 800167c:	588c      	ldr	r4, [r1, r2]
 800167e:	b944      	cbnz	r4, 8001692 <vTaskSwitchContext+0x3e>
	__asm volatile
 8001680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001684:	f383 8811 	msr	BASEPRI, r3
 8001688:	f3bf 8f6f 	isb	sy
 800168c:	f3bf 8f4f 	dsb	sy
 8001690:	e7fe      	b.n	8001690 <vTaskSwitchContext+0x3c>
 8001692:	6844      	ldr	r4, [r0, #4]
 8001694:	3208      	adds	r2, #8
 8001696:	6864      	ldr	r4, [r4, #4]
 8001698:	6044      	str	r4, [r0, #4]
 800169a:	440a      	add	r2, r1
 800169c:	4294      	cmp	r4, r2
 800169e:	bf04      	itt	eq
 80016a0:	6862      	ldreq	r2, [r4, #4]
 80016a2:	6042      	streq	r2, [r0, #4]
 80016a4:	2214      	movs	r2, #20
 80016a6:	fb02 1303 	mla	r3, r2, r3, r1
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <vTaskSwitchContext+0x70>)
 80016b0:	e7d6      	b.n	8001660 <vTaskSwitchContext+0xc>
 80016b2:	bf00      	nop
 80016b4:	20003cf0 	.word	0x20003cf0
 80016b8:	20003d74 	.word	0x20003d74
 80016bc:	20003cf8 	.word	0x20003cf8
 80016c0:	20003c58 	.word	0x20003c58
 80016c4:	20003c4c 	.word	0x20003c4c

080016c8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <xTaskGetSchedulerState+0x18>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	b133      	cbz	r3, 80016dc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <xTaskGetSchedulerState+0x1c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80016d4:	bf0c      	ite	eq
 80016d6:	2002      	moveq	r0, #2
 80016d8:	2000      	movne	r0, #0
 80016da:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80016dc:	2001      	movs	r0, #1
	}
 80016de:	4770      	bx	lr
 80016e0:	20003d44 	.word	0x20003d44
 80016e4:	20003cf0 	.word	0x20003cf0

080016e8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80016e8:	b508      	push	{r3, lr}

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016ea:	2001      	movs	r0, #1
 80016ec:	f7ff fa1b 	bl	8000b26 <osDelay>
 80016f0:	e7fb      	b.n	80016ea <StartDefaultTask+0x2>
	...

080016f4 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80016f4:	b530      	push	{r4, r5, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80016f6:	4d07      	ldr	r5, [pc, #28]	; (8001714 <MX_FREERTOS_Init+0x20>)
 80016f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 80016fa:	b087      	sub	sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80016fc:	ac01      	add	r4, sp, #4
 80016fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001700:	682b      	ldr	r3, [r5, #0]
 8001702:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001704:	2100      	movs	r1, #0
 8001706:	a801      	add	r0, sp, #4
 8001708:	f7ff f9f5 	bl	8000af6 <osThreadCreate>
 800170c:	4b02      	ldr	r3, [pc, #8]	; (8001718 <MX_FREERTOS_Init+0x24>)
 800170e:	6018      	str	r0, [r3, #0]
}
 8001710:	b007      	add	sp, #28
 8001712:	bd30      	pop	{r4, r5, pc}
 8001714:	08001920 	.word	0x08001920
 8001718:	20003d7c 	.word	0x20003d7c

0800171c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800171c:	b510      	push	{r4, lr}
 800171e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001720:	2230      	movs	r2, #48	; 0x30
 8001722:	2100      	movs	r1, #0
 8001724:	a808      	add	r0, sp, #32
 8001726:	f000 f8e7 	bl	80018f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800172a:	2100      	movs	r1, #0
 800172c:	2214      	movs	r2, #20
 800172e:	a803      	add	r0, sp, #12
 8001730:	f000 f8e2 	bl	80018f8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001734:	2400      	movs	r4, #0
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <SystemClock_Config+0x78>)
 8001738:	9401      	str	r4, [sp, #4]
 800173a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800173c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001740:	641a      	str	r2, [r3, #64]	; 0x40
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001744:	4a14      	ldr	r2, [pc, #80]	; (8001798 <SystemClock_Config+0x7c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	9301      	str	r3, [sp, #4]
 800174c:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800174e:	9402      	str	r4, [sp, #8]
 8001750:	6813      	ldr	r3, [r2, #0]
 8001752:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	6813      	ldr	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800175e:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001760:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001764:	9302      	str	r3, [sp, #8]
 8001766:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001768:	2302      	movs	r3, #2
 800176a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800176c:	2301      	movs	r3, #1
 800176e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001770:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001772:	2310      	movs	r3, #16
 8001774:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001776:	f7fe ff6f 	bl	8000658 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800177c:	4621      	mov	r1, r4
 800177e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001780:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001782:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001784:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001786:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001788:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800178a:	f7ff f915 	bl	80009b8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800178e:	b014      	add	sp, #80	; 0x50
 8001790:	bd10      	pop	{r4, pc}
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	40007000 	.word	0x40007000

0800179c <main>:
{
 800179c:	b508      	push	{r3, lr}
  HAL_Init();
 800179e:	f7fe fed3 	bl	8000548 <HAL_Init>
  SystemClock_Config();
 80017a2:	f7ff ffbb 	bl	800171c <SystemClock_Config>
  MX_FREERTOS_Init();
 80017a6:	f7ff ffa5 	bl	80016f4 <MX_FREERTOS_Init>
  osKernelStart();
 80017aa:	f7ff f99f 	bl	8000aec <osKernelStart>
 80017ae:	e7fe      	b.n	80017ae <main+0x12>

080017b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <HAL_MspInit+0x40>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	9200      	str	r2, [sp, #0]
 80017b8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80017ba:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80017be:	6459      	str	r1, [r3, #68]	; 0x44
 80017c0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80017c2:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80017c6:	9100      	str	r1, [sp, #0]
 80017c8:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	9201      	str	r2, [sp, #4]
 80017cc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80017ce:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80017d2:	6419      	str	r1, [r3, #64]	; 0x40
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017dc:	210f      	movs	r1, #15
 80017de:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017e4:	f7fe feee 	bl	80005c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e8:	b003      	add	sp, #12
 80017ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800

080017f4 <NMI_Handler>:
 80017f4:	4770      	bx	lr

080017f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f6:	e7fe      	b.n	80017f6 <HardFault_Handler>

080017f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f8:	e7fe      	b.n	80017f8 <MemManage_Handler>

080017fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fa:	e7fe      	b.n	80017fa <BusFault_Handler>

080017fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017fc:	e7fe      	b.n	80017fc <UsageFault_Handler>

080017fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fe:	4770      	bx	lr

08001800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001800:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001802:	f7fe febb 	bl	800057c <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001806:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 800180a:	f7ff b994 	b.w	8000b36 <osSystickHandler>
	...

08001810 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001810:	490f      	ldr	r1, [pc, #60]	; (8001850 <SystemInit+0x40>)
 8001812:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001816:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800181a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800181e:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <SystemInit+0x44>)
 8001820:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001822:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001824:	f042 0201 	orr.w	r2, r2, #1
 8001828:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800182a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001832:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001836:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001838:	4a07      	ldr	r2, [pc, #28]	; (8001858 <SystemInit+0x48>)
 800183a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001842:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001844:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001846:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800184a:	608b      	str	r3, [r1, #8]
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000ed00 	.word	0xe000ed00
 8001854:	40023800 	.word	0x40023800
 8001858:	24003010 	.word	0x24003010

0800185c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800185c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001894 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001860:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001862:	e003      	b.n	800186c <LoopCopyDataInit>

08001864 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001866:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001868:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800186a:	3104      	adds	r1, #4

0800186c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800186c:	480b      	ldr	r0, [pc, #44]	; (800189c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001870:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001872:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001874:	d3f6      	bcc.n	8001864 <CopyDataInit>
  ldr  r2, =_sbss
 8001876:	4a0b      	ldr	r2, [pc, #44]	; (80018a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001878:	e002      	b.n	8001880 <LoopFillZerobss>

0800187a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800187a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800187c:	f842 3b04 	str.w	r3, [r2], #4

08001880 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001882:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001884:	d3f9      	bcc.n	800187a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001886:	f7ff ffc3 	bl	8001810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800188a:	f000 f811 	bl	80018b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800188e:	f7ff ff85 	bl	800179c <main>
  bx  lr    
 8001892:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001894:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001898:	08001968 	.word	0x08001968
  ldr  r0, =_sdata
 800189c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018a0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80018a4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80018a8:	20003d80 	.word	0x20003d80

080018ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018ac:	e7fe      	b.n	80018ac <ADC_IRQHandler>
	...

080018b0 <__libc_init_array>:
 80018b0:	b570      	push	{r4, r5, r6, lr}
 80018b2:	4e0d      	ldr	r6, [pc, #52]	; (80018e8 <__libc_init_array+0x38>)
 80018b4:	4c0d      	ldr	r4, [pc, #52]	; (80018ec <__libc_init_array+0x3c>)
 80018b6:	1ba4      	subs	r4, r4, r6
 80018b8:	10a4      	asrs	r4, r4, #2
 80018ba:	2500      	movs	r5, #0
 80018bc:	42a5      	cmp	r5, r4
 80018be:	d109      	bne.n	80018d4 <__libc_init_array+0x24>
 80018c0:	4e0b      	ldr	r6, [pc, #44]	; (80018f0 <__libc_init_array+0x40>)
 80018c2:	4c0c      	ldr	r4, [pc, #48]	; (80018f4 <__libc_init_array+0x44>)
 80018c4:	f000 f820 	bl	8001908 <_init>
 80018c8:	1ba4      	subs	r4, r4, r6
 80018ca:	10a4      	asrs	r4, r4, #2
 80018cc:	2500      	movs	r5, #0
 80018ce:	42a5      	cmp	r5, r4
 80018d0:	d105      	bne.n	80018de <__libc_init_array+0x2e>
 80018d2:	bd70      	pop	{r4, r5, r6, pc}
 80018d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018d8:	4798      	blx	r3
 80018da:	3501      	adds	r5, #1
 80018dc:	e7ee      	b.n	80018bc <__libc_init_array+0xc>
 80018de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018e2:	4798      	blx	r3
 80018e4:	3501      	adds	r5, #1
 80018e6:	e7f2      	b.n	80018ce <__libc_init_array+0x1e>
 80018e8:	08001960 	.word	0x08001960
 80018ec:	08001960 	.word	0x08001960
 80018f0:	08001960 	.word	0x08001960
 80018f4:	08001964 	.word	0x08001964

080018f8 <memset>:
 80018f8:	4402      	add	r2, r0
 80018fa:	4603      	mov	r3, r0
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d100      	bne.n	8001902 <memset+0xa>
 8001900:	4770      	bx	lr
 8001902:	f803 1b01 	strb.w	r1, [r3], #1
 8001906:	e7f9      	b.n	80018fc <memset+0x4>

08001908 <_init>:
 8001908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800190a:	bf00      	nop
 800190c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800190e:	bc08      	pop	{r3}
 8001910:	469e      	mov	lr, r3
 8001912:	4770      	bx	lr

08001914 <_fini>:
 8001914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001916:	bf00      	nop
 8001918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800191a:	bc08      	pop	{r3}
 800191c:	469e      	mov	lr, r3
 800191e:	4770      	bx	lr
