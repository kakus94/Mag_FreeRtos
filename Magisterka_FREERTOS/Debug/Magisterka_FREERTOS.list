
Magisterka_FREERTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e14  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b60  08002fc4  08002fc4  00012fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003b24  08003b24  00013b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003b2c  08003b2c  00013b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003b30  08003b30  00013b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08003b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          00004218  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004288  20004288  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001b477  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003d27  00000000  00000000  0003b517  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00009813  00000000  00000000  0003f23e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f28  00000000  00000000  00048a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001230  00000000  00000000  00049980  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00007d2a  00000000  00000000  0004abb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005a8f  00000000  00000000  000528da  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00058369  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000314c  00000000  00000000  000583e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002fac 	.word	0x08002fac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08002fac 	.word	0x08002fac

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b97a 	b.w	80004fc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	468c      	mov	ip, r1
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	9e08      	ldr	r6, [sp, #32]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d151      	bne.n	80002d4 <__udivmoddi4+0xb4>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d96d      	bls.n	8000312 <__udivmoddi4+0xf2>
 8000236:	fab2 fe82 	clz	lr, r2
 800023a:	f1be 0f00 	cmp.w	lr, #0
 800023e:	d00b      	beq.n	8000258 <__udivmoddi4+0x38>
 8000240:	f1ce 0c20 	rsb	ip, lr, #32
 8000244:	fa01 f50e 	lsl.w	r5, r1, lr
 8000248:	fa20 fc0c 	lsr.w	ip, r0, ip
 800024c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000250:	ea4c 0c05 	orr.w	ip, ip, r5
 8000254:	fa00 f40e 	lsl.w	r4, r0, lr
 8000258:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800025c:	0c25      	lsrs	r5, r4, #16
 800025e:	fbbc f8fa 	udiv	r8, ip, sl
 8000262:	fa1f f987 	uxth.w	r9, r7
 8000266:	fb0a cc18 	mls	ip, sl, r8, ip
 800026a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026e:	fb08 f309 	mul.w	r3, r8, r9
 8000272:	42ab      	cmp	r3, r5
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x6c>
 8000276:	19ed      	adds	r5, r5, r7
 8000278:	f108 32ff 	add.w	r2, r8, #4294967295
 800027c:	f080 8123 	bcs.w	80004c6 <__udivmoddi4+0x2a6>
 8000280:	42ab      	cmp	r3, r5
 8000282:	f240 8120 	bls.w	80004c6 <__udivmoddi4+0x2a6>
 8000286:	f1a8 0802 	sub.w	r8, r8, #2
 800028a:	443d      	add	r5, r7
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb5 f0fa 	udiv	r0, r5, sl
 8000294:	fb0a 5510 	mls	r5, sl, r0, r5
 8000298:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800029c:	fb00 f909 	mul.w	r9, r0, r9
 80002a0:	45a1      	cmp	r9, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x98>
 80002a4:	19e4      	adds	r4, r4, r7
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 810a 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80002ae:	45a1      	cmp	r9, r4
 80002b0:	f240 8107 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	eba4 0409 	sub.w	r4, r4, r9
 80002bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c0:	2100      	movs	r1, #0
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d061      	beq.n	800038a <__udivmoddi4+0x16a>
 80002c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ca:	2300      	movs	r3, #0
 80002cc:	6034      	str	r4, [r6, #0]
 80002ce:	6073      	str	r3, [r6, #4]
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xc8>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d054      	beq.n	8000386 <__udivmoddi4+0x166>
 80002dc:	2100      	movs	r1, #0
 80002de:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	f040 808e 	bne.w	800040e <__udivmoddi4+0x1ee>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xdc>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2d0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	46ac      	mov	ip, r5
 8000306:	2e00      	cmp	r6, #0
 8000308:	d03f      	beq.n	800038a <__udivmoddi4+0x16a>
 800030a:	e886 1010 	stmia.w	r6, {r4, ip}
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	b912      	cbnz	r2, 800031a <__udivmoddi4+0xfa>
 8000314:	2701      	movs	r7, #1
 8000316:	fbb7 f7f2 	udiv	r7, r7, r2
 800031a:	fab7 fe87 	clz	lr, r7
 800031e:	f1be 0f00 	cmp.w	lr, #0
 8000322:	d134      	bne.n	800038e <__udivmoddi4+0x16e>
 8000324:	1beb      	subs	r3, r5, r7
 8000326:	0c3a      	lsrs	r2, r7, #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000332:	0c25      	lsrs	r5, r4, #16
 8000334:	fb02 3318 	mls	r3, r2, r8, r3
 8000338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800033c:	fb0c f308 	mul.w	r3, ip, r8
 8000340:	42ab      	cmp	r3, r5
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x134>
 8000344:	19ed      	adds	r5, r5, r7
 8000346:	f108 30ff 	add.w	r0, r8, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x132>
 800034c:	42ab      	cmp	r3, r5
 800034e:	f200 80d1 	bhi.w	80004f4 <__udivmoddi4+0x2d4>
 8000352:	4680      	mov	r8, r0
 8000354:	1aed      	subs	r5, r5, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb5 f0f2 	udiv	r0, r5, r2
 800035c:	fb02 5510 	mls	r5, r2, r0, r5
 8000360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000364:	fb0c fc00 	mul.w	ip, ip, r0
 8000368:	45a4      	cmp	ip, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x15c>
 800036c:	19e4      	adds	r4, r4, r7
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x15a>
 8000374:	45a4      	cmp	ip, r4
 8000376:	f200 80b8 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 040c 	sub.w	r4, r4, ip
 8000380:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000384:	e79d      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000386:	4631      	mov	r1, r6
 8000388:	4630      	mov	r0, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	f1ce 0420 	rsb	r4, lr, #32
 8000392:	fa05 f30e 	lsl.w	r3, r5, lr
 8000396:	fa07 f70e 	lsl.w	r7, r7, lr
 800039a:	fa20 f804 	lsr.w	r8, r0, r4
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa25 f404 	lsr.w	r4, r5, r4
 80003a4:	ea48 0803 	orr.w	r8, r8, r3
 80003a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b0:	fb02 4411 	mls	r4, r2, r1, r4
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003bc:	fb01 f30c 	mul.w	r3, r1, ip
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x1bc>
 80003c8:	19ed      	adds	r5, r5, r7
 80003ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ce:	f080 808a 	bcs.w	80004e6 <__udivmoddi4+0x2c6>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	f240 8087 	bls.w	80004e6 <__udivmoddi4+0x2c6>
 80003d8:	3902      	subs	r1, #2
 80003da:	443d      	add	r5, r7
 80003dc:	1aeb      	subs	r3, r5, r3
 80003de:	fa1f f588 	uxth.w	r5, r8
 80003e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ee:	fb00 f30c 	mul.w	r3, r0, ip
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1e6>
 80003f6:	19ed      	adds	r5, r5, r7
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fc:	d26f      	bcs.n	80004de <__udivmoddi4+0x2be>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d96d      	bls.n	80004de <__udivmoddi4+0x2be>
 8000402:	3802      	subs	r0, #2
 8000404:	443d      	add	r5, r7
 8000406:	1aeb      	subs	r3, r5, r3
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	e78f      	b.n	800032e <__udivmoddi4+0x10e>
 800040e:	f1c1 0720 	rsb	r7, r1, #32
 8000412:	fa22 f807 	lsr.w	r8, r2, r7
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 f401 	lsl.w	r4, r5, r1
 800041c:	ea48 0303 	orr.w	r3, r8, r3
 8000420:	fa20 fe07 	lsr.w	lr, r0, r7
 8000424:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4e 0e04 	orr.w	lr, lr, r4
 800042e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000432:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000436:	fb0c 5519 	mls	r5, ip, r9, r5
 800043a:	fa1f f883 	uxth.w	r8, r3
 800043e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000442:	fb09 f408 	mul.w	r4, r9, r8
 8000446:	42ac      	cmp	r4, r5
 8000448:	fa02 f201 	lsl.w	r2, r2, r1
 800044c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x244>
 8000452:	18ed      	adds	r5, r5, r3
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d243      	bcs.n	80004e2 <__udivmoddi4+0x2c2>
 800045a:	42ac      	cmp	r4, r5
 800045c:	d941      	bls.n	80004e2 <__udivmoddi4+0x2c2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	441d      	add	r5, r3
 8000464:	1b2d      	subs	r5, r5, r4
 8000466:	fa1f fe8e 	uxth.w	lr, lr
 800046a:	fbb5 f0fc 	udiv	r0, r5, ip
 800046e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000472:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45a0      	cmp	r8, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x26e>
 800047e:	18e4      	adds	r4, r4, r3
 8000480:	f100 35ff 	add.w	r5, r0, #4294967295
 8000484:	d229      	bcs.n	80004da <__udivmoddi4+0x2ba>
 8000486:	45a0      	cmp	r8, r4
 8000488:	d927      	bls.n	80004da <__udivmoddi4+0x2ba>
 800048a:	3802      	subs	r0, #2
 800048c:	441c      	add	r4, r3
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba4 0408 	sub.w	r4, r4, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454c      	cmp	r4, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	464d      	mov	r5, r9
 80004a0:	d315      	bcc.n	80004ce <__udivmoddi4+0x2ae>
 80004a2:	d012      	beq.n	80004ca <__udivmoddi4+0x2aa>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x29c>
 80004a6:	ebba 030e 	subs.w	r3, sl, lr
 80004aa:	eb64 0405 	sbc.w	r4, r4, r5
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431f      	orrs	r7, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	6037      	str	r7, [r6, #0]
 80004ba:	6074      	str	r4, [r6, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	4618      	mov	r0, r3
 80004c4:	e6f8      	b.n	80002b8 <__udivmoddi4+0x98>
 80004c6:	4690      	mov	r8, r2
 80004c8:	e6e0      	b.n	800028c <__udivmoddi4+0x6c>
 80004ca:	45c2      	cmp	sl, r8
 80004cc:	d2ea      	bcs.n	80004a4 <__udivmoddi4+0x284>
 80004ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d2:	eb69 0503 	sbc.w	r5, r9, r3
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7e4      	b.n	80004a4 <__udivmoddi4+0x284>
 80004da:	4628      	mov	r0, r5
 80004dc:	e7d7      	b.n	800048e <__udivmoddi4+0x26e>
 80004de:	4640      	mov	r0, r8
 80004e0:	e791      	b.n	8000406 <__udivmoddi4+0x1e6>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e7be      	b.n	8000464 <__udivmoddi4+0x244>
 80004e6:	4601      	mov	r1, r0
 80004e8:	e778      	b.n	80003dc <__udivmoddi4+0x1bc>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	e745      	b.n	800037c <__udivmoddi4+0x15c>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xe6>
 80004f4:	f1a8 0802 	sub.w	r8, r8, #2
 80004f8:	443d      	add	r5, r7
 80004fa:	e72b      	b.n	8000354 <__udivmoddi4+0x134>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_Init+0x30>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800050a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000512:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800051a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f82f 	bl	8000580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	2000      	movs	r0, #0
 8000524:	f001 ffba 	bl	800249c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000528:	f001 ff96 	bl	8002458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800052c:	2000      	movs	r0, #0
 800052e:	bd08      	pop	{r3, pc}
 8000530:	40023c00 	.word	0x40023c00

08000534 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000534:	4a03      	ldr	r2, [pc, #12]	; (8000544 <HAL_IncTick+0x10>)
 8000536:	4b04      	ldr	r3, [pc, #16]	; (8000548 <HAL_IncTick+0x14>)
 8000538:	6811      	ldr	r1, [r2, #0]
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	440b      	add	r3, r1
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	200041e4 	.word	0x200041e4
 8000548:	20000000 	.word	0x20000000

0800054c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800054c:	4b01      	ldr	r3, [pc, #4]	; (8000554 <HAL_GetTick+0x8>)
 800054e:	6818      	ldr	r0, [r3, #0]
}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	200041e4 	.word	0x200041e4

08000558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000558:	b538      	push	{r3, r4, r5, lr}
 800055a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800055c:	f7ff fff6 	bl	800054c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000560:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000562:	bf1c      	itt	ne
 8000564:	4b05      	ldrne	r3, [pc, #20]	; (800057c <HAL_Delay+0x24>)
 8000566:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000568:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800056a:	bf18      	it	ne
 800056c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800056e:	f7ff ffed 	bl	800054c <HAL_GetTick>
 8000572:	1b40      	subs	r0, r0, r5
 8000574:	4284      	cmp	r4, r0
 8000576:	d8fa      	bhi.n	800056e <HAL_Delay+0x16>
  {
  }
}
 8000578:	bd38      	pop	{r3, r4, r5, pc}
 800057a:	bf00      	nop
 800057c:	20000000 	.word	0x20000000

08000580 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000580:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000582:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000584:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000588:	041b      	lsls	r3, r3, #16
 800058a:	0c1b      	lsrs	r3, r3, #16
 800058c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000590:	0200      	lsls	r0, r0, #8
 8000592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000596:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800059a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800059c:	60d3      	str	r3, [r2, #12]
 800059e:	4770      	bx	lr
 80005a0:	e000ed00 	.word	0xe000ed00

080005a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005a6:	b530      	push	{r4, r5, lr}
 80005a8:	68dc      	ldr	r4, [r3, #12]
 80005aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ae:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b4:	2b04      	cmp	r3, #4
 80005b6:	bf28      	it	cs
 80005b8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ba:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005bc:	f04f 0501 	mov.w	r5, #1
 80005c0:	fa05 f303 	lsl.w	r3, r5, r3
 80005c4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c8:	bf8c      	ite	hi
 80005ca:	3c03      	subhi	r4, #3
 80005cc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ce:	4019      	ands	r1, r3
 80005d0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005d2:	fa05 f404 	lsl.w	r4, r5, r4
 80005d6:	3c01      	subs	r4, #1
 80005d8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005da:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	ea42 0201 	orr.w	r2, r2, r1
 80005e0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e4:	bfad      	iteet	ge
 80005e6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	f000 000f 	andlt.w	r0, r0, #15
 80005ee:	4b06      	ldrlt	r3, [pc, #24]	; (8000608 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f4:	bfb5      	itete	lt
 80005f6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop
 8000604:	e000ed00 	.word	0xe000ed00
 8000608:	e000ed14 	.word	0xe000ed14

0800060c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800060c:	2800      	cmp	r0, #0
 800060e:	db08      	blt.n	8000622 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000610:	0942      	lsrs	r2, r0, #5
 8000612:	2301      	movs	r3, #1
 8000614:	f000 001f 	and.w	r0, r0, #31
 8000618:	fa03 f000 	lsl.w	r0, r3, r0
 800061c:	4b01      	ldr	r3, [pc, #4]	; (8000624 <HAL_NVIC_EnableIRQ+0x18>)
 800061e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000622:	4770      	bx	lr
 8000624:	e000e100 	.word	0xe000e100

08000628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800062c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800062e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000630:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80007f8 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000634:	4a6e      	ldr	r2, [pc, #440]	; (80007f0 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000636:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80007fc <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800063a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800063c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800063e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000642:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000644:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000648:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 800064c:	45b6      	cmp	lr, r6
 800064e:	f040 80b6 	bne.w	80007be <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000652:	684c      	ldr	r4, [r1, #4]
 8000654:	f024 0710 	bic.w	r7, r4, #16
 8000658:	2f02      	cmp	r7, #2
 800065a:	d116      	bne.n	800068a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 800065c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000660:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000664:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000668:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800066c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000670:	f04f 0c0f 	mov.w	ip, #15
 8000674:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000678:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800067c:	690d      	ldr	r5, [r1, #16]
 800067e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000682:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000686:	f8ca 5020 	str.w	r5, [sl, #32]
 800068a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800068e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000690:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000694:	fa05 f50a 	lsl.w	r5, r5, sl
 8000698:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800069a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800069e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006a2:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006a6:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006a8:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ac:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80006ae:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006b2:	d811      	bhi.n	80006d8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80006b4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006b6:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006ba:	68cf      	ldr	r7, [r1, #12]
 80006bc:	fa07 fc0a 	lsl.w	ip, r7, sl
 80006c0:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80006c4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006c6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006c8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006cc:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80006d0:	409f      	lsls	r7, r3
 80006d2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80006d6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80006d8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006da:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006dc:	688f      	ldr	r7, [r1, #8]
 80006de:	fa07 f70a 	lsl.w	r7, r7, sl
 80006e2:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80006e4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006e6:	00e5      	lsls	r5, r4, #3
 80006e8:	d569      	bpl.n	80007be <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ea:	f04f 0b00 	mov.w	fp, #0
 80006ee:	f8cd b00c 	str.w	fp, [sp, #12]
 80006f2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006f6:	4d3f      	ldr	r5, [pc, #252]	; (80007f4 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f8:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80006fc:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000700:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000704:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000708:	9703      	str	r7, [sp, #12]
 800070a:	9f03      	ldr	r7, [sp, #12]
 800070c:	f023 0703 	bic.w	r7, r3, #3
 8000710:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000714:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000718:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800071c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000720:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000724:	f04f 0e0f 	mov.w	lr, #15
 8000728:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800072c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800072e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000732:	d04b      	beq.n	80007cc <HAL_GPIO_Init+0x1a4>
 8000734:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000738:	42a8      	cmp	r0, r5
 800073a:	d049      	beq.n	80007d0 <HAL_GPIO_Init+0x1a8>
 800073c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000740:	42a8      	cmp	r0, r5
 8000742:	d047      	beq.n	80007d4 <HAL_GPIO_Init+0x1ac>
 8000744:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000748:	42a8      	cmp	r0, r5
 800074a:	d045      	beq.n	80007d8 <HAL_GPIO_Init+0x1b0>
 800074c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000750:	42a8      	cmp	r0, r5
 8000752:	d043      	beq.n	80007dc <HAL_GPIO_Init+0x1b4>
 8000754:	4548      	cmp	r0, r9
 8000756:	d043      	beq.n	80007e0 <HAL_GPIO_Init+0x1b8>
 8000758:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800075c:	42a8      	cmp	r0, r5
 800075e:	d041      	beq.n	80007e4 <HAL_GPIO_Init+0x1bc>
 8000760:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000764:	42a8      	cmp	r0, r5
 8000766:	d03f      	beq.n	80007e8 <HAL_GPIO_Init+0x1c0>
 8000768:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800076c:	42a8      	cmp	r0, r5
 800076e:	d03d      	beq.n	80007ec <HAL_GPIO_Init+0x1c4>
 8000770:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000774:	42a8      	cmp	r0, r5
 8000776:	bf14      	ite	ne
 8000778:	250a      	movne	r5, #10
 800077a:	2509      	moveq	r5, #9
 800077c:	fa05 f50c 	lsl.w	r5, r5, ip
 8000780:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000784:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000786:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000788:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800078a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800078e:	bf0c      	ite	eq
 8000790:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000792:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000794:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000796:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000798:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800079c:	bf0c      	ite	eq
 800079e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007a0:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80007a2:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007a4:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007a6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007aa:	bf0c      	ite	eq
 80007ac:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007ae:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80007b0:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80007b2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007b4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007b6:	bf54      	ite	pl
 80007b8:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80007ba:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80007bc:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007be:	3301      	adds	r3, #1
 80007c0:	2b10      	cmp	r3, #16
 80007c2:	f47f af3c 	bne.w	800063e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007c6:	b005      	add	sp, #20
 80007c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007cc:	465d      	mov	r5, fp
 80007ce:	e7d5      	b.n	800077c <HAL_GPIO_Init+0x154>
 80007d0:	2501      	movs	r5, #1
 80007d2:	e7d3      	b.n	800077c <HAL_GPIO_Init+0x154>
 80007d4:	2502      	movs	r5, #2
 80007d6:	e7d1      	b.n	800077c <HAL_GPIO_Init+0x154>
 80007d8:	2503      	movs	r5, #3
 80007da:	e7cf      	b.n	800077c <HAL_GPIO_Init+0x154>
 80007dc:	2504      	movs	r5, #4
 80007de:	e7cd      	b.n	800077c <HAL_GPIO_Init+0x154>
 80007e0:	2505      	movs	r5, #5
 80007e2:	e7cb      	b.n	800077c <HAL_GPIO_Init+0x154>
 80007e4:	2506      	movs	r5, #6
 80007e6:	e7c9      	b.n	800077c <HAL_GPIO_Init+0x154>
 80007e8:	2507      	movs	r5, #7
 80007ea:	e7c7      	b.n	800077c <HAL_GPIO_Init+0x154>
 80007ec:	2508      	movs	r5, #8
 80007ee:	e7c5      	b.n	800077c <HAL_GPIO_Init+0x154>
 80007f0:	40013c00 	.word	0x40013c00
 80007f4:	40020000 	.word	0x40020000
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40021400 	.word	0x40021400

08000800 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000800:	b10a      	cbz	r2, 8000806 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000802:	6181      	str	r1, [r0, #24]
 8000804:	4770      	bx	lr
 8000806:	0409      	lsls	r1, r1, #16
 8000808:	e7fb      	b.n	8000802 <HAL_GPIO_WritePin+0x2>
	...

0800080c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800080c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	9301      	str	r3, [sp, #4]
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000814:	4c18      	ldr	r4, [pc, #96]	; (8000878 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000818:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800081c:	641a      	str	r2, [r3, #64]	; 0x40
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000824:	9301      	str	r3, [sp, #4]
 8000826:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <HAL_PWREx_EnableOverDrive+0x70>)
 800082a:	2201      	movs	r2, #1
 800082c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800082e:	f7ff fe8d 	bl	800054c <HAL_GetTick>
 8000832:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000834:	6863      	ldr	r3, [r4, #4]
 8000836:	03da      	lsls	r2, r3, #15
 8000838:	d50b      	bpl.n	8000852 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800083c:	4c0e      	ldr	r4, [pc, #56]	; (8000878 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000842:	f7ff fe83 	bl	800054c <HAL_GetTick>
 8000846:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000848:	6863      	ldr	r3, [r4, #4]
 800084a:	039b      	lsls	r3, r3, #14
 800084c:	d50a      	bpl.n	8000864 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800084e:	2000      	movs	r0, #0
 8000850:	e006      	b.n	8000860 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000852:	f7ff fe7b 	bl	800054c <HAL_GetTick>
 8000856:	1b40      	subs	r0, r0, r5
 8000858:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800085c:	d9ea      	bls.n	8000834 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 800085e:	2003      	movs	r0, #3
}
 8000860:	b003      	add	sp, #12
 8000862:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000864:	f7ff fe72 	bl	800054c <HAL_GetTick>
 8000868:	1b40      	subs	r0, r0, r5
 800086a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800086e:	d9eb      	bls.n	8000848 <HAL_PWREx_EnableOverDrive+0x3c>
 8000870:	e7f5      	b.n	800085e <HAL_PWREx_EnableOverDrive+0x52>
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800
 8000878:	40007000 	.word	0x40007000
 800087c:	420e0040 	.word	0x420e0040
 8000880:	420e0044 	.word	0x420e0044

08000884 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000884:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000888:	4604      	mov	r4, r0
 800088a:	b918      	cbnz	r0, 8000894 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800088c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800088e:	b002      	add	sp, #8
 8000890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000894:	6803      	ldr	r3, [r0, #0]
 8000896:	07dd      	lsls	r5, r3, #31
 8000898:	d410      	bmi.n	80008bc <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800089a:	6823      	ldr	r3, [r4, #0]
 800089c:	0798      	lsls	r0, r3, #30
 800089e:	d458      	bmi.n	8000952 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008a0:	6823      	ldr	r3, [r4, #0]
 80008a2:	071a      	lsls	r2, r3, #28
 80008a4:	f100 809a 	bmi.w	80009dc <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008a8:	6823      	ldr	r3, [r4, #0]
 80008aa:	075b      	lsls	r3, r3, #29
 80008ac:	f100 80b8 	bmi.w	8000a20 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008b0:	69a2      	ldr	r2, [r4, #24]
 80008b2:	2a00      	cmp	r2, #0
 80008b4:	f040 8119 	bne.w	8000aea <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80008b8:	2000      	movs	r0, #0
 80008ba:	e7e8      	b.n	800088e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008bc:	4ba6      	ldr	r3, [pc, #664]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 80008be:	689a      	ldr	r2, [r3, #8]
 80008c0:	f002 020c 	and.w	r2, r2, #12
 80008c4:	2a04      	cmp	r2, #4
 80008c6:	d007      	beq.n	80008d8 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008c8:	689a      	ldr	r2, [r3, #8]
 80008ca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008ce:	2a08      	cmp	r2, #8
 80008d0:	d10a      	bne.n	80008e8 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	0259      	lsls	r1, r3, #9
 80008d6:	d507      	bpl.n	80008e8 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008d8:	4b9f      	ldr	r3, [pc, #636]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	039a      	lsls	r2, r3, #14
 80008de:	d5dc      	bpl.n	800089a <HAL_RCC_OscConfig+0x16>
 80008e0:	6863      	ldr	r3, [r4, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d1d9      	bne.n	800089a <HAL_RCC_OscConfig+0x16>
 80008e6:	e7d1      	b.n	800088c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e8:	6863      	ldr	r3, [r4, #4]
 80008ea:	4d9b      	ldr	r5, [pc, #620]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 80008ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008f0:	d111      	bne.n	8000916 <HAL_RCC_OscConfig+0x92>
 80008f2:	682b      	ldr	r3, [r5, #0]
 80008f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008fa:	f7ff fe27 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008fe:	4d96      	ldr	r5, [pc, #600]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000900:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000902:	682b      	ldr	r3, [r5, #0]
 8000904:	039b      	lsls	r3, r3, #14
 8000906:	d4c8      	bmi.n	800089a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000908:	f7ff fe20 	bl	800054c <HAL_GetTick>
 800090c:	1b80      	subs	r0, r0, r6
 800090e:	2864      	cmp	r0, #100	; 0x64
 8000910:	d9f7      	bls.n	8000902 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000912:	2003      	movs	r0, #3
 8000914:	e7bb      	b.n	800088e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000916:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800091a:	d104      	bne.n	8000926 <HAL_RCC_OscConfig+0xa2>
 800091c:	682b      	ldr	r3, [r5, #0]
 800091e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000922:	602b      	str	r3, [r5, #0]
 8000924:	e7e5      	b.n	80008f2 <HAL_RCC_OscConfig+0x6e>
 8000926:	682a      	ldr	r2, [r5, #0]
 8000928:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800092c:	602a      	str	r2, [r5, #0]
 800092e:	682a      	ldr	r2, [r5, #0]
 8000930:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000934:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1df      	bne.n	80008fa <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800093a:	f7ff fe07 	bl	800054c <HAL_GetTick>
 800093e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000940:	682b      	ldr	r3, [r5, #0]
 8000942:	039f      	lsls	r7, r3, #14
 8000944:	d5a9      	bpl.n	800089a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000946:	f7ff fe01 	bl	800054c <HAL_GetTick>
 800094a:	1b80      	subs	r0, r0, r6
 800094c:	2864      	cmp	r0, #100	; 0x64
 800094e:	d9f7      	bls.n	8000940 <HAL_RCC_OscConfig+0xbc>
 8000950:	e7df      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000952:	4b81      	ldr	r3, [pc, #516]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 8000954:	689a      	ldr	r2, [r3, #8]
 8000956:	f012 0f0c 	tst.w	r2, #12
 800095a:	d007      	beq.n	800096c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800095c:	689a      	ldr	r2, [r3, #8]
 800095e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000962:	2a08      	cmp	r2, #8
 8000964:	d111      	bne.n	800098a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	025e      	lsls	r6, r3, #9
 800096a:	d40e      	bmi.n	800098a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800096c:	4b7a      	ldr	r3, [pc, #488]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	0795      	lsls	r5, r2, #30
 8000972:	d502      	bpl.n	800097a <HAL_RCC_OscConfig+0xf6>
 8000974:	68e2      	ldr	r2, [r4, #12]
 8000976:	2a01      	cmp	r2, #1
 8000978:	d188      	bne.n	800088c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	6921      	ldr	r1, [r4, #16]
 800097e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000982:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000986:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000988:	e78a      	b.n	80008a0 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800098a:	68e2      	ldr	r2, [r4, #12]
 800098c:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_RCC_OscConfig+0x2d8>)
 800098e:	b1b2      	cbz	r2, 80009be <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000990:	2201      	movs	r2, #1
 8000992:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000994:	f7ff fdda 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000998:	4d6f      	ldr	r5, [pc, #444]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800099a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800099c:	682b      	ldr	r3, [r5, #0]
 800099e:	0798      	lsls	r0, r3, #30
 80009a0:	d507      	bpl.n	80009b2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009a2:	682b      	ldr	r3, [r5, #0]
 80009a4:	6922      	ldr	r2, [r4, #16]
 80009a6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009aa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009ae:	602b      	str	r3, [r5, #0]
 80009b0:	e776      	b.n	80008a0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009b2:	f7ff fdcb 	bl	800054c <HAL_GetTick>
 80009b6:	1b80      	subs	r0, r0, r6
 80009b8:	2802      	cmp	r0, #2
 80009ba:	d9ef      	bls.n	800099c <HAL_RCC_OscConfig+0x118>
 80009bc:	e7a9      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80009be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009c0:	f7ff fdc4 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009c4:	4d64      	ldr	r5, [pc, #400]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80009c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009c8:	682b      	ldr	r3, [r5, #0]
 80009ca:	0799      	lsls	r1, r3, #30
 80009cc:	f57f af68 	bpl.w	80008a0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009d0:	f7ff fdbc 	bl	800054c <HAL_GetTick>
 80009d4:	1b80      	subs	r0, r0, r6
 80009d6:	2802      	cmp	r0, #2
 80009d8:	d9f6      	bls.n	80009c8 <HAL_RCC_OscConfig+0x144>
 80009da:	e79a      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009dc:	6962      	ldr	r2, [r4, #20]
 80009de:	4b60      	ldr	r3, [pc, #384]	; (8000b60 <HAL_RCC_OscConfig+0x2dc>)
 80009e0:	b17a      	cbz	r2, 8000a02 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80009e2:	2201      	movs	r2, #1
 80009e4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009e6:	f7ff fdb1 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ea:	4d5b      	ldr	r5, [pc, #364]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009ec:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009f0:	079f      	lsls	r7, r3, #30
 80009f2:	f53f af59 	bmi.w	80008a8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009f6:	f7ff fda9 	bl	800054c <HAL_GetTick>
 80009fa:	1b80      	subs	r0, r0, r6
 80009fc:	2802      	cmp	r0, #2
 80009fe:	d9f6      	bls.n	80009ee <HAL_RCC_OscConfig+0x16a>
 8000a00:	e787      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000a02:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a04:	f7ff fda2 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a08:	4d53      	ldr	r5, [pc, #332]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a0a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a0c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a0e:	0798      	lsls	r0, r3, #30
 8000a10:	f57f af4a 	bpl.w	80008a8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a14:	f7ff fd9a 	bl	800054c <HAL_GetTick>
 8000a18:	1b80      	subs	r0, r0, r6
 8000a1a:	2802      	cmp	r0, #2
 8000a1c:	d9f6      	bls.n	8000a0c <HAL_RCC_OscConfig+0x188>
 8000a1e:	e778      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a20:	4b4d      	ldr	r3, [pc, #308]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 8000a22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a24:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a28:	d128      	bne.n	8000a7c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	9201      	str	r2, [sp, #4]
 8000a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a32:	641a      	str	r2, [r3, #64]	; 0x40
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	9301      	str	r3, [sp, #4]
 8000a3c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a3e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a40:	4d48      	ldr	r5, [pc, #288]	; (8000b64 <HAL_RCC_OscConfig+0x2e0>)
 8000a42:	682b      	ldr	r3, [r5, #0]
 8000a44:	05d9      	lsls	r1, r3, #23
 8000a46:	d51b      	bpl.n	8000a80 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a48:	68a3      	ldr	r3, [r4, #8]
 8000a4a:	4d43      	ldr	r5, [pc, #268]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d127      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x21c>
 8000a50:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a58:	f7ff fd78 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a5c:	4d3e      	ldr	r5, [pc, #248]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a5e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a60:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a64:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a66:	079b      	lsls	r3, r3, #30
 8000a68:	d539      	bpl.n	8000ade <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000a6a:	2e00      	cmp	r6, #0
 8000a6c:	f43f af20 	beq.w	80008b0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a70:	4a39      	ldr	r2, [pc, #228]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 8000a72:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	e719      	b.n	80008b0 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000a7c:	2600      	movs	r6, #0
 8000a7e:	e7df      	b.n	8000a40 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a80:	682b      	ldr	r3, [r5, #0]
 8000a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a86:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a88:	f7ff fd60 	bl	800054c <HAL_GetTick>
 8000a8c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a8e:	682b      	ldr	r3, [r5, #0]
 8000a90:	05da      	lsls	r2, r3, #23
 8000a92:	d4d9      	bmi.n	8000a48 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a94:	f7ff fd5a 	bl	800054c <HAL_GetTick>
 8000a98:	1bc0      	subs	r0, r0, r7
 8000a9a:	2802      	cmp	r0, #2
 8000a9c:	d9f7      	bls.n	8000a8e <HAL_RCC_OscConfig+0x20a>
 8000a9e:	e738      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aa0:	2b05      	cmp	r3, #5
 8000aa2:	d104      	bne.n	8000aae <HAL_RCC_OscConfig+0x22a>
 8000aa4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aa6:	f043 0304 	orr.w	r3, r3, #4
 8000aaa:	672b      	str	r3, [r5, #112]	; 0x70
 8000aac:	e7d0      	b.n	8000a50 <HAL_RCC_OscConfig+0x1cc>
 8000aae:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000ab0:	f022 0201 	bic.w	r2, r2, #1
 8000ab4:	672a      	str	r2, [r5, #112]	; 0x70
 8000ab6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000ab8:	f022 0204 	bic.w	r2, r2, #4
 8000abc:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d1ca      	bne.n	8000a58 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000ac2:	f7ff fd43 	bl	800054c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ac6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000aca:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000acc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ace:	0798      	lsls	r0, r3, #30
 8000ad0:	d5cb      	bpl.n	8000a6a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ad2:	f7ff fd3b 	bl	800054c <HAL_GetTick>
 8000ad6:	1bc0      	subs	r0, r0, r7
 8000ad8:	4540      	cmp	r0, r8
 8000ada:	d9f7      	bls.n	8000acc <HAL_RCC_OscConfig+0x248>
 8000adc:	e719      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ade:	f7ff fd35 	bl	800054c <HAL_GetTick>
 8000ae2:	1bc0      	subs	r0, r0, r7
 8000ae4:	4540      	cmp	r0, r8
 8000ae6:	d9bd      	bls.n	8000a64 <HAL_RCC_OscConfig+0x1e0>
 8000ae8:	e713      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000aea:	4d1b      	ldr	r5, [pc, #108]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 8000aec:	68ab      	ldr	r3, [r5, #8]
 8000aee:	f003 030c 	and.w	r3, r3, #12
 8000af2:	2b08      	cmp	r3, #8
 8000af4:	f43f aeca 	beq.w	800088c <HAL_RCC_OscConfig+0x8>
 8000af8:	4e1b      	ldr	r6, [pc, #108]	; (8000b68 <HAL_RCC_OscConfig+0x2e4>)
 8000afa:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000afc:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000afe:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b00:	d134      	bne.n	8000b6c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b02:	f7ff fd23 	bl	800054c <HAL_GetTick>
 8000b06:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b08:	682b      	ldr	r3, [r5, #0]
 8000b0a:	0199      	lsls	r1, r3, #6
 8000b0c:	d41e      	bmi.n	8000b4c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b0e:	6a22      	ldr	r2, [r4, #32]
 8000b10:	69e3      	ldr	r3, [r4, #28]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b16:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b1a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b1c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b22:	4c0d      	ldr	r4, [pc, #52]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b24:	0852      	lsrs	r2, r2, #1
 8000b26:	3a01      	subs	r2, #1
 8000b28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b2c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b2e:	2301      	movs	r3, #1
 8000b30:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b32:	f7ff fd0b 	bl	800054c <HAL_GetTick>
 8000b36:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b38:	6823      	ldr	r3, [r4, #0]
 8000b3a:	019a      	lsls	r2, r3, #6
 8000b3c:	f53f aebc 	bmi.w	80008b8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b40:	f7ff fd04 	bl	800054c <HAL_GetTick>
 8000b44:	1b40      	subs	r0, r0, r5
 8000b46:	2802      	cmp	r0, #2
 8000b48:	d9f6      	bls.n	8000b38 <HAL_RCC_OscConfig+0x2b4>
 8000b4a:	e6e2      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b4c:	f7ff fcfe 	bl	800054c <HAL_GetTick>
 8000b50:	1bc0      	subs	r0, r0, r7
 8000b52:	2802      	cmp	r0, #2
 8000b54:	d9d8      	bls.n	8000b08 <HAL_RCC_OscConfig+0x284>
 8000b56:	e6dc      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	42470000 	.word	0x42470000
 8000b60:	42470e80 	.word	0x42470e80
 8000b64:	40007000 	.word	0x40007000
 8000b68:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000b6c:	f7ff fcee 	bl	800054c <HAL_GetTick>
 8000b70:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b72:	682b      	ldr	r3, [r5, #0]
 8000b74:	019b      	lsls	r3, r3, #6
 8000b76:	f57f ae9f 	bpl.w	80008b8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b7a:	f7ff fce7 	bl	800054c <HAL_GetTick>
 8000b7e:	1b00      	subs	r0, r0, r4
 8000b80:	2802      	cmp	r0, #2
 8000b82:	d9f6      	bls.n	8000b72 <HAL_RCC_OscConfig+0x2ee>
 8000b84:	e6c5      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
 8000b86:	bf00      	nop

08000b88 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b88:	4913      	ldr	r1, [pc, #76]	; (8000bd8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b8a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b8c:	688b      	ldr	r3, [r1, #8]
 8000b8e:	f003 030c 	and.w	r3, r3, #12
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	d003      	beq.n	8000b9e <HAL_RCC_GetSysClockFreq+0x16>
 8000b96:	2b08      	cmp	r3, #8
 8000b98:	d003      	beq.n	8000ba2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b9a:	4810      	ldr	r0, [pc, #64]	; (8000bdc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b9c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b9e:	4810      	ldr	r0, [pc, #64]	; (8000be0 <HAL_RCC_GetSysClockFreq+0x58>)
 8000ba0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ba2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ba4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ba6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ba8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bac:	bf14      	ite	ne
 8000bae:	480c      	ldrne	r0, [pc, #48]	; (8000be0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bb0:	480a      	ldreq	r0, [pc, #40]	; (8000bdc <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bb2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000bb6:	bf18      	it	ne
 8000bb8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bbe:	fba1 0100 	umull	r0, r1, r1, r0
 8000bc2:	f7ff fb15 	bl	80001f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <HAL_RCC_GetSysClockFreq+0x50>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000bce:	3301      	adds	r3, #1
 8000bd0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000bd2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bd6:	bd08      	pop	{r3, pc}
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	00f42400 	.word	0x00f42400
 8000be0:	017d7840 	.word	0x017d7840

08000be4 <HAL_RCC_ClockConfig>:
{
 8000be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000be8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000bea:	4604      	mov	r4, r0
 8000bec:	b910      	cbnz	r0, 8000bf4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000bee:	2001      	movs	r0, #1
 8000bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000bf4:	4b44      	ldr	r3, [pc, #272]	; (8000d08 <HAL_RCC_ClockConfig+0x124>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	f002 020f 	and.w	r2, r2, #15
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	d328      	bcc.n	8000c52 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c00:	6821      	ldr	r1, [r4, #0]
 8000c02:	078f      	lsls	r7, r1, #30
 8000c04:	d42d      	bmi.n	8000c62 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c06:	07c8      	lsls	r0, r1, #31
 8000c08:	d440      	bmi.n	8000c8c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c0a:	4b3f      	ldr	r3, [pc, #252]	; (8000d08 <HAL_RCC_ClockConfig+0x124>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	f002 020f 	and.w	r2, r2, #15
 8000c12:	4295      	cmp	r5, r2
 8000c14:	d366      	bcc.n	8000ce4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c16:	6822      	ldr	r2, [r4, #0]
 8000c18:	0751      	lsls	r1, r2, #29
 8000c1a:	d46c      	bmi.n	8000cf6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c1c:	0713      	lsls	r3, r2, #28
 8000c1e:	d507      	bpl.n	8000c30 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c20:	4a3a      	ldr	r2, [pc, #232]	; (8000d0c <HAL_RCC_ClockConfig+0x128>)
 8000c22:	6921      	ldr	r1, [r4, #16]
 8000c24:	6893      	ldr	r3, [r2, #8]
 8000c26:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c2a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c2e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c30:	f7ff ffaa 	bl	8000b88 <HAL_RCC_GetSysClockFreq>
 8000c34:	4b35      	ldr	r3, [pc, #212]	; (8000d0c <HAL_RCC_ClockConfig+0x128>)
 8000c36:	4a36      	ldr	r2, [pc, #216]	; (8000d10 <HAL_RCC_ClockConfig+0x12c>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c3e:	5cd3      	ldrb	r3, [r2, r3]
 8000c40:	40d8      	lsrs	r0, r3
 8000c42:	4b34      	ldr	r3, [pc, #208]	; (8000d14 <HAL_RCC_ClockConfig+0x130>)
 8000c44:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f001 fc28 	bl	800249c <HAL_InitTick>
  return HAL_OK;
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c52:	b2ca      	uxtb	r2, r1
 8000c54:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 030f 	and.w	r3, r3, #15
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	d1c6      	bne.n	8000bee <HAL_RCC_ClockConfig+0xa>
 8000c60:	e7ce      	b.n	8000c00 <HAL_RCC_ClockConfig+0x1c>
 8000c62:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c64:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c68:	bf1e      	ittt	ne
 8000c6a:	689a      	ldrne	r2, [r3, #8]
 8000c6c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c70:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c72:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c74:	bf42      	ittt	mi
 8000c76:	689a      	ldrmi	r2, [r3, #8]
 8000c78:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c7c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	68a0      	ldr	r0, [r4, #8]
 8000c82:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c86:	4302      	orrs	r2, r0
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	e7bc      	b.n	8000c06 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c8c:	6862      	ldr	r2, [r4, #4]
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <HAL_RCC_ClockConfig+0x128>)
 8000c90:	2a01      	cmp	r2, #1
 8000c92:	d11d      	bne.n	8000cd0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c9a:	d0a8      	beq.n	8000bee <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c9c:	4e1b      	ldr	r6, [pc, #108]	; (8000d0c <HAL_RCC_ClockConfig+0x128>)
 8000c9e:	68b3      	ldr	r3, [r6, #8]
 8000ca0:	f023 0303 	bic.w	r3, r3, #3
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000ca8:	f7ff fc50 	bl	800054c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cac:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cb0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cb2:	68b3      	ldr	r3, [r6, #8]
 8000cb4:	6862      	ldr	r2, [r4, #4]
 8000cb6:	f003 030c 	and.w	r3, r3, #12
 8000cba:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000cbe:	d0a4      	beq.n	8000c0a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cc0:	f7ff fc44 	bl	800054c <HAL_GetTick>
 8000cc4:	1bc0      	subs	r0, r0, r7
 8000cc6:	4540      	cmp	r0, r8
 8000cc8:	d9f3      	bls.n	8000cb2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000cca:	2003      	movs	r0, #3
}
 8000ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cd0:	1e91      	subs	r1, r2, #2
 8000cd2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cd4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cd6:	d802      	bhi.n	8000cde <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cd8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cdc:	e7dd      	b.n	8000c9a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cde:	f013 0f02 	tst.w	r3, #2
 8000ce2:	e7da      	b.n	8000c9a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ce4:	b2ea      	uxtb	r2, r5
 8000ce6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	429d      	cmp	r5, r3
 8000cf0:	f47f af7d 	bne.w	8000bee <HAL_RCC_ClockConfig+0xa>
 8000cf4:	e78f      	b.n	8000c16 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cf6:	4905      	ldr	r1, [pc, #20]	; (8000d0c <HAL_RCC_ClockConfig+0x128>)
 8000cf8:	68e0      	ldr	r0, [r4, #12]
 8000cfa:	688b      	ldr	r3, [r1, #8]
 8000cfc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d00:	4303      	orrs	r3, r0
 8000d02:	608b      	str	r3, [r1, #8]
 8000d04:	e78a      	b.n	8000c1c <HAL_RCC_ClockConfig+0x38>
 8000d06:	bf00      	nop
 8000d08:	40023c00 	.word	0x40023c00
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	08003aa6 	.word	0x08003aa6
 8000d14:	20000008 	.word	0x20000008

08000d18 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000d22:	5cd3      	ldrb	r3, [r2, r3]
 8000d24:	4a03      	ldr	r2, [pc, #12]	; (8000d34 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000d26:	6810      	ldr	r0, [r2, #0]
}
 8000d28:	40d8      	lsrs	r0, r3
 8000d2a:	4770      	bx	lr
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	08003ab6 	.word	0x08003ab6
 8000d34:	20000008 	.word	0x20000008

08000d38 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000d38:	230f      	movs	r3, #15
 8000d3a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_RCC_GetClockConfig+0x34>)
 8000d3e:	689a      	ldr	r2, [r3, #8]
 8000d40:	f002 0203 	and.w	r2, r2, #3
 8000d44:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000d4c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000d54:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	08db      	lsrs	r3, r3, #3
 8000d5a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000d5e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <HAL_RCC_GetClockConfig+0x38>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 030f 	and.w	r3, r3, #15
 8000d68:	600b      	str	r3, [r1, #0]
 8000d6a:	4770      	bx	lr
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40023c00 	.word	0x40023c00

08000d74 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000d74:	b570      	push	{r4, r5, r6, lr}
 8000d76:	4604      	mov	r4, r0
 8000d78:	460d      	mov	r5, r1
 8000d7a:	4616      	mov	r6, r2
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000d7c:	6823      	ldr	r3, [r4, #0]
 8000d7e:	6898      	ldr	r0, [r3, #8]
 8000d80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000d84:	d100      	bne.n	8000d88 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x14>
      }
    }
  }

  return HAL_OK;
}
 8000d86:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000d88:	1c6a      	adds	r2, r5, #1
 8000d8a:	d0f8      	beq.n	8000d7e <SPI_WaitFlagStateUntilTimeout.constprop.7+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000d8c:	f7ff fbde 	bl	800054c <HAL_GetTick>
 8000d90:	1b80      	subs	r0, r0, r6
 8000d92:	4285      	cmp	r5, r0
 8000d94:	d8f2      	bhi.n	8000d7c <SPI_WaitFlagStateUntilTimeout.constprop.7+0x8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000d96:	6823      	ldr	r3, [r4, #0]
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000d9e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000da0:	6862      	ldr	r2, [r4, #4]
 8000da2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000da6:	d10a      	bne.n	8000dbe <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4a>
 8000da8:	68a2      	ldr	r2, [r4, #8]
 8000daa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000dae:	d002      	beq.n	8000db6 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x42>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000db0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000db4:	d103      	bne.n	8000dbe <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4a>
          __HAL_SPI_DISABLE(hspi);
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000dbc:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000dbe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000dc0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000dc4:	d107      	bne.n	8000dd6 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x62>
          SPI_RESET_CRC(hspi);
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000dd4:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000de2:	2003      	movs	r0, #3
 8000de4:	bd70      	pop	{r4, r5, r6, pc}

08000de6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000de6:	b510      	push	{r4, lr}
 8000de8:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000dea:	f7ff ffc3 	bl	8000d74 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8000dee:	b120      	cbz	r0, 8000dfa <SPI_EndRxTxTransaction+0x14>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000df0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000df2:	f043 0320 	orr.w	r3, r3, #32
 8000df6:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8000df8:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8000dfa:	bd10      	pop	{r4, pc}

08000dfc <HAL_SPI_Init>:
{
 8000dfc:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8000dfe:	4604      	mov	r4, r0
 8000e00:	2800      	cmp	r0, #0
 8000e02:	d036      	beq.n	8000e72 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000e08:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000e0c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e10:	b91b      	cbnz	r3, 8000e1a <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000e12:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000e16:	f001 fae9 	bl	80023ec <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000e1a:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e1c:	68a0      	ldr	r0, [r4, #8]
 8000e1e:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000e20:	2302      	movs	r3, #2
 8000e22:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000e26:	680b      	ldr	r3, [r1, #0]
 8000e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e2c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e2e:	6863      	ldr	r3, [r4, #4]
 8000e30:	4303      	orrs	r3, r0
 8000e32:	68e0      	ldr	r0, [r4, #12]
 8000e34:	4303      	orrs	r3, r0
 8000e36:	6920      	ldr	r0, [r4, #16]
 8000e38:	4303      	orrs	r3, r0
 8000e3a:	6960      	ldr	r0, [r4, #20]
 8000e3c:	4303      	orrs	r3, r0
 8000e3e:	69e0      	ldr	r0, [r4, #28]
 8000e40:	4303      	orrs	r3, r0
 8000e42:	6a20      	ldr	r0, [r4, #32]
 8000e44:	4303      	orrs	r3, r0
 8000e46:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000e48:	4303      	orrs	r3, r0
 8000e4a:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000e4e:	4303      	orrs	r3, r0
 8000e50:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000e52:	0c12      	lsrs	r2, r2, #16
 8000e54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e56:	f002 0204 	and.w	r2, r2, #4
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000e5e:	69cb      	ldr	r3, [r1, #28]
 8000e60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e64:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e66:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000e68:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e6a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000e6c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000e70:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e72:	2001      	movs	r0, #1
}
 8000e74:	bd10      	pop	{r4, pc}

08000e76 <HAL_SPI_Transmit>:
{
 8000e76:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000e7a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000e7c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000e80:	2b01      	cmp	r3, #1
{
 8000e82:	4604      	mov	r4, r0
 8000e84:	460d      	mov	r5, r1
 8000e86:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8000e88:	f000 809b 	beq.w	8000fc2 <HAL_SPI_Transmit+0x14c>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000e92:	f7ff fb5b 	bl	800054c <HAL_GetTick>
 8000e96:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8000e98:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000e9c:	b2c0      	uxtb	r0, r0
 8000e9e:	2801      	cmp	r0, #1
 8000ea0:	f040 808d 	bne.w	8000fbe <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 8000ea4:	2d00      	cmp	r5, #0
 8000ea6:	d05d      	beq.n	8000f64 <HAL_SPI_Transmit+0xee>
 8000ea8:	f1b8 0f00 	cmp.w	r8, #0
 8000eac:	d05a      	beq.n	8000f64 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000eb4:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000eb6:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000eb8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000eba:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000ebc:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8000ec0:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000ec2:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000ec4:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000ec6:	6420      	str	r0, [r4, #64]	; 0x40
 8000ec8:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000eca:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8000ed0:	bf08      	it	eq
 8000ed2:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8000ed4:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8000ed8:	bf04      	itt	eq
 8000eda:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8000ede:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000ee0:	6803      	ldr	r3, [r0, #0]
 8000ee2:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8000ee4:	bf5e      	ittt	pl
 8000ee6:	6803      	ldrpl	r3, [r0, #0]
 8000ee8:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8000eec:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000eee:	68e3      	ldr	r3, [r4, #12]
 8000ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ef4:	6863      	ldr	r3, [r4, #4]
 8000ef6:	d13e      	bne.n	8000f76 <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000ef8:	b113      	cbz	r3, 8000f00 <HAL_SPI_Transmit+0x8a>
 8000efa:	f1b8 0f01 	cmp.w	r8, #1
 8000efe:	d107      	bne.n	8000f10 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000f00:	f835 3b02 	ldrh.w	r3, [r5], #2
 8000f04:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000f06:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000f08:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000f10:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	b9a3      	cbnz	r3, 8000f40 <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000f16:	463a      	mov	r2, r7
 8000f18:	4631      	mov	r1, r6
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	f7ff ff63 	bl	8000de6 <SPI_EndRxTxTransaction>
 8000f20:	2800      	cmp	r0, #0
 8000f22:	d149      	bne.n	8000fb8 <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000f24:	68a3      	ldr	r3, [r4, #8]
 8000f26:	b933      	cbnz	r3, 8000f36 <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000f28:	9301      	str	r3, [sp, #4]
 8000f2a:	6823      	ldr	r3, [r4, #0]
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	9201      	str	r2, [sp, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000f36:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000f38:	3000      	adds	r0, #0
 8000f3a:	bf18      	it	ne
 8000f3c:	2001      	movne	r0, #1
 8000f3e:	e011      	b.n	8000f64 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000f40:	6822      	ldr	r2, [r4, #0]
 8000f42:	6893      	ldr	r3, [r2, #8]
 8000f44:	0798      	lsls	r0, r3, #30
 8000f46:	d505      	bpl.n	8000f54 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000f48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f4a:	f833 1b02 	ldrh.w	r1, [r3], #2
 8000f4e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000f50:	6323      	str	r3, [r4, #48]	; 0x30
 8000f52:	e7d9      	b.n	8000f08 <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000f54:	f7ff fafa 	bl	800054c <HAL_GetTick>
 8000f58:	1bc0      	subs	r0, r0, r7
 8000f5a:	42b0      	cmp	r0, r6
 8000f5c:	d3d8      	bcc.n	8000f10 <HAL_SPI_Transmit+0x9a>
 8000f5e:	1c71      	adds	r1, r6, #1
 8000f60:	d0d6      	beq.n	8000f10 <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 8000f62:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000f64:	2301      	movs	r3, #1
 8000f66:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000f70:	b002      	add	sp, #8
 8000f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000f76:	b113      	cbz	r3, 8000f7e <HAL_SPI_Transmit+0x108>
 8000f78:	f1b8 0f01 	cmp.w	r8, #1
 8000f7c:	d108      	bne.n	8000f90 <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000f7e:	782b      	ldrb	r3, [r5, #0]
 8000f80:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8000f82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f84:	3301      	adds	r3, #1
 8000f86:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000f88:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000f90:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d0be      	beq.n	8000f16 <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000f98:	6823      	ldr	r3, [r4, #0]
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	0792      	lsls	r2, r2, #30
 8000f9e:	d503      	bpl.n	8000fa8 <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000fa0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000fa2:	7812      	ldrb	r2, [r2, #0]
 8000fa4:	731a      	strb	r2, [r3, #12]
 8000fa6:	e7ec      	b.n	8000f82 <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000fa8:	f7ff fad0 	bl	800054c <HAL_GetTick>
 8000fac:	1bc0      	subs	r0, r0, r7
 8000fae:	4286      	cmp	r6, r0
 8000fb0:	d8ee      	bhi.n	8000f90 <HAL_SPI_Transmit+0x11a>
 8000fb2:	1c73      	adds	r3, r6, #1
 8000fb4:	d0ec      	beq.n	8000f90 <HAL_SPI_Transmit+0x11a>
 8000fb6:	e7d4      	b.n	8000f62 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000fb8:	2320      	movs	r3, #32
 8000fba:	6563      	str	r3, [r4, #84]	; 0x54
 8000fbc:	e7b2      	b.n	8000f24 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 8000fbe:	2002      	movs	r0, #2
 8000fc0:	e7d0      	b.n	8000f64 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8000fc2:	2002      	movs	r0, #2
 8000fc4:	e7d4      	b.n	8000f70 <HAL_SPI_Transmit+0xfa>

08000fc6 <HAL_TIM_Base_MspInit>:
 8000fc6:	4770      	bx	lr

08000fc8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000fc8:	6803      	ldr	r3, [r0, #0]
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	f042 0201 	orr.w	r2, r2, #1
 8000fd0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000fd8:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8000fda:	bf1e      	ittt	ne
 8000fdc:	681a      	ldrne	r2, [r3, #0]
 8000fde:	f042 0201 	orrne.w	r2, r2, #1
 8000fe2:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_TIM_OC_DelayElapsedCallback>:
 8000fe8:	4770      	bx	lr

08000fea <HAL_TIM_IC_CaptureCallback>:
 8000fea:	4770      	bx	lr

08000fec <HAL_TIM_PWM_PulseFinishedCallback>:
 8000fec:	4770      	bx	lr

08000fee <HAL_TIM_TriggerCallback>:
 8000fee:	4770      	bx	lr

08000ff0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000ff0:	6803      	ldr	r3, [r0, #0]
 8000ff2:	691a      	ldr	r2, [r3, #16]
 8000ff4:	0791      	lsls	r1, r2, #30
{
 8000ff6:	b510      	push	{r4, lr}
 8000ff8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000ffa:	d50e      	bpl.n	800101a <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000ffc:	68da      	ldr	r2, [r3, #12]
 8000ffe:	0792      	lsls	r2, r2, #30
 8001000:	d50b      	bpl.n	800101a <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001002:	f06f 0202 	mvn.w	r2, #2
 8001006:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001008:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800100a:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800100c:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800100e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001010:	d077      	beq.n	8001102 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001012:	f7ff ffea 	bl	8000fea <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001016:	2300      	movs	r3, #0
 8001018:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800101a:	6823      	ldr	r3, [r4, #0]
 800101c:	691a      	ldr	r2, [r3, #16]
 800101e:	0750      	lsls	r0, r2, #29
 8001020:	d510      	bpl.n	8001044 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001022:	68da      	ldr	r2, [r3, #12]
 8001024:	0751      	lsls	r1, r2, #29
 8001026:	d50d      	bpl.n	8001044 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001028:	f06f 0204 	mvn.w	r2, #4
 800102c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800102e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001030:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001032:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001036:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001038:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800103a:	d068      	beq.n	800110e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800103c:	f7ff ffd5 	bl	8000fea <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001040:	2300      	movs	r3, #0
 8001042:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001044:	6823      	ldr	r3, [r4, #0]
 8001046:	691a      	ldr	r2, [r3, #16]
 8001048:	0712      	lsls	r2, r2, #28
 800104a:	d50f      	bpl.n	800106c <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800104c:	68da      	ldr	r2, [r3, #12]
 800104e:	0710      	lsls	r0, r2, #28
 8001050:	d50c      	bpl.n	800106c <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001052:	f06f 0208 	mvn.w	r2, #8
 8001056:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001058:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800105a:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800105c:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800105e:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001060:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001062:	d05a      	beq.n	800111a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001064:	f7ff ffc1 	bl	8000fea <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001068:	2300      	movs	r3, #0
 800106a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800106c:	6823      	ldr	r3, [r4, #0]
 800106e:	691a      	ldr	r2, [r3, #16]
 8001070:	06d2      	lsls	r2, r2, #27
 8001072:	d510      	bpl.n	8001096 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	06d0      	lsls	r0, r2, #27
 8001078:	d50d      	bpl.n	8001096 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800107a:	f06f 0210 	mvn.w	r2, #16
 800107e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001080:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001082:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001084:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001088:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800108a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800108c:	d04b      	beq.n	8001126 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800108e:	f7ff ffac 	bl	8000fea <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001092:	2300      	movs	r3, #0
 8001094:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001096:	6823      	ldr	r3, [r4, #0]
 8001098:	691a      	ldr	r2, [r3, #16]
 800109a:	07d1      	lsls	r1, r2, #31
 800109c:	d508      	bpl.n	80010b0 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	07d2      	lsls	r2, r2, #31
 80010a2:	d505      	bpl.n	80010b0 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80010a4:	f06f 0201 	mvn.w	r2, #1
 80010a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80010aa:	4620      	mov	r0, r4
 80010ac:	f001 f970 	bl	8002390 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80010b0:	6823      	ldr	r3, [r4, #0]
 80010b2:	691a      	ldr	r2, [r3, #16]
 80010b4:	0610      	lsls	r0, r2, #24
 80010b6:	d508      	bpl.n	80010ca <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	0611      	lsls	r1, r2, #24
 80010bc:	d505      	bpl.n	80010ca <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80010be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80010c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80010c4:	4620      	mov	r0, r4
 80010c6:	f000 f8b6 	bl	8001236 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80010ca:	6823      	ldr	r3, [r4, #0]
 80010cc:	691a      	ldr	r2, [r3, #16]
 80010ce:	0652      	lsls	r2, r2, #25
 80010d0:	d508      	bpl.n	80010e4 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	0650      	lsls	r0, r2, #25
 80010d6:	d505      	bpl.n	80010e4 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80010d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80010dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80010de:	4620      	mov	r0, r4
 80010e0:	f7ff ff85 	bl	8000fee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80010e4:	6823      	ldr	r3, [r4, #0]
 80010e6:	691a      	ldr	r2, [r3, #16]
 80010e8:	0691      	lsls	r1, r2, #26
 80010ea:	d522      	bpl.n	8001132 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	0692      	lsls	r2, r2, #26
 80010f0:	d51f      	bpl.n	8001132 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80010f2:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80010f6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80010f8:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80010fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80010fe:	f000 b899 	b.w	8001234 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001102:	f7ff ff71 	bl	8000fe8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001106:	4620      	mov	r0, r4
 8001108:	f7ff ff70 	bl	8000fec <HAL_TIM_PWM_PulseFinishedCallback>
 800110c:	e783      	b.n	8001016 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800110e:	f7ff ff6b 	bl	8000fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001112:	4620      	mov	r0, r4
 8001114:	f7ff ff6a 	bl	8000fec <HAL_TIM_PWM_PulseFinishedCallback>
 8001118:	e792      	b.n	8001040 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800111a:	f7ff ff65 	bl	8000fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800111e:	4620      	mov	r0, r4
 8001120:	f7ff ff64 	bl	8000fec <HAL_TIM_PWM_PulseFinishedCallback>
 8001124:	e7a0      	b.n	8001068 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001126:	f7ff ff5f 	bl	8000fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800112a:	4620      	mov	r0, r4
 800112c:	f7ff ff5e 	bl	8000fec <HAL_TIM_PWM_PulseFinishedCallback>
 8001130:	e7af      	b.n	8001092 <HAL_TIM_IRQHandler+0xa2>
 8001132:	bd10      	pop	{r4, pc}

08001134 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001134:	4a30      	ldr	r2, [pc, #192]	; (80011f8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001136:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001138:	4290      	cmp	r0, r2
 800113a:	d012      	beq.n	8001162 <TIM_Base_SetConfig+0x2e>
 800113c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001140:	d00f      	beq.n	8001162 <TIM_Base_SetConfig+0x2e>
 8001142:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001146:	4290      	cmp	r0, r2
 8001148:	d00b      	beq.n	8001162 <TIM_Base_SetConfig+0x2e>
 800114a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800114e:	4290      	cmp	r0, r2
 8001150:	d007      	beq.n	8001162 <TIM_Base_SetConfig+0x2e>
 8001152:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001156:	4290      	cmp	r0, r2
 8001158:	d003      	beq.n	8001162 <TIM_Base_SetConfig+0x2e>
 800115a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800115e:	4290      	cmp	r0, r2
 8001160:	d119      	bne.n	8001196 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001162:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001168:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800116a:	4a23      	ldr	r2, [pc, #140]	; (80011f8 <TIM_Base_SetConfig+0xc4>)
 800116c:	4290      	cmp	r0, r2
 800116e:	d029      	beq.n	80011c4 <TIM_Base_SetConfig+0x90>
 8001170:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001174:	d026      	beq.n	80011c4 <TIM_Base_SetConfig+0x90>
 8001176:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800117a:	4290      	cmp	r0, r2
 800117c:	d022      	beq.n	80011c4 <TIM_Base_SetConfig+0x90>
 800117e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001182:	4290      	cmp	r0, r2
 8001184:	d01e      	beq.n	80011c4 <TIM_Base_SetConfig+0x90>
 8001186:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800118a:	4290      	cmp	r0, r2
 800118c:	d01a      	beq.n	80011c4 <TIM_Base_SetConfig+0x90>
 800118e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001192:	4290      	cmp	r0, r2
 8001194:	d016      	beq.n	80011c4 <TIM_Base_SetConfig+0x90>
 8001196:	4a19      	ldr	r2, [pc, #100]	; (80011fc <TIM_Base_SetConfig+0xc8>)
 8001198:	4290      	cmp	r0, r2
 800119a:	d013      	beq.n	80011c4 <TIM_Base_SetConfig+0x90>
 800119c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011a0:	4290      	cmp	r0, r2
 80011a2:	d00f      	beq.n	80011c4 <TIM_Base_SetConfig+0x90>
 80011a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011a8:	4290      	cmp	r0, r2
 80011aa:	d00b      	beq.n	80011c4 <TIM_Base_SetConfig+0x90>
 80011ac:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80011b0:	4290      	cmp	r0, r2
 80011b2:	d007      	beq.n	80011c4 <TIM_Base_SetConfig+0x90>
 80011b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011b8:	4290      	cmp	r0, r2
 80011ba:	d003      	beq.n	80011c4 <TIM_Base_SetConfig+0x90>
 80011bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011c0:	4290      	cmp	r0, r2
 80011c2:	d103      	bne.n	80011cc <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011c4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80011c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011ca:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80011cc:	694a      	ldr	r2, [r1, #20]
 80011ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011d2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80011d4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011d6:	688b      	ldr	r3, [r1, #8]
 80011d8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80011da:	680b      	ldr	r3, [r1, #0]
 80011dc:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <TIM_Base_SetConfig+0xc4>)
 80011e0:	4298      	cmp	r0, r3
 80011e2:	d003      	beq.n	80011ec <TIM_Base_SetConfig+0xb8>
 80011e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011e8:	4298      	cmp	r0, r3
 80011ea:	d101      	bne.n	80011f0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80011ec:	690b      	ldr	r3, [r1, #16]
 80011ee:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80011f0:	2301      	movs	r3, #1
 80011f2:	6143      	str	r3, [r0, #20]
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40010000 	.word	0x40010000
 80011fc:	40014000 	.word	0x40014000

08001200 <HAL_TIM_Base_Init>:
{
 8001200:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001202:	4604      	mov	r4, r0
 8001204:	b1a0      	cbz	r0, 8001230 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001206:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800120a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800120e:	b91b      	cbnz	r3, 8001218 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001210:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001214:	f7ff fed7 	bl	8000fc6 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001218:	2302      	movs	r3, #2
 800121a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800121e:	6820      	ldr	r0, [r4, #0]
 8001220:	1d21      	adds	r1, r4, #4
 8001222:	f7ff ff87 	bl	8001134 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001226:	2301      	movs	r3, #1
 8001228:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800122c:	2000      	movs	r0, #0
 800122e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001230:	2001      	movs	r0, #1
}
 8001232:	bd10      	pop	{r4, pc}

08001234 <HAL_TIMEx_CommutCallback>:
 8001234:	4770      	bx	lr

08001236 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001236:	4770      	bx	lr

08001238 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001238:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800123a:	f000 fc31 	bl	8001aa0 <vTaskStartScheduler>
  
  return osOK;
}
 800123e:	2000      	movs	r0, #0
 8001240:	bd08      	pop	{r3, pc}

08001242 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001242:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001244:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001248:	8a02      	ldrh	r2, [r0, #16]
{
 800124a:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800124c:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8001250:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8001252:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001254:	bf14      	ite	ne
 8001256:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001258:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800125a:	a803      	add	r0, sp, #12
 800125c:	9001      	str	r0, [sp, #4]
 800125e:	9400      	str	r4, [sp, #0]
 8001260:	4628      	mov	r0, r5
 8001262:	f000 fb4d 	bl	8001900 <xTaskCreate>
 8001266:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001268:	bf0c      	ite	eq
 800126a:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800126c:	2000      	movne	r0, #0
}
 800126e:	b005      	add	sp, #20
 8001270:	bd30      	pop	{r4, r5, pc}

08001272 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001272:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001274:	2800      	cmp	r0, #0
 8001276:	bf08      	it	eq
 8001278:	2001      	moveq	r0, #1
 800127a:	f000 fd5f 	bl	8001d3c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800127e:	2000      	movs	r0, #0
 8001280:	bd08      	pop	{r3, pc}

08001282 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001282:	f100 0308 	add.w	r3, r0, #8
 8001286:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001288:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800128c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800128e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001290:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001292:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001294:	6003      	str	r3, [r0, #0]
 8001296:	4770      	bx	lr

08001298 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001298:	2300      	movs	r3, #0
 800129a:	6103      	str	r3, [r0, #16]
 800129c:	4770      	bx	lr

0800129e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800129e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80012a0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80012aa:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80012ac:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80012ae:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80012b0:	3301      	adds	r3, #1
 80012b2:	6003      	str	r3, [r0, #0]
 80012b4:	4770      	bx	lr

080012b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80012b6:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80012b8:	1c53      	adds	r3, r2, #1
{
 80012ba:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80012bc:	d10a      	bne.n	80012d4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80012be:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80012c4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80012c6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80012c8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80012ca:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80012cc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80012ce:	3301      	adds	r3, #1
 80012d0:	6003      	str	r3, [r0, #0]
 80012d2:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80012d4:	f100 0308 	add.w	r3, r0, #8
 80012d8:	685c      	ldr	r4, [r3, #4]
 80012da:	6825      	ldr	r5, [r4, #0]
 80012dc:	42aa      	cmp	r2, r5
 80012de:	d3ef      	bcc.n	80012c0 <vListInsert+0xa>
 80012e0:	4623      	mov	r3, r4
 80012e2:	e7f9      	b.n	80012d8 <vListInsert+0x22>

080012e4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80012e4:	6841      	ldr	r1, [r0, #4]
 80012e6:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80012e8:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80012ea:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80012ec:	6882      	ldr	r2, [r0, #8]
 80012ee:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80012f0:	6859      	ldr	r1, [r3, #4]
 80012f2:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80012f4:	bf08      	it	eq
 80012f6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80012f8:	2200      	movs	r2, #0
 80012fa:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	3a01      	subs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001302:	6818      	ldr	r0, [r3, #0]
}
 8001304:	4770      	bx	lr
	...

08001308 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001308:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <prvTaskExitError+0x3c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	d008      	beq.n	8001328 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800131a:	f383 8811 	msr	BASEPRI, r3
 800131e:	f3bf 8f6f 	isb	sy
 8001322:	f3bf 8f4f 	dsb	sy
 8001326:	e7fe      	b.n	8001326 <prvTaskExitError+0x1e>
 8001328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800132c:	f383 8811 	msr	BASEPRI, r3
 8001330:	f3bf 8f6f 	isb	sy
 8001334:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001338:	9b01      	ldr	r3, [sp, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0fc      	beq.n	8001338 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800133e:	b002      	add	sp, #8
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20000004 	.word	0x20000004

08001348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001348:	4808      	ldr	r0, [pc, #32]	; (800136c <prvPortStartFirstTask+0x24>)
 800134a:	6800      	ldr	r0, [r0, #0]
 800134c:	6800      	ldr	r0, [r0, #0]
 800134e:	f380 8808 	msr	MSP, r0
 8001352:	f04f 0000 	mov.w	r0, #0
 8001356:	f380 8814 	msr	CONTROL, r0
 800135a:	b662      	cpsie	i
 800135c:	b661      	cpsie	f
 800135e:	f3bf 8f4f 	dsb	sy
 8001362:	f3bf 8f6f 	isb	sy
 8001366:	df00      	svc	0
 8001368:	bf00      	nop
 800136a:	0000      	.short	0x0000
 800136c:	e000ed08 	.word	0xe000ed08

08001370 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001370:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001380 <vPortEnableVFP+0x10>
 8001374:	6801      	ldr	r1, [r0, #0]
 8001376:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800137a:	6001      	str	r1, [r0, #0]
 800137c:	4770      	bx	lr
 800137e:	0000      	.short	0x0000
 8001380:	e000ed88 	.word	0xe000ed88

08001384 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001384:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001388:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <pxPortInitialiseStack+0x28>)
 800138e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001392:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001396:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800139a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800139e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80013a2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80013a6:	3844      	subs	r0, #68	; 0x44
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	08001309 	.word	0x08001309

080013b0 <SVC_Handler>:
	__asm volatile (
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <pxCurrentTCBConst2>)
 80013b2:	6819      	ldr	r1, [r3, #0]
 80013b4:	6808      	ldr	r0, [r1, #0]
 80013b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013ba:	f380 8809 	msr	PSP, r0
 80013be:	f3bf 8f6f 	isb	sy
 80013c2:	f04f 0000 	mov.w	r0, #0
 80013c6:	f380 8811 	msr	BASEPRI, r0
 80013ca:	4770      	bx	lr
 80013cc:	f3af 8000 	nop.w

080013d0 <pxCurrentTCBConst2>:
 80013d0:	20003cac 	.word	0x20003cac

080013d4 <vPortEnterCritical>:
 80013d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013d8:	f383 8811 	msr	BASEPRI, r3
 80013dc:	f3bf 8f6f 	isb	sy
 80013e0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80013e4:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <vPortEnterCritical+0x3c>)
 80013e6:	6813      	ldr	r3, [r2, #0]
 80013e8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80013ea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80013ec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80013ee:	d10d      	bne.n	800140c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <vPortEnterCritical+0x40>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80013f8:	d008      	beq.n	800140c <vPortEnterCritical+0x38>
 80013fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013fe:	f383 8811 	msr	BASEPRI, r3
 8001402:	f3bf 8f6f 	isb	sy
 8001406:	f3bf 8f4f 	dsb	sy
 800140a:	e7fe      	b.n	800140a <vPortEnterCritical+0x36>
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000004 	.word	0x20000004
 8001414:	e000ed04 	.word	0xe000ed04

08001418 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001418:	4a08      	ldr	r2, [pc, #32]	; (800143c <vPortExitCritical+0x24>)
 800141a:	6813      	ldr	r3, [r2, #0]
 800141c:	b943      	cbnz	r3, 8001430 <vPortExitCritical+0x18>
 800141e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001422:	f383 8811 	msr	BASEPRI, r3
 8001426:	f3bf 8f6f 	isb	sy
 800142a:	f3bf 8f4f 	dsb	sy
 800142e:	e7fe      	b.n	800142e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001430:	3b01      	subs	r3, #1
 8001432:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001434:	b90b      	cbnz	r3, 800143a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001436:	f383 8811 	msr	BASEPRI, r3
 800143a:	4770      	bx	lr
 800143c:	20000004 	.word	0x20000004

08001440 <PendSV_Handler>:
	__asm volatile
 8001440:	f3ef 8009 	mrs	r0, PSP
 8001444:	f3bf 8f6f 	isb	sy
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <pxCurrentTCBConst>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	f01e 0f10 	tst.w	lr, #16
 8001450:	bf08      	it	eq
 8001452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800145a:	6010      	str	r0, [r2, #0]
 800145c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001464:	f380 8811 	msr	BASEPRI, r0
 8001468:	f3bf 8f4f 	dsb	sy
 800146c:	f3bf 8f6f 	isb	sy
 8001470:	f000 fc88 	bl	8001d84 <vTaskSwitchContext>
 8001474:	f04f 0000 	mov.w	r0, #0
 8001478:	f380 8811 	msr	BASEPRI, r0
 800147c:	bc09      	pop	{r0, r3}
 800147e:	6819      	ldr	r1, [r3, #0]
 8001480:	6808      	ldr	r0, [r1, #0]
 8001482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001486:	f01e 0f10 	tst.w	lr, #16
 800148a:	bf08      	it	eq
 800148c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001490:	f380 8809 	msr	PSP, r0
 8001494:	f3bf 8f6f 	isb	sy
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	f3af 8000 	nop.w

080014a0 <pxCurrentTCBConst>:
 80014a0:	20003cac 	.word	0x20003cac

080014a4 <SysTick_Handler>:
{
 80014a4:	b508      	push	{r3, lr}
	__asm volatile
 80014a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014aa:	f383 8811 	msr	BASEPRI, r3
 80014ae:	f3bf 8f6f 	isb	sy
 80014b2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80014b6:	f000 fb37 	bl	8001b28 <xTaskIncrementTick>
 80014ba:	b118      	cbz	r0, 80014c4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <SysTick_Handler+0x28>)
 80014be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014c2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80014c4:	2300      	movs	r3, #0
 80014c6:	f383 8811 	msr	BASEPRI, r3
 80014ca:	bd08      	pop	{r3, pc}
 80014cc:	e000ed04 	.word	0xe000ed04

080014d0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80014d0:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80014d2:	4909      	ldr	r1, [pc, #36]	; (80014f8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80014d8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <vPortSetupTimerInterrupt+0x2c>)
 80014dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e6:	4906      	ldr	r1, [pc, #24]	; (8001500 <vPortSetupTimerInterrupt+0x30>)
 80014e8:	3b01      	subs	r3, #1
 80014ea:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80014ec:	2307      	movs	r3, #7
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000e010 	.word	0xe000e010
 80014f8:	e000e018 	.word	0xe000e018
 80014fc:	20000008 	.word	0x20000008
 8001500:	e000e014 	.word	0xe000e014

08001504 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001504:	4b39      	ldr	r3, [pc, #228]	; (80015ec <xPortStartScheduler+0xe8>)
 8001506:	4a3a      	ldr	r2, [pc, #232]	; (80015f0 <xPortStartScheduler+0xec>)
{
 8001508:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800150a:	6819      	ldr	r1, [r3, #0]
 800150c:	4291      	cmp	r1, r2
 800150e:	d108      	bne.n	8001522 <xPortStartScheduler+0x1e>
	__asm volatile
 8001510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001514:	f383 8811 	msr	BASEPRI, r3
 8001518:	f3bf 8f6f 	isb	sy
 800151c:	f3bf 8f4f 	dsb	sy
 8001520:	e7fe      	b.n	8001520 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b33      	ldr	r3, [pc, #204]	; (80015f4 <xPortStartScheduler+0xf0>)
 8001526:	429a      	cmp	r2, r3
 8001528:	d108      	bne.n	800153c <xPortStartScheduler+0x38>
 800152a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800152e:	f383 8811 	msr	BASEPRI, r3
 8001532:	f3bf 8f6f 	isb	sy
 8001536:	f3bf 8f4f 	dsb	sy
 800153a:	e7fe      	b.n	800153a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800153c:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <xPortStartScheduler+0xf4>)
 800153e:	781a      	ldrb	r2, [r3, #0]
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001544:	22ff      	movs	r2, #255	; 0xff
 8001546:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001548:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800154a:	4a2c      	ldr	r2, [pc, #176]	; (80015fc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001552:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001556:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800155a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800155c:	4b28      	ldr	r3, [pc, #160]	; (8001600 <xPortStartScheduler+0xfc>)
 800155e:	2207      	movs	r2, #7
 8001560:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001562:	2100      	movs	r1, #0
 8001564:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001568:	0600      	lsls	r0, r0, #24
 800156a:	f102 34ff 	add.w	r4, r2, #4294967295
 800156e:	d40d      	bmi.n	800158c <xPortStartScheduler+0x88>
 8001570:	b101      	cbz	r1, 8001574 <xPortStartScheduler+0x70>
 8001572:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	2a03      	cmp	r2, #3
 8001578:	d011      	beq.n	800159e <xPortStartScheduler+0x9a>
 800157a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800157e:	f383 8811 	msr	BASEPRI, r3
 8001582:	f3bf 8f6f 	isb	sy
 8001586:	f3bf 8f4f 	dsb	sy
 800158a:	e7fe      	b.n	800158a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800158c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001590:	0052      	lsls	r2, r2, #1
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	f88d 2003 	strb.w	r2, [sp, #3]
 8001598:	2101      	movs	r1, #1
 800159a:	4622      	mov	r2, r4
 800159c:	e7e2      	b.n	8001564 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800159e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80015a0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80015a4:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80015a6:	9b01      	ldr	r3, [sp, #4]
 80015a8:	4a13      	ldr	r2, [pc, #76]	; (80015f8 <xPortStartScheduler+0xf4>)
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <xPortStartScheduler+0x100>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80015b6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80015be:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80015c0:	f7ff ff86 	bl	80014d0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80015c4:	4b10      	ldr	r3, [pc, #64]	; (8001608 <xPortStartScheduler+0x104>)
 80015c6:	2400      	movs	r4, #0
 80015c8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80015ca:	f7ff fed1 	bl	8001370 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80015ce:	4a0f      	ldr	r2, [pc, #60]	; (800160c <xPortStartScheduler+0x108>)
 80015d0:	6813      	ldr	r3, [r2, #0]
 80015d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80015d6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80015d8:	f7ff feb6 	bl	8001348 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80015dc:	f000 fbd2 	bl	8001d84 <vTaskSwitchContext>
	prvTaskExitError();
 80015e0:	f7ff fe92 	bl	8001308 <prvTaskExitError>
}
 80015e4:	4620      	mov	r0, r4
 80015e6:	b002      	add	sp, #8
 80015e8:	bd10      	pop	{r4, pc}
 80015ea:	bf00      	nop
 80015ec:	e000ed00 	.word	0xe000ed00
 80015f0:	410fc271 	.word	0x410fc271
 80015f4:	410fc270 	.word	0x410fc270
 80015f8:	e000e400 	.word	0xe000e400
 80015fc:	2000008c 	.word	0x2000008c
 8001600:	20000090 	.word	0x20000090
 8001604:	e000ed20 	.word	0xe000ed20
 8001608:	20000004 	.word	0x20000004
 800160c:	e000ef34 	.word	0xe000ef34

08001610 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001610:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <prvInsertBlockIntoFreeList+0x40>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4282      	cmp	r2, r0
 8001618:	d318      	bcc.n	800164c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800161a:	685c      	ldr	r4, [r3, #4]
 800161c:	1919      	adds	r1, r3, r4
 800161e:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001620:	bf01      	itttt	eq
 8001622:	6841      	ldreq	r1, [r0, #4]
 8001624:	4618      	moveq	r0, r3
 8001626:	1909      	addeq	r1, r1, r4
 8001628:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800162a:	6844      	ldr	r4, [r0, #4]
 800162c:	1901      	adds	r1, r0, r4
 800162e:	428a      	cmp	r2, r1
 8001630:	d107      	bne.n	8001642 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001632:	4908      	ldr	r1, [pc, #32]	; (8001654 <prvInsertBlockIntoFreeList+0x44>)
 8001634:	6809      	ldr	r1, [r1, #0]
 8001636:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001638:	bf1f      	itttt	ne
 800163a:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800163c:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800163e:	1909      	addne	r1, r1, r4
 8001640:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001642:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001644:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001646:	bf18      	it	ne
 8001648:	6018      	strne	r0, [r3, #0]
 800164a:	bd10      	pop	{r4, pc}
 800164c:	4613      	mov	r3, r2
 800164e:	e7e1      	b.n	8001614 <prvInsertBlockIntoFreeList+0x4>
 8001650:	20003ca4 	.word	0x20003ca4
 8001654:	20000094 	.word	0x20000094

08001658 <pvPortMalloc>:
{
 8001658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800165c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800165e:	f000 fa5b 	bl	8001b18 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001662:	493e      	ldr	r1, [pc, #248]	; (800175c <pvPortMalloc+0x104>)
 8001664:	4d3e      	ldr	r5, [pc, #248]	; (8001760 <pvPortMalloc+0x108>)
 8001666:	680b      	ldr	r3, [r1, #0]
 8001668:	bb0b      	cbnz	r3, 80016ae <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800166a:	4a3e      	ldr	r2, [pc, #248]	; (8001764 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800166c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800166e:	bf1f      	itttt	ne
 8001670:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001672:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001676:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 800167a:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800167c:	bf14      	ite	ne
 800167e:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001680:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001684:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001686:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001688:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800168c:	4e36      	ldr	r6, [pc, #216]	; (8001768 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 800168e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001690:	2000      	movs	r0, #0
 8001692:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001694:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001696:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001698:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800169a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800169c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800169e:	4b33      	ldr	r3, [pc, #204]	; (800176c <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80016a0:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80016a2:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80016a4:	4b32      	ldr	r3, [pc, #200]	; (8001770 <pvPortMalloc+0x118>)
 80016a6:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80016a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80016ac:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80016ae:	682f      	ldr	r7, [r5, #0]
 80016b0:	4227      	tst	r7, r4
 80016b2:	d116      	bne.n	80016e2 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80016b4:	2c00      	cmp	r4, #0
 80016b6:	d041      	beq.n	800173c <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80016b8:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80016bc:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80016be:	bf1c      	itt	ne
 80016c0:	f023 0307 	bicne.w	r3, r3, #7
 80016c4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80016c6:	b163      	cbz	r3, 80016e2 <pvPortMalloc+0x8a>
 80016c8:	4a29      	ldr	r2, [pc, #164]	; (8001770 <pvPortMalloc+0x118>)
 80016ca:	6816      	ldr	r6, [r2, #0]
 80016cc:	42b3      	cmp	r3, r6
 80016ce:	4690      	mov	r8, r2
 80016d0:	d807      	bhi.n	80016e2 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80016d2:	4a25      	ldr	r2, [pc, #148]	; (8001768 <pvPortMalloc+0x110>)
 80016d4:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80016d6:	6868      	ldr	r0, [r5, #4]
 80016d8:	4283      	cmp	r3, r0
 80016da:	d804      	bhi.n	80016e6 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80016dc:	6809      	ldr	r1, [r1, #0]
 80016de:	428d      	cmp	r5, r1
 80016e0:	d107      	bne.n	80016f2 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80016e2:	2400      	movs	r4, #0
 80016e4:	e02a      	b.n	800173c <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80016e6:	682c      	ldr	r4, [r5, #0]
 80016e8:	2c00      	cmp	r4, #0
 80016ea:	d0f7      	beq.n	80016dc <pvPortMalloc+0x84>
 80016ec:	462a      	mov	r2, r5
 80016ee:	4625      	mov	r5, r4
 80016f0:	e7f1      	b.n	80016d6 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80016f2:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80016f4:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80016f6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80016f8:	1ac2      	subs	r2, r0, r3
 80016fa:	2a10      	cmp	r2, #16
 80016fc:	d90f      	bls.n	800171e <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80016fe:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001700:	0741      	lsls	r1, r0, #29
 8001702:	d008      	beq.n	8001716 <pvPortMalloc+0xbe>
 8001704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001708:	f383 8811 	msr	BASEPRI, r3
 800170c:	f3bf 8f6f 	isb	sy
 8001710:	f3bf 8f4f 	dsb	sy
 8001714:	e7fe      	b.n	8001714 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001716:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001718:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800171a:	f7ff ff79 	bl	8001610 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800171e:	4913      	ldr	r1, [pc, #76]	; (800176c <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001720:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001722:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001724:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001726:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001728:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800172a:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800172e:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001732:	bf38      	it	cc
 8001734:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001736:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001738:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800173a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800173c:	f000 fa86 	bl	8001c4c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001740:	0763      	lsls	r3, r4, #29
 8001742:	d008      	beq.n	8001756 <pvPortMalloc+0xfe>
 8001744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001748:	f383 8811 	msr	BASEPRI, r3
 800174c:	f3bf 8f6f 	isb	sy
 8001750:	f3bf 8f4f 	dsb	sy
 8001754:	e7fe      	b.n	8001754 <pvPortMalloc+0xfc>
}
 8001756:	4620      	mov	r0, r4
 8001758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800175c:	20000094 	.word	0x20000094
 8001760:	20003c98 	.word	0x20003c98
 8001764:	20000098 	.word	0x20000098
 8001768:	20003ca4 	.word	0x20003ca4
 800176c:	20003ca0 	.word	0x20003ca0
 8001770:	20003c9c 	.word	0x20003c9c

08001774 <vPortFree>:
{
 8001774:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001776:	4604      	mov	r4, r0
 8001778:	b370      	cbz	r0, 80017d8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800177a:	4a18      	ldr	r2, [pc, #96]	; (80017dc <vPortFree+0x68>)
 800177c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	4213      	tst	r3, r2
 8001784:	d108      	bne.n	8001798 <vPortFree+0x24>
 8001786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800178a:	f383 8811 	msr	BASEPRI, r3
 800178e:	f3bf 8f6f 	isb	sy
 8001792:	f3bf 8f4f 	dsb	sy
 8001796:	e7fe      	b.n	8001796 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001798:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800179c:	b141      	cbz	r1, 80017b0 <vPortFree+0x3c>
 800179e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017a2:	f383 8811 	msr	BASEPRI, r3
 80017a6:	f3bf 8f6f 	isb	sy
 80017aa:	f3bf 8f4f 	dsb	sy
 80017ae:	e7fe      	b.n	80017ae <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80017b0:	ea23 0302 	bic.w	r3, r3, r2
 80017b4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80017b8:	f000 f9ae 	bl	8001b18 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80017bc:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <vPortFree+0x6c>)
 80017be:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80017c2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80017c4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80017c8:	440b      	add	r3, r1
 80017ca:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80017cc:	f7ff ff20 	bl	8001610 <prvInsertBlockIntoFreeList>
}
 80017d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80017d4:	f000 ba3a 	b.w	8001c4c <xTaskResumeAll>
 80017d8:	bd10      	pop	{r4, pc}
 80017da:	bf00      	nop
 80017dc:	20003c98 	.word	0x20003c98
 80017e0:	20003c9c 	.word	0x20003c9c

080017e4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017e4:	4a06      	ldr	r2, [pc, #24]	; (8001800 <prvResetNextTaskUnblockTime+0x1c>)
 80017e6:	6813      	ldr	r3, [r2, #0]
 80017e8:	6819      	ldr	r1, [r3, #0]
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <prvResetNextTaskUnblockTime+0x20>)
 80017ec:	b919      	cbnz	r1, 80017f6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80017ee:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80017f6:	6812      	ldr	r2, [r2, #0]
 80017f8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80017fa:	68d2      	ldr	r2, [r2, #12]
 80017fc:	6852      	ldr	r2, [r2, #4]
 80017fe:	e7f8      	b.n	80017f2 <prvResetNextTaskUnblockTime+0xe>
 8001800:	20003cb0 	.word	0x20003cb0
 8001804:	20003d88 	.word	0x20003d88

08001808 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800180a:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800180c:	4e1b      	ldr	r6, [pc, #108]	; (800187c <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800180e:	681d      	ldr	r5, [r3, #0]
{
 8001810:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001812:	6830      	ldr	r0, [r6, #0]
 8001814:	3004      	adds	r0, #4
{
 8001816:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001818:	f7ff fd64 	bl	80012e4 <uxListRemove>
 800181c:	4633      	mov	r3, r6
 800181e:	b940      	cbnz	r0, 8001832 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001820:	6831      	ldr	r1, [r6, #0]
 8001822:	4e17      	ldr	r6, [pc, #92]	; (8001880 <prvAddCurrentTaskToDelayedList+0x78>)
 8001824:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001826:	6832      	ldr	r2, [r6, #0]
 8001828:	2001      	movs	r0, #1
 800182a:	4088      	lsls	r0, r1
 800182c:	ea22 0200 	bic.w	r2, r2, r0
 8001830:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001832:	1c62      	adds	r2, r4, #1
 8001834:	d107      	bne.n	8001846 <prvAddCurrentTaskToDelayedList+0x3e>
 8001836:	b137      	cbz	r7, 8001846 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001838:	6819      	ldr	r1, [r3, #0]
 800183a:	4812      	ldr	r0, [pc, #72]	; (8001884 <prvAddCurrentTaskToDelayedList+0x7c>)
 800183c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800183e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001842:	f7ff bd2c 	b.w	800129e <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001846:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001848:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800184a:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800184c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800184e:	d907      	bls.n	8001860 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001850:	4a0d      	ldr	r2, [pc, #52]	; (8001888 <prvAddCurrentTaskToDelayedList+0x80>)
 8001852:	6810      	ldr	r0, [r2, #0]
 8001854:	6819      	ldr	r1, [r3, #0]
}
 8001856:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800185a:	3104      	adds	r1, #4
 800185c:	f7ff bd2b 	b.w	80012b6 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001860:	4a0a      	ldr	r2, [pc, #40]	; (800188c <prvAddCurrentTaskToDelayedList+0x84>)
 8001862:	6810      	ldr	r0, [r2, #0]
 8001864:	6819      	ldr	r1, [r3, #0]
 8001866:	3104      	adds	r1, #4
 8001868:	f7ff fd25 	bl	80012b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <prvAddCurrentTaskToDelayedList+0x88>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001872:	bf38      	it	cc
 8001874:	601c      	strcc	r4, [r3, #0]
 8001876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001878:	20003dd0 	.word	0x20003dd0
 800187c:	20003cac 	.word	0x20003cac
 8001880:	20003d58 	.word	0x20003d58
 8001884:	20003da8 	.word	0x20003da8
 8001888:	20003cb4 	.word	0x20003cb4
 800188c:	20003cb0 	.word	0x20003cb0
 8001890:	20003d88 	.word	0x20003d88

08001894 <prvIdleTask>:
{
 8001894:	b580      	push	{r7, lr}
				taskYIELD();
 8001896:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80018fc <prvIdleTask+0x68>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800189a:	4f14      	ldr	r7, [pc, #80]	; (80018ec <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800189c:	4c14      	ldr	r4, [pc, #80]	; (80018f0 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 800189e:	4e15      	ldr	r6, [pc, #84]	; (80018f4 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	b963      	cbnz	r3, 80018be <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80018a4:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <prvIdleTask+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d9f8      	bls.n	800189e <prvIdleTask+0xa>
				taskYIELD();
 80018ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80018b0:	f8c8 3000 	str.w	r3, [r8]
 80018b4:	f3bf 8f4f 	dsb	sy
 80018b8:	f3bf 8f6f 	isb	sy
 80018bc:	e7ee      	b.n	800189c <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 80018be:	f7ff fd89 	bl	80013d4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80018c6:	1d28      	adds	r0, r5, #4
 80018c8:	f7ff fd0c 	bl	80012e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80018cc:	6833      	ldr	r3, [r6, #0]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80018d8:	f7ff fd9e 	bl	8001418 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80018dc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80018de:	f7ff ff49 	bl	8001774 <vPortFree>
			vPortFree( pxTCB );
 80018e2:	4628      	mov	r0, r5
 80018e4:	f7ff ff46 	bl	8001774 <vPortFree>
 80018e8:	e7da      	b.n	80018a0 <prvIdleTask+0xc>
 80018ea:	bf00      	nop
 80018ec:	20003dbc 	.word	0x20003dbc
 80018f0:	20003d48 	.word	0x20003d48
 80018f4:	20003d44 	.word	0x20003d44
 80018f8:	20003cb8 	.word	0x20003cb8
 80018fc:	e000ed04 	.word	0xe000ed04

08001900 <xTaskCreate>:
	{
 8001900:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001904:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8001908:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800190a:	4650      	mov	r0, sl
	{
 800190c:	460f      	mov	r7, r1
 800190e:	4699      	mov	r9, r3
 8001910:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001912:	f7ff fea1 	bl	8001658 <pvPortMalloc>
			if( pxStack != NULL )
 8001916:	4605      	mov	r5, r0
 8001918:	2800      	cmp	r0, #0
 800191a:	f000 8096 	beq.w	8001a4a <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800191e:	2054      	movs	r0, #84	; 0x54
 8001920:	f7ff fe9a 	bl	8001658 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001924:	4604      	mov	r4, r0
 8001926:	2800      	cmp	r0, #0
 8001928:	f000 808c 	beq.w	8001a44 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800192c:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8001930:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001932:	4455      	add	r5, sl
 8001934:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001936:	f025 0a07 	bic.w	sl, r5, #7
 800193a:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800193e:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001940:	7859      	ldrb	r1, [r3, #1]
 8001942:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001946:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800194a:	b109      	cbz	r1, 8001950 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800194c:	42bb      	cmp	r3, r7
 800194e:	d1f7      	bne.n	8001940 <xTaskCreate+0x40>
 8001950:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001952:	2d06      	cmp	r5, #6
 8001954:	bf28      	it	cs
 8001956:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001958:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800195c:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800195e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001960:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001962:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001964:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001968:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800196c:	f7ff fc94 	bl	8001298 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001970:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001974:	f104 0018 	add.w	r0, r4, #24
 8001978:	f7ff fc8e 	bl	8001298 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800197c:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001980:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001982:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001984:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001986:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800198a:	464a      	mov	r2, r9
 800198c:	4641      	mov	r1, r8
 800198e:	4650      	mov	r0, sl
 8001990:	f7ff fcf8 	bl	8001384 <pxPortInitialiseStack>
 8001994:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001996:	b106      	cbz	r6, 800199a <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001998:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800199a:	f7ff fd1b 	bl	80013d4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800199e:	4b32      	ldr	r3, [pc, #200]	; (8001a68 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 80019a0:	4e32      	ldr	r6, [pc, #200]	; (8001a6c <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001a98 <xTaskCreate+0x198>
 80019a8:	3201      	adds	r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80019ac:	6835      	ldr	r5, [r6, #0]
 80019ae:	2d00      	cmp	r5, #0
 80019b0:	d14e      	bne.n	8001a50 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 80019b2:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d11d      	bne.n	80019f6 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80019ba:	eb08 0005 	add.w	r0, r8, r5
 80019be:	3514      	adds	r5, #20
 80019c0:	f7ff fc5f 	bl	8001282 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80019c4:	2d8c      	cmp	r5, #140	; 0x8c
 80019c6:	d1f8      	bne.n	80019ba <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 80019c8:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001a9c <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 80019cc:	4d28      	ldr	r5, [pc, #160]	; (8001a70 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 80019ce:	4648      	mov	r0, r9
 80019d0:	f7ff fc57 	bl	8001282 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80019d4:	4628      	mov	r0, r5
 80019d6:	f7ff fc54 	bl	8001282 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80019da:	4826      	ldr	r0, [pc, #152]	; (8001a74 <xTaskCreate+0x174>)
 80019dc:	f7ff fc51 	bl	8001282 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80019e0:	4825      	ldr	r0, [pc, #148]	; (8001a78 <xTaskCreate+0x178>)
 80019e2:	f7ff fc4e 	bl	8001282 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80019e6:	4825      	ldr	r0, [pc, #148]	; (8001a7c <xTaskCreate+0x17c>)
 80019e8:	f7ff fc4b 	bl	8001282 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80019ec:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <xTaskCreate+0x180>)
 80019ee:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80019f2:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <xTaskCreate+0x184>)
 80019f4:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80019f6:	4a24      	ldr	r2, [pc, #144]	; (8001a88 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 80019f8:	4924      	ldr	r1, [pc, #144]	; (8001a8c <xTaskCreate+0x18c>)
		uxTaskNumber++;
 80019fa:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80019fc:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80019fe:	3301      	adds	r3, #1
 8001a00:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001a02:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a04:	2501      	movs	r5, #1
 8001a06:	fa05 f302 	lsl.w	r3, r5, r2
 8001a0a:	4303      	orrs	r3, r0
 8001a0c:	2014      	movs	r0, #20
 8001a0e:	600b      	str	r3, [r1, #0]
 8001a10:	fb00 8002 	mla	r0, r0, r2, r8
 8001a14:	4639      	mov	r1, r7
 8001a16:	f7ff fc42 	bl	800129e <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001a1a:	f7ff fcfd 	bl	8001418 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <xTaskCreate+0x190>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	b163      	cbz	r3, 8001a3e <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001a24:	6833      	ldr	r3, [r6, #0]
 8001a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d207      	bcs.n	8001a3e <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8001a2e:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <xTaskCreate+0x194>)
 8001a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	f3bf 8f4f 	dsb	sy
 8001a3a:	f3bf 8f6f 	isb	sy
	}
 8001a3e:	4628      	mov	r0, r5
 8001a40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8001a44:	4628      	mov	r0, r5
 8001a46:	f7ff fe95 	bl	8001774 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001a4a:	f04f 35ff 	mov.w	r5, #4294967295
 8001a4e:	e7f6      	b.n	8001a3e <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <xTaskCreate+0x190>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1ce      	bne.n	80019f6 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001a58:	6833      	ldr	r3, [r6, #0]
 8001a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a5e:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001a60:	bf98      	it	ls
 8001a62:	6034      	strls	r4, [r6, #0]
 8001a64:	e7c7      	b.n	80019f6 <xTaskCreate+0xf6>
 8001a66:	bf00      	nop
 8001a68:	20003d44 	.word	0x20003d44
 8001a6c:	20003cac 	.word	0x20003cac
 8001a70:	20003d70 	.word	0x20003d70
 8001a74:	20003d90 	.word	0x20003d90
 8001a78:	20003dbc 	.word	0x20003dbc
 8001a7c:	20003da8 	.word	0x20003da8
 8001a80:	20003cb0 	.word	0x20003cb0
 8001a84:	20003cb4 	.word	0x20003cb4
 8001a88:	20003d54 	.word	0x20003d54
 8001a8c:	20003d58 	.word	0x20003d58
 8001a90:	20003da4 	.word	0x20003da4
 8001a94:	e000ed04 	.word	0xe000ed04
 8001a98:	20003cb8 	.word	0x20003cb8
 8001a9c:	20003d5c 	.word	0x20003d5c

08001aa0 <vTaskStartScheduler>:
{
 8001aa0:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001aa2:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <vTaskStartScheduler+0x60>)
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	2400      	movs	r4, #0
 8001aa8:	9400      	str	r4, [sp, #0]
 8001aaa:	4623      	mov	r3, r4
 8001aac:	2280      	movs	r2, #128	; 0x80
 8001aae:	4915      	ldr	r1, [pc, #84]	; (8001b04 <vTaskStartScheduler+0x64>)
 8001ab0:	4815      	ldr	r0, [pc, #84]	; (8001b08 <vTaskStartScheduler+0x68>)
 8001ab2:	f7ff ff25 	bl	8001900 <xTaskCreate>
	if( xReturn == pdPASS )
 8001ab6:	2801      	cmp	r0, #1
 8001ab8:	d114      	bne.n	8001ae4 <vTaskStartScheduler+0x44>
 8001aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001abe:	f383 8811 	msr	BASEPRI, r3
 8001ac2:	f3bf 8f6f 	isb	sy
 8001ac6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <vTaskStartScheduler+0x6c>)
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <vTaskStartScheduler+0x70>)
 8001ad4:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <vTaskStartScheduler+0x74>)
 8001ad8:	601c      	str	r4, [r3, #0]
}
 8001ada:	b002      	add	sp, #8
 8001adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001ae0:	f7ff bd10 	b.w	8001504 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001ae4:	3001      	adds	r0, #1
 8001ae6:	d108      	bne.n	8001afa <vTaskStartScheduler+0x5a>
 8001ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aec:	f383 8811 	msr	BASEPRI, r3
 8001af0:	f3bf 8f6f 	isb	sy
 8001af4:	f3bf 8f4f 	dsb	sy
 8001af8:	e7fe      	b.n	8001af8 <vTaskStartScheduler+0x58>
}
 8001afa:	b002      	add	sp, #8
 8001afc:	bd10      	pop	{r4, pc}
 8001afe:	bf00      	nop
 8001b00:	20003d84 	.word	0x20003d84
 8001b04:	08002fd8 	.word	0x08002fd8
 8001b08:	08001895 	.word	0x08001895
 8001b0c:	20003d88 	.word	0x20003d88
 8001b10:	20003da4 	.word	0x20003da4
 8001b14:	20003dd0 	.word	0x20003dd0

08001b18 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001b18:	4a02      	ldr	r2, [pc, #8]	; (8001b24 <vTaskSuspendAll+0xc>)
 8001b1a:	6813      	ldr	r3, [r2, #0]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20003d50 	.word	0x20003d50

08001b28 <xTaskIncrementTick>:
{
 8001b28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b2c:	4b3c      	ldr	r3, [pc, #240]	; (8001c20 <xTaskIncrementTick+0xf8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d153      	bne.n	8001bdc <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001b34:	4b3b      	ldr	r3, [pc, #236]	; (8001c24 <xTaskIncrementTick+0xfc>)
 8001b36:	681c      	ldr	r4, [r3, #0]
 8001b38:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001b3a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001b3c:	b9bc      	cbnz	r4, 8001b6e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001b3e:	4b3a      	ldr	r3, [pc, #232]	; (8001c28 <xTaskIncrementTick+0x100>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	b142      	cbz	r2, 8001b58 <xTaskIncrementTick+0x30>
 8001b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b4a:	f383 8811 	msr	BASEPRI, r3
 8001b4e:	f3bf 8f6f 	isb	sy
 8001b52:	f3bf 8f4f 	dsb	sy
 8001b56:	e7fe      	b.n	8001b56 <xTaskIncrementTick+0x2e>
 8001b58:	4a34      	ldr	r2, [pc, #208]	; (8001c2c <xTaskIncrementTick+0x104>)
 8001b5a:	6819      	ldr	r1, [r3, #0]
 8001b5c:	6810      	ldr	r0, [r2, #0]
 8001b5e:	6018      	str	r0, [r3, #0]
 8001b60:	6011      	str	r1, [r2, #0]
 8001b62:	4a33      	ldr	r2, [pc, #204]	; (8001c30 <xTaskIncrementTick+0x108>)
 8001b64:	6813      	ldr	r3, [r2, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	f7ff fe3b 	bl	80017e4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001b6e:	4d31      	ldr	r5, [pc, #196]	; (8001c34 <xTaskIncrementTick+0x10c>)
 8001b70:	4f31      	ldr	r7, [pc, #196]	; (8001c38 <xTaskIncrementTick+0x110>)
 8001b72:	682b      	ldr	r3, [r5, #0]
 8001b74:	429c      	cmp	r4, r3
 8001b76:	f04f 0b00 	mov.w	fp, #0
 8001b7a:	d33e      	bcc.n	8001bfa <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b7c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001c28 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001b80:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001c48 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b84:	f8d8 2000 	ldr.w	r2, [r8]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	bb72      	cbnz	r2, 8001bea <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b90:	602a      	str	r2, [r5, #0]
					break;
 8001b92:	e032      	b.n	8001bfa <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b94:	f106 0a04 	add.w	sl, r6, #4
 8001b98:	4650      	mov	r0, sl
 8001b9a:	f7ff fba3 	bl	80012e4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001b9e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001ba0:	b119      	cbz	r1, 8001baa <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ba2:	f106 0018 	add.w	r0, r6, #24
 8001ba6:	f7ff fb9d 	bl	80012e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001baa:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001bac:	f8d9 3000 	ldr.w	r3, [r9]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	fa02 f100 	lsl.w	r1, r2, r0
 8001bb6:	4319      	orrs	r1, r3
 8001bb8:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <xTaskIncrementTick+0x114>)
 8001bba:	f8c9 1000 	str.w	r1, [r9]
 8001bbe:	f04f 0e14 	mov.w	lr, #20
 8001bc2:	4651      	mov	r1, sl
 8001bc4:	fb0e 3000 	mla	r0, lr, r0, r3
 8001bc8:	f7ff fb69 	bl	800129e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001bcc:	6838      	ldr	r0, [r7, #0]
 8001bce:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8001bd0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8001bd2:	4291      	cmp	r1, r2
 8001bd4:	bf28      	it	cs
 8001bd6:	f04f 0b01 	movcs.w	fp, #1
 8001bda:	e7d3      	b.n	8001b84 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8001bdc:	4a18      	ldr	r2, [pc, #96]	; (8001c40 <xTaskIncrementTick+0x118>)
 8001bde:	6813      	ldr	r3, [r2, #0]
 8001be0:	3301      	adds	r3, #1
 8001be2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8001be4:	f04f 0b00 	mov.w	fp, #0
 8001be8:	e011      	b.n	8001c0e <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001bea:	f8d8 2000 	ldr.w	r2, [r8]
 8001bee:	68d2      	ldr	r2, [r2, #12]
 8001bf0:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001bf2:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8001bf4:	428c      	cmp	r4, r1
 8001bf6:	d2cd      	bcs.n	8001b94 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8001bf8:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <xTaskIncrementTick+0x114>)
 8001bfe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c00:	2214      	movs	r2, #20
 8001c02:	434a      	muls	r2, r1
 8001c04:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8001c06:	2a02      	cmp	r2, #2
 8001c08:	bf28      	it	cs
 8001c0a:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8001c0e:	4a0d      	ldr	r2, [pc, #52]	; (8001c44 <xTaskIncrementTick+0x11c>)
 8001c10:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8001c12:	2a00      	cmp	r2, #0
 8001c14:	bf18      	it	ne
 8001c16:	f04f 0b01 	movne.w	fp, #1
}
 8001c1a:	4658      	mov	r0, fp
 8001c1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c20:	20003d50 	.word	0x20003d50
 8001c24:	20003dd0 	.word	0x20003dd0
 8001c28:	20003cb0 	.word	0x20003cb0
 8001c2c:	20003cb4 	.word	0x20003cb4
 8001c30:	20003d8c 	.word	0x20003d8c
 8001c34:	20003d88 	.word	0x20003d88
 8001c38:	20003cac 	.word	0x20003cac
 8001c3c:	20003cb8 	.word	0x20003cb8
 8001c40:	20003d4c 	.word	0x20003d4c
 8001c44:	20003dd4 	.word	0x20003dd4
 8001c48:	20003d58 	.word	0x20003d58

08001c4c <xTaskResumeAll>:
{
 8001c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001c50:	4c31      	ldr	r4, [pc, #196]	; (8001d18 <xTaskResumeAll+0xcc>)
 8001c52:	6823      	ldr	r3, [r4, #0]
 8001c54:	b943      	cbnz	r3, 8001c68 <xTaskResumeAll+0x1c>
 8001c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c5a:	f383 8811 	msr	BASEPRI, r3
 8001c5e:	f3bf 8f6f 	isb	sy
 8001c62:	f3bf 8f4f 	dsb	sy
 8001c66:	e7fe      	b.n	8001c66 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8001c68:	f7ff fbb4 	bl	80013d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001c6c:	6823      	ldr	r3, [r4, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c72:	6824      	ldr	r4, [r4, #0]
 8001c74:	b12c      	cbz	r4, 8001c82 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8001c76:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001c78:	f7ff fbce 	bl	8001418 <vPortExitCritical>
}
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001c82:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <xTaskResumeAll+0xd0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f5      	beq.n	8001c76 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c8a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001d34 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8001c8e:	4f24      	ldr	r7, [pc, #144]	; (8001d20 <xTaskResumeAll+0xd4>)
 8001c90:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001d38 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c94:	f8d9 3000 	ldr.w	r3, [r9]
 8001c98:	b9e3      	cbnz	r3, 8001cd4 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8001c9a:	b10c      	cbz	r4, 8001ca0 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8001c9c:	f7ff fda2 	bl	80017e4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001ca0:	4d20      	ldr	r5, [pc, #128]	; (8001d24 <xTaskResumeAll+0xd8>)
 8001ca2:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001ca4:	b144      	cbz	r4, 8001cb8 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8001ca6:	4e20      	ldr	r6, [pc, #128]	; (8001d28 <xTaskResumeAll+0xdc>)
 8001ca8:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8001caa:	f7ff ff3d 	bl	8001b28 <xTaskIncrementTick>
 8001cae:	b100      	cbz	r0, 8001cb2 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8001cb0:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001cb2:	3c01      	subs	r4, #1
 8001cb4:	d1f9      	bne.n	8001caa <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8001cb6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <xTaskResumeAll+0xdc>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0da      	beq.n	8001c76 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <xTaskResumeAll+0xe0>)
 8001cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	f3bf 8f4f 	dsb	sy
 8001ccc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001cd0:	2401      	movs	r4, #1
 8001cd2:	e7d1      	b.n	8001c78 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001cd4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8001cd8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001cda:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001cdc:	f104 0018 	add.w	r0, r4, #24
 8001ce0:	f7ff fb00 	bl	80012e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ce4:	4630      	mov	r0, r6
 8001ce6:	f7ff fafd 	bl	80012e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001cea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001cec:	6839      	ldr	r1, [r7, #0]
 8001cee:	2501      	movs	r5, #1
 8001cf0:	fa05 f302 	lsl.w	r3, r5, r2
 8001cf4:	2014      	movs	r0, #20
 8001cf6:	430b      	orrs	r3, r1
 8001cf8:	fb00 8002 	mla	r0, r0, r2, r8
 8001cfc:	4631      	mov	r1, r6
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	f7ff facd 	bl	800129e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <xTaskResumeAll+0xe4>)
 8001d06:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0c:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8001d0e:	bf24      	itt	cs
 8001d10:	4b05      	ldrcs	r3, [pc, #20]	; (8001d28 <xTaskResumeAll+0xdc>)
 8001d12:	601d      	strcs	r5, [r3, #0]
 8001d14:	e7be      	b.n	8001c94 <xTaskResumeAll+0x48>
 8001d16:	bf00      	nop
 8001d18:	20003d50 	.word	0x20003d50
 8001d1c:	20003d44 	.word	0x20003d44
 8001d20:	20003d58 	.word	0x20003d58
 8001d24:	20003d4c 	.word	0x20003d4c
 8001d28:	20003dd4 	.word	0x20003dd4
 8001d2c:	e000ed04 	.word	0xe000ed04
 8001d30:	20003cac 	.word	0x20003cac
 8001d34:	20003d90 	.word	0x20003d90
 8001d38:	20003cb8 	.word	0x20003cb8

08001d3c <vTaskDelay>:
	{
 8001d3c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001d3e:	b940      	cbnz	r0, 8001d52 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8001d40:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <vTaskDelay+0x40>)
 8001d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	f3bf 8f4f 	dsb	sy
 8001d4c:	f3bf 8f6f 	isb	sy
 8001d50:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <vTaskDelay+0x44>)
 8001d54:	6819      	ldr	r1, [r3, #0]
 8001d56:	b141      	cbz	r1, 8001d6a <vTaskDelay+0x2e>
 8001d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d5c:	f383 8811 	msr	BASEPRI, r3
 8001d60:	f3bf 8f6f 	isb	sy
 8001d64:	f3bf 8f4f 	dsb	sy
 8001d68:	e7fe      	b.n	8001d68 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001d6a:	f7ff fed5 	bl	8001b18 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001d6e:	f7ff fd4b 	bl	8001808 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001d72:	f7ff ff6b 	bl	8001c4c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001d76:	2800      	cmp	r0, #0
 8001d78:	d0e2      	beq.n	8001d40 <vTaskDelay+0x4>
 8001d7a:	bd08      	pop	{r3, pc}
 8001d7c:	e000ed04 	.word	0xe000ed04
 8001d80:	20003d50 	.word	0x20003d50

08001d84 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001d84:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <vTaskSwitchContext+0x60>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <vTaskSwitchContext+0x64>)
{
 8001d8a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001d8c:	b112      	cbz	r2, 8001d94 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8001d8e:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8001d94:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <vTaskSwitchContext+0x68>)
 8001d98:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	f1c3 031f 	rsb	r3, r3, #31
 8001da4:	2214      	movs	r2, #20
 8001da6:	4912      	ldr	r1, [pc, #72]	; (8001df0 <vTaskSwitchContext+0x6c>)
 8001da8:	435a      	muls	r2, r3
 8001daa:	1888      	adds	r0, r1, r2
 8001dac:	588c      	ldr	r4, [r1, r2]
 8001dae:	b944      	cbnz	r4, 8001dc2 <vTaskSwitchContext+0x3e>
	__asm volatile
 8001db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db4:	f383 8811 	msr	BASEPRI, r3
 8001db8:	f3bf 8f6f 	isb	sy
 8001dbc:	f3bf 8f4f 	dsb	sy
 8001dc0:	e7fe      	b.n	8001dc0 <vTaskSwitchContext+0x3c>
 8001dc2:	6844      	ldr	r4, [r0, #4]
 8001dc4:	3208      	adds	r2, #8
 8001dc6:	6864      	ldr	r4, [r4, #4]
 8001dc8:	6044      	str	r4, [r0, #4]
 8001dca:	440a      	add	r2, r1
 8001dcc:	4294      	cmp	r4, r2
 8001dce:	bf04      	itt	eq
 8001dd0:	6862      	ldreq	r2, [r4, #4]
 8001dd2:	6042      	streq	r2, [r0, #4]
 8001dd4:	2214      	movs	r2, #20
 8001dd6:	fb02 1303 	mla	r3, r2, r3, r1
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <vTaskSwitchContext+0x70>)
 8001de0:	e7d6      	b.n	8001d90 <vTaskSwitchContext+0xc>
 8001de2:	bf00      	nop
 8001de4:	20003d50 	.word	0x20003d50
 8001de8:	20003dd4 	.word	0x20003dd4
 8001dec:	20003d58 	.word	0x20003d58
 8001df0:	20003cb8 	.word	0x20003cb8
 8001df4:	20003cac 	.word	0x20003cac

08001df8 <ssd1306_draw_point>:

void ssd1306_draw_point(uint8_t chXpos, uint8_t chYpos, uint8_t chPoint)
{
	uint8_t chPos, chBx, chTemp = 0;
	
	if (chXpos > 127 || chYpos > 63) {
 8001df8:	0603      	lsls	r3, r0, #24
{
 8001dfa:	b510      	push	{r4, lr}
	if (chXpos > 127 || chYpos > 63) {
 8001dfc:	d412      	bmi.n	8001e24 <ssd1306_draw_point+0x2c>
 8001dfe:	293f      	cmp	r1, #63	; 0x3f
 8001e00:	d810      	bhi.n	8001e24 <ssd1306_draw_point+0x2c>
		return;
	}
	chPos = 7 - chYpos / 8; // 
 8001e02:	08cb      	lsrs	r3, r1, #3
	chBx = chYpos % 8;
	chTemp = 1 << (7 - chBx);
 8001e04:	f001 0107 	and.w	r1, r1, #7
 8001e08:	f1c1 0107 	rsb	r1, r1, #7
 8001e0c:	2401      	movs	r4, #1
 8001e0e:	408c      	lsls	r4, r1
 8001e10:	4906      	ldr	r1, [pc, #24]	; (8001e2c <ssd1306_draw_point+0x34>)
	chPos = 7 - chYpos / 8; // 
 8001e12:	f1c3 0307 	rsb	r3, r3, #7
 8001e16:	00c0      	lsls	r0, r0, #3
 8001e18:	b2db      	uxtb	r3, r3
	
	if (chPoint) {
		s_chDispalyBuffer[chXpos][chPos] |= chTemp;
 8001e1a:	4408      	add	r0, r1
 8001e1c:	5cc1      	ldrb	r1, [r0, r3]
	if (chPoint) {
 8001e1e:	b112      	cbz	r2, 8001e26 <ssd1306_draw_point+0x2e>
		s_chDispalyBuffer[chXpos][chPos] |= chTemp;
 8001e20:	4321      	orrs	r1, r4
		
	} else {
		s_chDispalyBuffer[chXpos][chPos] &= ~chTemp;
 8001e22:	54c1      	strb	r1, [r0, r3]
 8001e24:	bd10      	pop	{r4, pc}
 8001e26:	ea21 0104 	bic.w	r1, r1, r4
 8001e2a:	e7fa      	b.n	8001e22 <ssd1306_draw_point+0x2a>
 8001e2c:	20003dd8 	.word	0x20003dd8

08001e30 <ssd1306_display_char>:
  * @param  chSize: 
  * @param  chMode
  * @retval 
**/
void ssd1306_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint8_t chMode)
{      	
 8001e30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t i, j;
	uint8_t chTemp, chYpos0 = chYpos;
	
	chChr = chChr - ' ';				   
 8001e34:	f1a2 0820 	sub.w	r8, r2, #32
 8001e38:	4a1f      	ldr	r2, [pc, #124]	; (8001eb8 <ssd1306_display_char+0x88>)
 8001e3a:	fa5f f888 	uxtb.w	r8, r8
{      	
 8001e3e:	469b      	mov	fp, r3
 8001e40:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	eb02 1308 	add.w	r3, r2, r8, lsl #4
 8001e4a:	4a1c      	ldr	r2, [pc, #112]	; (8001ebc <ssd1306_display_char+0x8c>)
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8001e52:	4606      	mov	r6, r0
 8001e54:	4689      	mov	r9, r1
 8001e56:	eb02 0888 	add.w	r8, r2, r8, lsl #2
    for (i = 0; i < chSize; i ++) {   
 8001e5a:	460d      	mov	r5, r1
 8001e5c:	2700      	movs	r7, #0
 8001e5e:	45bb      	cmp	fp, r7
 8001e60:	d102      	bne.n	8001e68 <ssd1306_display_char+0x38>
				chXpos ++;
				break;
			}
		}  	 
    } 
}
 8001e62:	b003      	add	sp, #12
 8001e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (chSize == 12) {
 8001e68:	f1bb 0f0c 	cmp.w	fp, #12
 8001e6c:	bf16      	itet	ne
 8001e6e:	9b01      	ldrne	r3, [sp, #4]
 8001e70:	f818 4007 	ldrbeq.w	r4, [r8, r7]
 8001e74:	5ddc      	ldrbne	r4, [r3, r7]
			if (chMode) {
 8001e76:	9b00      	ldr	r3, [sp, #0]
 8001e78:	b90b      	cbnz	r3, 8001e7e <ssd1306_display_char+0x4e>
				chTemp = ~c_chFont1608[chChr][i];
 8001e7a:	43e4      	mvns	r4, r4
 8001e7c:	b2e4      	uxtb	r4, r4
 8001e7e:	f105 0a08 	add.w	sl, r5, #8
 8001e82:	fa5f fa8a 	uxtb.w	sl, sl
			if (chTemp & 0x80) {
 8001e86:	0623      	lsls	r3, r4, #24
				ssd1306_draw_point(chXpos, chYpos, 0);
 8001e88:	4629      	mov	r1, r5
			chYpos ++;
 8001e8a:	f105 0501 	add.w	r5, r5, #1
				ssd1306_draw_point(chXpos, chYpos, 1);
 8001e8e:	bf4c      	ite	mi
 8001e90:	2201      	movmi	r2, #1
				ssd1306_draw_point(chXpos, chYpos, 0);
 8001e92:	2200      	movpl	r2, #0
 8001e94:	4630      	mov	r0, r6
			chYpos ++;
 8001e96:	b2ed      	uxtb	r5, r5
				ssd1306_draw_point(chXpos, chYpos, 0);
 8001e98:	f7ff ffae 	bl	8001df8 <ssd1306_draw_point>
			if ((chYpos - chYpos0) == chSize) {
 8001e9c:	eba5 0209 	sub.w	r2, r5, r9
			chTemp <<= 1;
 8001ea0:	0064      	lsls	r4, r4, #1
			if ((chYpos - chYpos0) == chSize) {
 8001ea2:	455a      	cmp	r2, fp
			chTemp <<= 1;
 8001ea4:	b2e4      	uxtb	r4, r4
			if ((chYpos - chYpos0) == chSize) {
 8001ea6:	d104      	bne.n	8001eb2 <ssd1306_display_char+0x82>
				chXpos ++;
 8001ea8:	3601      	adds	r6, #1
 8001eaa:	b2f6      	uxtb	r6, r6
				chYpos = chYpos0;
 8001eac:	464d      	mov	r5, r9
 8001eae:	3701      	adds	r7, #1
 8001eb0:	e7d5      	b.n	8001e5e <ssd1306_display_char+0x2e>
        for (j = 0; j < 8; j ++) {
 8001eb2:	45aa      	cmp	sl, r5
 8001eb4:	d1e7      	bne.n	8001e86 <ssd1306_display_char+0x56>
 8001eb6:	e7fa      	b.n	8001eae <ssd1306_display_char+0x7e>
 8001eb8:	08003451 	.word	0x08003451
 8001ebc:	08002fdd 	.word	0x08002fdd

08001ec0 <SSD1306_CS_SET>:
}

///moje
void SSD1306_CS_SET()
{
	HAL_GPIO_WritePin(SSD1306_CS_GPIO,SSD1306_CS_PIN,GPIO_PIN_SET);
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	2104      	movs	r1, #4
 8001ec4:	4801      	ldr	r0, [pc, #4]	; (8001ecc <SSD1306_CS_SET+0xc>)
 8001ec6:	f7fe bc9b 	b.w	8000800 <HAL_GPIO_WritePin>
 8001eca:	bf00      	nop
 8001ecc:	40021800 	.word	0x40021800

08001ed0 <SSD1306_CS_CLR>:
}
void SSD1306_CS_CLR()
{
	HAL_GPIO_WritePin(SSD1306_CS_GPIO,SSD1306_CS_PIN,GPIO_PIN_RESET);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2104      	movs	r1, #4
 8001ed4:	4801      	ldr	r0, [pc, #4]	; (8001edc <SSD1306_CS_CLR+0xc>)
 8001ed6:	f7fe bc93 	b.w	8000800 <HAL_GPIO_WritePin>
 8001eda:	bf00      	nop
 8001edc:	40021800 	.word	0x40021800

08001ee0 <SSD1306_RES_SET>:
}

void SSD1306_RES_SET()
{
	HAL_GPIO_WritePin(SSD1306_RES_GPIO,SSD1306_RES_PIN,GPIO_PIN_SET);
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ee6:	4801      	ldr	r0, [pc, #4]	; (8001eec <SSD1306_RES_SET+0xc>)
 8001ee8:	f7fe bc8a 	b.w	8000800 <HAL_GPIO_WritePin>
 8001eec:	40020800 	.word	0x40020800

08001ef0 <SSD1306_DC_SET>:
}


void SSD1306_DC_SET()
{
	HAL_GPIO_WritePin(SSD1306_DC_GPIO,SSD1306_DC_PIN,GPIO_PIN_SET);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	2108      	movs	r1, #8
 8001ef4:	4801      	ldr	r0, [pc, #4]	; (8001efc <SSD1306_DC_SET+0xc>)
 8001ef6:	f7fe bc83 	b.w	8000800 <HAL_GPIO_WritePin>
 8001efa:	bf00      	nop
 8001efc:	40021800 	.word	0x40021800

08001f00 <SSD1306_DC_CLR>:
}
void SSD1306_DC_CLR()
{
	HAL_GPIO_WritePin(SSD1306_DC_GPIO,SSD1306_DC_PIN,GPIO_PIN_RESET);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2108      	movs	r1, #8
 8001f04:	4801      	ldr	r0, [pc, #4]	; (8001f0c <SSD1306_DC_CLR+0xc>)
 8001f06:	f7fe bc7b 	b.w	8000800 <HAL_GPIO_WritePin>
 8001f0a:	bf00      	nop
 8001f0c:	40021800 	.word	0x40021800

08001f10 <SSD1306_WRITE_BYTE>:
{
	HAL_GPIO_WritePin(SSD1306_DIN_GPIO,SSD1306_DIN_PIN,GPIO_PIN_RESET);
}

void SSD1306_WRITE_BYTE( uint8_t DATA)
{
 8001f10:	b507      	push	{r0, r1, r2, lr}
 8001f12:	a902      	add	r1, sp, #8
	HAL_SPI_Transmit(&hspi3,&DATA,1,1000);
 8001f14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8001f18:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_SPI_Transmit(&hspi3,&DATA,1,1000);
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	4803      	ldr	r0, [pc, #12]	; (8001f2c <SSD1306_WRITE_BYTE+0x1c>)
 8001f20:	f7fe ffa9 	bl	8000e76 <HAL_SPI_Transmit>

}
 8001f24:	b003      	add	sp, #12
 8001f26:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f2a:	bf00      	nop
 8001f2c:	200041ec 	.word	0x200041ec

08001f30 <ssd1306_write_byte>:
{
 8001f30:	b538      	push	{r3, r4, r5, lr}
 8001f32:	460d      	mov	r5, r1
 8001f34:	4604      	mov	r4, r0
	SSD1306_CS_CLR();
 8001f36:	f7ff ffcb 	bl	8001ed0 <SSD1306_CS_CLR>
	if (chCmd) {
 8001f3a:	b155      	cbz	r5, 8001f52 <ssd1306_write_byte+0x22>
		SSD1306_DC_SET();
 8001f3c:	f7ff ffd8 	bl	8001ef0 <SSD1306_DC_SET>
	SSD1306_WRITE_BYTE(chData);
 8001f40:	4620      	mov	r0, r4
 8001f42:	f7ff ffe5 	bl	8001f10 <SSD1306_WRITE_BYTE>
	SSD1306_DC_SET();
 8001f46:	f7ff ffd3 	bl	8001ef0 <SSD1306_DC_SET>
}   	  
 8001f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	SSD1306_CS_SET();
 8001f4e:	f7ff bfb7 	b.w	8001ec0 <SSD1306_CS_SET>
		SSD1306_DC_CLR();
 8001f52:	f7ff ffd5 	bl	8001f00 <SSD1306_DC_CLR>
 8001f56:	e7f3      	b.n	8001f40 <ssd1306_write_byte+0x10>

08001f58 <ssd1306_refresh_gram>:
{
 8001f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			ssd1306_write_byte(s_chDispalyBuffer[j][i], SSD1306_DAT); 
 8001f5a:	4e0f      	ldr	r6, [pc, #60]	; (8001f98 <ssd1306_refresh_gram+0x40>)
{
 8001f5c:	2400      	movs	r4, #0
		ssd1306_write_byte(0xB0 + i, SSD1306_CMD);    
 8001f5e:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 8001f62:	2100      	movs	r1, #0
 8001f64:	b2c0      	uxtb	r0, r0
 8001f66:	f7ff ffe3 	bl	8001f30 <ssd1306_write_byte>
		__SET_COL_START_ADDR();      
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	2002      	movs	r0, #2
 8001f6e:	f7ff ffdf 	bl	8001f30 <ssd1306_write_byte>
 8001f72:	2100      	movs	r1, #0
 8001f74:	2010      	movs	r0, #16
 8001f76:	f7ff ffdb 	bl	8001f30 <ssd1306_write_byte>
 8001f7a:	2500      	movs	r5, #0
			ssd1306_write_byte(s_chDispalyBuffer[j][i], SSD1306_DAT); 
 8001f7c:	1937      	adds	r7, r6, r4
 8001f7e:	f817 0035 	ldrb.w	r0, [r7, r5, lsl #3]
 8001f82:	2101      	movs	r1, #1
 8001f84:	3501      	adds	r5, #1
 8001f86:	f7ff ffd3 	bl	8001f30 <ssd1306_write_byte>
		for (j = 0; j < 128; j ++) {
 8001f8a:	2d80      	cmp	r5, #128	; 0x80
 8001f8c:	d1f7      	bne.n	8001f7e <ssd1306_refresh_gram+0x26>
 8001f8e:	3401      	adds	r4, #1
	for (i = 0; i < 8; i ++) {  
 8001f90:	2c08      	cmp	r4, #8
 8001f92:	d1e4      	bne.n	8001f5e <ssd1306_refresh_gram+0x6>
}
 8001f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20003dd8 	.word	0x20003dd8

08001f9c <ssd1306_clear_screen>:
{ 
 8001f9c:	b570      	push	{r4, r5, r6, lr}
			s_chDispalyBuffer[j][i] = chFill;
 8001f9e:	4e0f      	ldr	r6, [pc, #60]	; (8001fdc <ssd1306_clear_screen+0x40>)
{ 
 8001fa0:	4605      	mov	r5, r0
 8001fa2:	2400      	movs	r4, #0
		ssd1306_write_byte(0xB0 + i, SSD1306_CMD);
 8001fa4:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 8001fa8:	2100      	movs	r1, #0
 8001faa:	b2c0      	uxtb	r0, r0
 8001fac:	f7ff ffc0 	bl	8001f30 <ssd1306_write_byte>
		__SET_COL_START_ADDR();
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2002      	movs	r0, #2
 8001fb4:	f7ff ffbc 	bl	8001f30 <ssd1306_write_byte>
 8001fb8:	2100      	movs	r1, #0
 8001fba:	2010      	movs	r0, #16
 8001fbc:	f7ff ffb8 	bl	8001f30 <ssd1306_write_byte>
 8001fc0:	2300      	movs	r3, #0
			s_chDispalyBuffer[j][i] = chFill;
 8001fc2:	1932      	adds	r2, r6, r4
 8001fc4:	f802 5033 	strb.w	r5, [r2, r3, lsl #3]
 8001fc8:	3301      	adds	r3, #1
		for (j = 0; j < 128; j ++) {
 8001fca:	2b80      	cmp	r3, #128	; 0x80
 8001fcc:	d1fa      	bne.n	8001fc4 <ssd1306_clear_screen+0x28>
 8001fce:	3401      	adds	r4, #1
	for (i = 0; i < 8; i ++) {
 8001fd0:	2c08      	cmp	r4, #8
 8001fd2:	d1e7      	bne.n	8001fa4 <ssd1306_clear_screen+0x8>
}
 8001fd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ssd1306_refresh_gram();
 8001fd8:	f7ff bfbe 	b.w	8001f58 <ssd1306_refresh_gram>
 8001fdc:	20003dd8 	.word	0x20003dd8

08001fe0 <ssd1306_display_string>:
{
 8001fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if (chXpos > (SSD1306_WIDTH - chSize / 2)) {
 8001fe4:	ea4f 0853 	mov.w	r8, r3, lsr #1
{
 8001fe8:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
 8001fec:	4604      	mov	r4, r0
 8001fee:	460d      	mov	r5, r1
 8001ff0:	4617      	mov	r7, r2
 8001ff2:	461e      	mov	r6, r3
        if (chXpos > (SSD1306_WIDTH - chSize / 2)) {
 8001ff4:	f1c8 0980 	rsb	r9, r8, #128	; 0x80
			if (chYpos > (SSD1306_HEIGHT - chSize)) {
 8001ff8:	f1c3 0b40 	rsb	fp, r3, #64	; 0x40
    while (*pchString != '\0') {       
 8001ffc:	783b      	ldrb	r3, [r7, #0]
 8001ffe:	b913      	cbnz	r3, 8002006 <ssd1306_display_string+0x26>
}
 8002000:	b003      	add	sp, #12
 8002002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (chXpos > (SSD1306_WIDTH - chSize / 2)) {
 8002006:	454c      	cmp	r4, r9
 8002008:	dd08      	ble.n	800201c <ssd1306_display_string+0x3c>
			chYpos += chSize;
 800200a:	4435      	add	r5, r6
 800200c:	b2ed      	uxtb	r5, r5
			if (chYpos > (SSD1306_HEIGHT - chSize)) {
 800200e:	455d      	cmp	r5, fp
 8002010:	dd03      	ble.n	800201a <ssd1306_display_string+0x3a>
				ssd1306_clear_screen(0x00);
 8002012:	2000      	movs	r0, #0
 8002014:	f7ff ffc2 	bl	8001f9c <ssd1306_clear_screen>
				chYpos = chXpos = 0;
 8002018:	2500      	movs	r5, #0
			chXpos = 0;
 800201a:	2400      	movs	r4, #0
        ssd1306_display_char(chXpos, chYpos, *pchString, chSize, chMode);
 800201c:	f817 2b01 	ldrb.w	r2, [r7], #1
 8002020:	f8cd a000 	str.w	sl, [sp]
 8002024:	4620      	mov	r0, r4
 8002026:	4633      	mov	r3, r6
 8002028:	4629      	mov	r1, r5
        chXpos += chSize / 2;
 800202a:	4444      	add	r4, r8
        ssd1306_display_char(chXpos, chYpos, *pchString, chSize, chMode);
 800202c:	f7ff ff00 	bl	8001e30 <ssd1306_display_char>
        chXpos += chSize / 2;
 8002030:	b2e4      	uxtb	r4, r4
 8002032:	e7e3      	b.n	8001ffc <ssd1306_display_string+0x1c>

08002034 <ssd1306_init>:
{
 8002034:	b508      	push	{r3, lr}
	SSD1306_CS_SET();   //CS set
 8002036:	f7ff ff43 	bl	8001ec0 <SSD1306_CS_SET>
	SSD1306_DC_CLR();   //D/C reset
 800203a:	f7ff ff61 	bl	8001f00 <SSD1306_DC_CLR>
	SSD1306_RES_SET();  //RES set
 800203e:	f7ff ff4f 	bl	8001ee0 <SSD1306_RES_SET>
	ssd1306_write_byte(0xAE, SSD1306_CMD);//--turn off oled panel
 8002042:	2100      	movs	r1, #0
 8002044:	20ae      	movs	r0, #174	; 0xae
 8002046:	f7ff ff73 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0x00, SSD1306_CMD);//---set low column address
 800204a:	2100      	movs	r1, #0
 800204c:	4608      	mov	r0, r1
 800204e:	f7ff ff6f 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0x10, SSD1306_CMD);//---set high column address
 8002052:	2100      	movs	r1, #0
 8002054:	2010      	movs	r0, #16
 8002056:	f7ff ff6b 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0x40, SSD1306_CMD);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 800205a:	2100      	movs	r1, #0
 800205c:	2040      	movs	r0, #64	; 0x40
 800205e:	f7ff ff67 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0x81, SSD1306_CMD);//--set contrast control register
 8002062:	2100      	movs	r1, #0
 8002064:	2081      	movs	r0, #129	; 0x81
 8002066:	f7ff ff63 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0xCF, SSD1306_CMD);// Set SEG Output Current Brightness
 800206a:	2100      	movs	r1, #0
 800206c:	20cf      	movs	r0, #207	; 0xcf
 800206e:	f7ff ff5f 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0xA1, SSD1306_CMD);//--Set SEG/Column Mapping     
 8002072:	2100      	movs	r1, #0
 8002074:	20a1      	movs	r0, #161	; 0xa1
 8002076:	f7ff ff5b 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0xC0, SSD1306_CMD);//Set COM/Row Scan Direction   
 800207a:	2100      	movs	r1, #0
 800207c:	20c0      	movs	r0, #192	; 0xc0
 800207e:	f7ff ff57 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0xA6, SSD1306_CMD);//--set normal display
 8002082:	2100      	movs	r1, #0
 8002084:	20a6      	movs	r0, #166	; 0xa6
 8002086:	f7ff ff53 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0xA8, SSD1306_CMD);//--set multiplex ratio(1 to 64)
 800208a:	2100      	movs	r1, #0
 800208c:	20a8      	movs	r0, #168	; 0xa8
 800208e:	f7ff ff4f 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0x3f, SSD1306_CMD);//--1/64 duty
 8002092:	2100      	movs	r1, #0
 8002094:	203f      	movs	r0, #63	; 0x3f
 8002096:	f7ff ff4b 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0xD3, SSD1306_CMD);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 800209a:	2100      	movs	r1, #0
 800209c:	20d3      	movs	r0, #211	; 0xd3
 800209e:	f7ff ff47 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0x00, SSD1306_CMD);//-not offset
 80020a2:	2100      	movs	r1, #0
 80020a4:	4608      	mov	r0, r1
 80020a6:	f7ff ff43 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0xd5, SSD1306_CMD);//--set display clock divide ratio/oscillator frequency
 80020aa:	2100      	movs	r1, #0
 80020ac:	20d5      	movs	r0, #213	; 0xd5
 80020ae:	f7ff ff3f 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0x80, SSD1306_CMD);//--set divide ratio, Set Clock as 100 Frames/Sec
 80020b2:	2100      	movs	r1, #0
 80020b4:	2080      	movs	r0, #128	; 0x80
 80020b6:	f7ff ff3b 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0xD9, SSD1306_CMD);//--set pre-charge period
 80020ba:	2100      	movs	r1, #0
 80020bc:	20d9      	movs	r0, #217	; 0xd9
 80020be:	f7ff ff37 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0xF1, SSD1306_CMD);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 80020c2:	2100      	movs	r1, #0
 80020c4:	20f1      	movs	r0, #241	; 0xf1
 80020c6:	f7ff ff33 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0xDA, SSD1306_CMD);//--set com pins hardware configuration
 80020ca:	2100      	movs	r1, #0
 80020cc:	20da      	movs	r0, #218	; 0xda
 80020ce:	f7ff ff2f 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0x12, SSD1306_CMD);
 80020d2:	2100      	movs	r1, #0
 80020d4:	2012      	movs	r0, #18
 80020d6:	f7ff ff2b 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0xDB, SSD1306_CMD);//--set vcomh
 80020da:	2100      	movs	r1, #0
 80020dc:	20db      	movs	r0, #219	; 0xdb
 80020de:	f7ff ff27 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0x40, SSD1306_CMD);//Set VCOM Deselect Level
 80020e2:	2100      	movs	r1, #0
 80020e4:	2040      	movs	r0, #64	; 0x40
 80020e6:	f7ff ff23 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0x20, SSD1306_CMD);//-Set Page Addressing Mode (0x00/0x01/0x02)
 80020ea:	2100      	movs	r1, #0
 80020ec:	2020      	movs	r0, #32
 80020ee:	f7ff ff1f 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0x02, SSD1306_CMD);//
 80020f2:	2100      	movs	r1, #0
 80020f4:	2002      	movs	r0, #2
 80020f6:	f7ff ff1b 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0x8D, SSD1306_CMD);//--set Charge Pump enable/disable
 80020fa:	2100      	movs	r1, #0
 80020fc:	208d      	movs	r0, #141	; 0x8d
 80020fe:	f7ff ff17 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0x14, SSD1306_CMD);//--set(0x10) disable
 8002102:	2100      	movs	r1, #0
 8002104:	2014      	movs	r0, #20
 8002106:	f7ff ff13 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0xA4, SSD1306_CMD);// Disable Entire Display On (0xa4/0xa5)
 800210a:	2100      	movs	r1, #0
 800210c:	20a4      	movs	r0, #164	; 0xa4
 800210e:	f7ff ff0f 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0xA6, SSD1306_CMD);// Disable Inverse Display On (0xa6/a7) 
 8002112:	2100      	movs	r1, #0
 8002114:	20a6      	movs	r0, #166	; 0xa6
 8002116:	f7ff ff0b 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_write_byte(0xAF, SSD1306_CMD);//--turn on oled panel
 800211a:	20af      	movs	r0, #175	; 0xaf
 800211c:	2100      	movs	r1, #0
 800211e:	f7ff ff07 	bl	8001f30 <ssd1306_write_byte>
	ssd1306_clear_screen(0x00);
 8002122:	2000      	movs	r0, #0
}
 8002124:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ssd1306_clear_screen(0x00);
 8002128:	f7ff bf38 	b.w	8001f9c <ssd1306_clear_screen>

0800212c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 800212c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			printf("watek-1\n");
			ssd1306_display_string(10, 32, (uint8_t *) "watek-> 1", 16, 1);
			ssd1306_refresh_gram();
			i = 1;
		} else {
			printf("watek-2\n");
 8002130:	4e13      	ldr	r6, [pc, #76]	; (8002180 <StartDefaultTask+0x54>)
			ssd1306_display_string(10, 32, (uint8_t *) "watek-> 2", 16, 1);
 8002132:	4f14      	ldr	r7, [pc, #80]	; (8002184 <StartDefaultTask+0x58>)
			printf("watek-1\n");
 8002134:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800218c <StartDefaultTask+0x60>
	int i = 0;
 8002138:	2400      	movs	r4, #0
 800213a:	2501      	movs	r5, #1
		if (i == 0) {
 800213c:	b98c      	cbnz	r4, 8002162 <StartDefaultTask+0x36>
			printf("watek-1\n");
 800213e:	4640      	mov	r0, r8
 8002140:	f000 fb22 	bl	8002788 <puts>
			ssd1306_display_string(10, 32, (uint8_t *) "watek-> 1", 16, 1);
 8002144:	2310      	movs	r3, #16
 8002146:	4a10      	ldr	r2, [pc, #64]	; (8002188 <StartDefaultTask+0x5c>)
 8002148:	9500      	str	r5, [sp, #0]
 800214a:	2120      	movs	r1, #32
 800214c:	200a      	movs	r0, #10
 800214e:	f7ff ff47 	bl	8001fe0 <ssd1306_display_string>
			ssd1306_refresh_gram();
 8002152:	f7ff ff01 	bl	8001f58 <ssd1306_refresh_gram>
			i = 1;
 8002156:	462c      	mov	r4, r5
			ssd1306_refresh_gram();
			i = 0;
		}

		osDelay(1000);
 8002158:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800215c:	f7ff f889 	bl	8001272 <osDelay>
		if (i == 0) {
 8002160:	e7eb      	b.n	800213a <StartDefaultTask+0xe>
			printf("watek-2\n");
 8002162:	4630      	mov	r0, r6
 8002164:	f000 fb10 	bl	8002788 <puts>
			ssd1306_display_string(10, 32, (uint8_t *) "watek-> 2", 16, 1);
 8002168:	2310      	movs	r3, #16
 800216a:	463a      	mov	r2, r7
 800216c:	2120      	movs	r1, #32
 800216e:	200a      	movs	r0, #10
 8002170:	9500      	str	r5, [sp, #0]
 8002172:	f7ff ff35 	bl	8001fe0 <ssd1306_display_string>
			i = 0;
 8002176:	2400      	movs	r4, #0
			ssd1306_refresh_gram();
 8002178:	f7ff feee 	bl	8001f58 <ssd1306_refresh_gram>
 800217c:	e7ec      	b.n	8002158 <StartDefaultTask+0x2c>
 800217e:	bf00      	nop
 8002180:	08003a53 	.word	0x08003a53
 8002184:	08003a5b 	.word	0x08003a5b
 8002188:	08003a49 	.word	0x08003a49
 800218c:	08003a41 	.word	0x08003a41

08002190 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8002190:	b530      	push	{r4, r5, lr}
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002192:	4d07      	ldr	r5, [pc, #28]	; (80021b0 <MX_FREERTOS_Init+0x20>)
 8002194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 8002196:	b087      	sub	sp, #28
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002198:	ac01      	add	r4, sp, #4
 800219a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800219c:	682b      	ldr	r3, [r5, #0]
 800219e:	6023      	str	r3, [r4, #0]
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80021a0:	2100      	movs	r1, #0
 80021a2:	a801      	add	r0, sp, #4
 80021a4:	f7ff f84d 	bl	8001242 <osThreadCreate>
 80021a8:	4b02      	ldr	r3, [pc, #8]	; (80021b4 <MX_FREERTOS_Init+0x24>)
 80021aa:	6018      	str	r0, [r3, #0]
}
 80021ac:	b007      	add	sp, #28
 80021ae:	bd30      	pop	{r4, r5, pc}
 80021b0:	08002fc4 	.word	0x08002fc4
 80021b4:	200041e8 	.word	0x200041e8

080021b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021b8:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ba:	2214      	movs	r2, #20
{
 80021bc:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021be:	eb0d 0002 	add.w	r0, sp, r2
 80021c2:	2100      	movs	r1, #0
 80021c4:	f000 fa7c 	bl	80026c0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021c8:	2400      	movs	r4, #0
 80021ca:	4b26      	ldr	r3, [pc, #152]	; (8002264 <MX_GPIO_Init+0xac>)
 80021cc:	9401      	str	r4, [sp, #4]
 80021ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OLED_CS_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 80021d0:	4f25      	ldr	r7, [pc, #148]	; (8002268 <MX_GPIO_Init+0xb0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, GPIO_PIN_RESET);
 80021d2:	4d26      	ldr	r5, [pc, #152]	; (800226c <MX_GPIO_Init+0xb4>)
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021d8:	631a      	str	r2, [r3, #48]	; 0x30
 80021da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021dc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80021e0:	9201      	str	r2, [sp, #4]
 80021e2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e4:	9402      	str	r4, [sp, #8]
 80021e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021e8:	f042 0204 	orr.w	r2, r2, #4
 80021ec:	631a      	str	r2, [r3, #48]	; 0x30
 80021ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021f0:	f002 0204 	and.w	r2, r2, #4
 80021f4:	9202      	str	r2, [sp, #8]
 80021f6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f8:	9403      	str	r4, [sp, #12]
 80021fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021fc:	f042 0201 	orr.w	r2, r2, #1
 8002200:	631a      	str	r2, [r3, #48]	; 0x30
 8002202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002204:	f002 0201 	and.w	r2, r2, #1
 8002208:	9203      	str	r2, [sp, #12]
 800220a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800220c:	9404      	str	r4, [sp, #16]
 800220e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002210:	f042 0202 	orr.w	r2, r2, #2
 8002214:	631a      	str	r2, [r3, #48]	; 0x30
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOG, OLED_CS_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 800221e:	4622      	mov	r2, r4
 8002220:	4638      	mov	r0, r7
 8002222:	210c      	movs	r1, #12
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002224:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOG, OLED_CS_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 8002226:	f7fe faeb 	bl	8000800 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, GPIO_PIN_RESET);
 800222a:	4622      	mov	r2, r4
 800222c:	4628      	mov	r0, r5
 800222e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002232:	f7fe fae5 	bl	8000800 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002236:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_DC_Pin;
 8002238:	230c      	movs	r3, #12
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800223a:	a905      	add	r1, sp, #20
 800223c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_DC_Pin;
 800223e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002240:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002244:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002246:	f7fe f9ef 	bl	8000628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RES_Pin;
 800224a:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OLED_RES_GPIO_Port, &GPIO_InitStruct);
 800224e:	a905      	add	r1, sp, #20
 8002250:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = OLED_RES_Pin;
 8002252:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002254:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002258:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(OLED_RES_GPIO_Port, &GPIO_InitStruct);
 800225a:	f7fe f9e5 	bl	8000628 <HAL_GPIO_Init>

}
 800225e:	b00b      	add	sp, #44	; 0x2c
 8002260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800
 8002268:	40021800 	.word	0x40021800
 800226c:	40020800 	.word	0x40020800

08002270 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002270:	b530      	push	{r4, r5, lr}
 8002272:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002274:	2230      	movs	r2, #48	; 0x30
 8002276:	2100      	movs	r1, #0
 8002278:	a808      	add	r0, sp, #32
 800227a:	f000 fa21 	bl	80026c0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800227e:	2100      	movs	r1, #0
 8002280:	2214      	movs	r2, #20
 8002282:	a803      	add	r0, sp, #12
 8002284:	f000 fa1c 	bl	80026c0 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8002288:	2400      	movs	r4, #0
 800228a:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <SystemClock_Config+0x90>)
 800228c:	9401      	str	r4, [sp, #4]
 800228e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002290:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229c:	9301      	str	r3, [sp, #4]
 800229e:	9b01      	ldr	r3, [sp, #4]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022a0:	4b18      	ldr	r3, [pc, #96]	; (8002304 <SystemClock_Config+0x94>)
 80022a2:	9402      	str	r4, [sp, #8]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022ae:	940f      	str	r4, [sp, #60]	; 0x3c
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022b4:	9302      	str	r3, [sp, #8]
 80022b6:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022b8:	2301      	movs	r3, #1
 80022ba:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022bc:	2310      	movs	r3, #16
 80022be:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLM = 8;
 80022c0:	2308      	movs	r3, #8
 80022c2:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 80022c4:	23b4      	movs	r3, #180	; 0xb4
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022c6:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLN = 180;
 80022c8:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 4;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80022ca:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80022cc:	2304      	movs	r3, #4
 80022ce:	9313      	str	r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022d0:	9508      	str	r5, [sp, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022d2:	950e      	str	r5, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022d4:	9512      	str	r5, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80022d6:	f7fe fad5 	bl	8000884 <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80022da:	f7fe fa97 	bl	800080c <HAL_PWREx_EnableOverDrive>
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80022de:	230f      	movs	r3, #15
 80022e0:	9303      	str	r3, [sp, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022e6:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80022e8:	2105      	movs	r1, #5
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80022ee:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022f0:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022f2:	9405      	str	r4, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022f4:	9307      	str	r3, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80022f6:	f7fe fc75 	bl	8000be4 <HAL_RCC_ClockConfig>
		Error_Handler();
	}
}
 80022fa:	b015      	add	sp, #84	; 0x54
 80022fc:	bd30      	pop	{r4, r5, pc}
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800
 8002304:	40007000 	.word	0x40007000

08002308 <main>:
int main(void) {
 8002308:	b507      	push	{r0, r1, r2, lr}
	HAL_Init();
 800230a:	f7fe f8f9 	bl	8000500 <HAL_Init>
	SystemClock_Config();
 800230e:	f7ff ffaf 	bl	8002270 <SystemClock_Config>
	MX_GPIO_Init();
 8002312:	f7ff ff51 	bl	80021b8 <MX_GPIO_Init>
	MX_SPI3_Init();
 8002316:	f000 f847 	bl	80023a8 <MX_SPI3_Init>
	ssd1306_init();
 800231a:	f7ff fe8b 	bl	8002034 <ssd1306_init>
	ssd1306_clear_screen(0xFF);
 800231e:	20ff      	movs	r0, #255	; 0xff
	ssd1306_display_string(0, 0, (uint8_t *) "System Init OK", 16, 0);
 8002320:	2400      	movs	r4, #0
	ssd1306_clear_screen(0xFF);
 8002322:	f7ff fe3b 	bl	8001f9c <ssd1306_clear_screen>
	ssd1306_clear_screen(0x00);
 8002326:	2000      	movs	r0, #0
 8002328:	f7ff fe38 	bl	8001f9c <ssd1306_clear_screen>
	ssd1306_display_string(0, 0, (uint8_t *) "System Init OK", 16, 0);
 800232c:	2310      	movs	r3, #16
 800232e:	4a14      	ldr	r2, [pc, #80]	; (8002380 <main+0x78>)
 8002330:	9400      	str	r4, [sp, #0]
 8002332:	4621      	mov	r1, r4
 8002334:	4620      	mov	r0, r4
 8002336:	f7ff fe53 	bl	8001fe0 <ssd1306_display_string>
	ssd1306_refresh_gram();
 800233a:	f7ff fe0d 	bl	8001f58 <ssd1306_refresh_gram>
	HAL_Delay(2000);
 800233e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002342:	f7fe f909 	bl	8000558 <HAL_Delay>
	ssd1306_display_string(0, 0, (uint8_t *) "Praca Magisterska", 14, 1);
 8002346:	2501      	movs	r5, #1
	ssd1306_clear_screen(0x00);
 8002348:	4620      	mov	r0, r4
 800234a:	f7ff fe27 	bl	8001f9c <ssd1306_clear_screen>
	ssd1306_display_string(0, 0, (uint8_t *) "Praca Magisterska", 14, 1);
 800234e:	230e      	movs	r3, #14
 8002350:	4a0c      	ldr	r2, [pc, #48]	; (8002384 <main+0x7c>)
 8002352:	9500      	str	r5, [sp, #0]
 8002354:	4621      	mov	r1, r4
 8002356:	4620      	mov	r0, r4
 8002358:	f7ff fe42 	bl	8001fe0 <ssd1306_display_string>
	ssd1306_display_string(10, 16, (uint8_t *) "Kamil Karpiak", 16, 1);
 800235c:	2310      	movs	r3, #16
 800235e:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <main+0x80>)
 8002360:	9500      	str	r5, [sp, #0]
 8002362:	4619      	mov	r1, r3
 8002364:	200a      	movs	r0, #10
 8002366:	f7ff fe3b 	bl	8001fe0 <ssd1306_display_string>
	ssd1306_refresh_gram();
 800236a:	f7ff fdf5 	bl	8001f58 <ssd1306_refresh_gram>
	printf("start\n");
 800236e:	4807      	ldr	r0, [pc, #28]	; (800238c <main+0x84>)
 8002370:	f000 fa0a 	bl	8002788 <puts>
	MX_FREERTOS_Init();
 8002374:	f7ff ff0c 	bl	8002190 <MX_FREERTOS_Init>
	osKernelStart();
 8002378:	f7fe ff5e 	bl	8001238 <osKernelStart>
 800237c:	e7fe      	b.n	800237c <main+0x74>
 800237e:	bf00      	nop
 8002380:	08003a71 	.word	0x08003a71
 8002384:	08003a80 	.word	0x08003a80
 8002388:	08003a92 	.word	0x08003a92
 800238c:	08003aa0 	.word	0x08003aa0

08002390 <HAL_TIM_PeriodElapsedCallback>:
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8002390:	6802      	ldr	r2, [r0, #0]
 8002392:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002394:	429a      	cmp	r2, r3
 8002396:	d101      	bne.n	800239c <HAL_TIM_PeriodElapsedCallback+0xc>
		HAL_IncTick();
 8002398:	f7fe b8cc 	b.w	8000534 <HAL_IncTick>
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40010000 	.word	0x40010000

080023a4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80023a4:	4770      	bx	lr
	...

080023a8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80023a8:	b508      	push	{r3, lr}

  hspi3.Instance = SPI3;
 80023aa:	480e      	ldr	r0, [pc, #56]	; (80023e4 <MX_SPI3_Init+0x3c>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80023ac:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <MX_SPI3_Init+0x40>)
 80023ae:	f44f 7e82 	mov.w	lr, #260	; 0x104
 80023b2:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80023b6:	2300      	movs	r3, #0
 80023b8:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80023ba:	60c3      	str	r3, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023bc:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023be:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80023c0:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023c4:	61c3      	str	r3, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023c6:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80023c8:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ca:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80023cc:	230a      	movs	r3, #10
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80023ce:	6182      	str	r2, [r0, #24]
  hspi3.Init.CRCPolynomial = 10;
 80023d0:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80023d2:	f7fe fd13 	bl	8000dfc <HAL_SPI_Init>
 80023d6:	b118      	cbz	r0, 80023e0 <MX_SPI3_Init+0x38>
  {
    Error_Handler();
  }

}
 80023d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80023dc:	f7ff bfe2 	b.w	80023a4 <Error_Handler>
 80023e0:	bd08      	pop	{r3, pc}
 80023e2:	bf00      	nop
 80023e4:	200041ec 	.word	0x200041ec
 80023e8:	40003c00 	.word	0x40003c00

080023ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023ec:	b510      	push	{r4, lr}
 80023ee:	4604      	mov	r4, r0
 80023f0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f2:	2214      	movs	r2, #20
 80023f4:	2100      	movs	r1, #0
 80023f6:	a803      	add	r0, sp, #12
 80023f8:	f000 f962 	bl	80026c0 <memset>
  if(spiHandle->Instance==SPI3)
 80023fc:	6822      	ldr	r2, [r4, #0]
 80023fe:	4b14      	ldr	r3, [pc, #80]	; (8002450 <HAL_SPI_MspInit+0x64>)
 8002400:	429a      	cmp	r2, r3
 8002402:	d123      	bne.n	800244c <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002404:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8002408:	2100      	movs	r1, #0
 800240a:	9101      	str	r1, [sp, #4]
 800240c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800240e:	4811      	ldr	r0, [pc, #68]	; (8002454 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002410:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002414:	641a      	str	r2, [r3, #64]	; 0x40
 8002416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002418:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800241c:	9201      	str	r2, [sp, #4]
 800241e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002420:	9102      	str	r1, [sp, #8]
 8002422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002424:	f042 0204 	orr.w	r2, r2, #4
 8002428:	631a      	str	r2, [r3, #48]	; 0x30
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	9302      	str	r3, [sp, #8]
 8002432:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002434:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002438:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243e:	2303      	movs	r3, #3
 8002440:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002442:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002444:	2306      	movs	r3, #6
 8002446:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002448:	f7fe f8ee 	bl	8000628 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800244c:	b008      	add	sp, #32
 800244e:	bd10      	pop	{r4, pc}
 8002450:	40003c00 	.word	0x40003c00
 8002454:	40020800 	.word	0x40020800

08002458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002458:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245a:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <HAL_MspInit+0x40>)
 800245c:	2200      	movs	r2, #0
 800245e:	9200      	str	r2, [sp, #0]
 8002460:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002462:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002466:	6459      	str	r1, [r3, #68]	; 0x44
 8002468:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800246a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800246e:	9100      	str	r1, [sp, #0]
 8002470:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002472:	9201      	str	r2, [sp, #4]
 8002474:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002476:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800247a:	6419      	str	r1, [r3, #64]	; 0x40
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002482:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002484:	210f      	movs	r1, #15
 8002486:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800248a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800248c:	f7fe f88a 	bl	80005a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002490:	b003      	add	sp, #12
 8002492:	f85d fb04 	ldr.w	pc, [sp], #4
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800

0800249c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800249c:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800249e:	4601      	mov	r1, r0
{
 80024a0:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80024a2:	2200      	movs	r2, #0
 80024a4:	2019      	movs	r0, #25
 80024a6:	f7fe f87d 	bl	80005a4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80024aa:	2019      	movs	r0, #25
 80024ac:	f7fe f8ae 	bl	800060c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80024b0:	2500      	movs	r5, #0
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <HAL_InitTick+0x6c>)
 80024b4:	9502      	str	r5, [sp, #8]
 80024b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80024b8:	4c14      	ldr	r4, [pc, #80]	; (800250c <HAL_InitTick+0x70>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	645a      	str	r2, [r3, #68]	; 0x44
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024c8:	a901      	add	r1, sp, #4
 80024ca:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 80024cc:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024ce:	f7fe fc33 	bl	8000d38 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80024d2:	f7fe fc21 	bl	8000d18 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <HAL_InitTick+0x74>)
 80024d8:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80024da:	f240 33e7 	movw	r3, #999	; 0x3e7
 80024de:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80024e0:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80024e2:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <HAL_InitTick+0x78>)
 80024e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80024e8:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 80024ea:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80024ec:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 80024ee:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f0:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80024f2:	f7fe fe85 	bl	8001200 <HAL_TIM_Base_Init>
 80024f6:	b920      	cbnz	r0, 8002502 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80024f8:	4620      	mov	r0, r4
 80024fa:	f7fe fd65 	bl	8000fc8 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80024fe:	b009      	add	sp, #36	; 0x24
 8002500:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8002502:	2001      	movs	r0, #1
 8002504:	e7fb      	b.n	80024fe <HAL_InitTick+0x62>
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800
 800250c:	20004244 	.word	0x20004244
 8002510:	40010000 	.word	0x40010000
 8002514:	000f4240 	.word	0x000f4240

08002518 <NMI_Handler>:
 8002518:	4770      	bx	lr

0800251a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800251a:	e7fe      	b.n	800251a <HardFault_Handler>

0800251c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800251c:	e7fe      	b.n	800251c <MemManage_Handler>

0800251e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800251e:	e7fe      	b.n	800251e <BusFault_Handler>

08002520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002520:	e7fe      	b.n	8002520 <UsageFault_Handler>

08002522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002522:	4770      	bx	lr

08002524 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002524:	4801      	ldr	r0, [pc, #4]	; (800252c <TIM1_UP_TIM10_IRQHandler+0x8>)
 8002526:	f7fe bd63 	b.w	8000ff0 <HAL_TIM_IRQHandler>
 800252a:	bf00      	nop
 800252c:	20004244 	.word	0x20004244

08002530 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002530:	b570      	push	{r4, r5, r6, lr}
 8002532:	460e      	mov	r6, r1
 8002534:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002536:	460c      	mov	r4, r1
 8002538:	1ba3      	subs	r3, r4, r6
 800253a:	429d      	cmp	r5, r3
 800253c:	dc01      	bgt.n	8002542 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800253e:	4628      	mov	r0, r5
 8002540:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002542:	f3af 8000 	nop.w
 8002546:	f804 0b01 	strb.w	r0, [r4], #1
 800254a:	e7f5      	b.n	8002538 <_read+0x8>

0800254c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800254c:	b510      	push	{r4, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254e:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002550:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8002554:	4293      	cmp	r3, r2
 8002556:	db01      	blt.n	800255c <_write+0x10>
	{
		ITM_SendChar(*ptr++);
	}
	return len;
}
 8002558:	4610      	mov	r0, r2
 800255a:	bd10      	pop	{r4, pc}
 800255c:	f8d4 0e80 	ldr.w	r0, [r4, #3712]	; 0xe80
 8002560:	07c0      	lsls	r0, r0, #31
 8002562:	d503      	bpl.n	800256c <_write+0x20>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002564:	f8d4 0e00 	ldr.w	r0, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002568:	07c0      	lsls	r0, r0, #31
 800256a:	d402      	bmi.n	8002572 <_write+0x26>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256c:	3301      	adds	r3, #1
 800256e:	e7f1      	b.n	8002554 <_write+0x8>
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8002570:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002572:	6820      	ldr	r0, [r4, #0]
 8002574:	2800      	cmp	r0, #0
 8002576:	d0fb      	beq.n	8002570 <_write+0x24>
		ITM_SendChar(*ptr++);
 8002578:	5cc8      	ldrb	r0, [r1, r3]
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800257a:	7020      	strb	r0, [r4, #0]
 800257c:	e7f6      	b.n	800256c <_write+0x20>
	...

08002580 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8002580:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <_sbrk+0x2c>)
 8002584:	6819      	ldr	r1, [r3, #0]
{
 8002586:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002588:	b909      	cbnz	r1, 800258e <_sbrk+0xe>
		heap_end = &end;
 800258a:	4909      	ldr	r1, [pc, #36]	; (80025b0 <_sbrk+0x30>)
 800258c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800258e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002590:	4669      	mov	r1, sp
 8002592:	4402      	add	r2, r0
 8002594:	428a      	cmp	r2, r1
 8002596:	d906      	bls.n	80025a6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002598:	f000 f868 	bl	800266c <__errno>
 800259c:	230c      	movs	r3, #12
 800259e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80025a0:	f04f 30ff 	mov.w	r0, #4294967295
 80025a4:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80025a6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80025a8:	bd08      	pop	{r3, pc}
 80025aa:	bf00      	nop
 80025ac:	200041d8 	.word	0x200041d8
 80025b0:	20004288 	.word	0x20004288

080025b4 <_close>:

int _close(int file)
{
	return -1;
}
 80025b4:	f04f 30ff 	mov.w	r0, #4294967295
 80025b8:	4770      	bx	lr

080025ba <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80025ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025be:	604b      	str	r3, [r1, #4]
	return 0;
}
 80025c0:	2000      	movs	r0, #0
 80025c2:	4770      	bx	lr

080025c4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80025c4:	2001      	movs	r0, #1
 80025c6:	4770      	bx	lr

080025c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80025c8:	2000      	movs	r0, #0
 80025ca:	4770      	bx	lr

080025cc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025cc:	490f      	ldr	r1, [pc, #60]	; (800260c <SystemInit+0x40>)
 80025ce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80025d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80025da:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <SystemInit+0x44>)
 80025dc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025de:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80025e0:	f042 0201 	orr.w	r2, r2, #1
 80025e4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80025e6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80025ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025f2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80025f4:	4a07      	ldr	r2, [pc, #28]	; (8002614 <SystemInit+0x48>)
 80025f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025fe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002600:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002602:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002606:	608b      	str	r3, [r1, #8]
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	e000ed00 	.word	0xe000ed00
 8002610:	40023800 	.word	0x40023800
 8002614:	24003010 	.word	0x24003010

08002618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002650 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800261c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800261e:	e003      	b.n	8002628 <LoopCopyDataInit>

08002620 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002620:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002622:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002624:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002626:	3104      	adds	r1, #4

08002628 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002628:	480b      	ldr	r0, [pc, #44]	; (8002658 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800262a:	4b0c      	ldr	r3, [pc, #48]	; (800265c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800262c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800262e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002630:	d3f6      	bcc.n	8002620 <CopyDataInit>
  ldr  r2, =_sbss
 8002632:	4a0b      	ldr	r2, [pc, #44]	; (8002660 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002634:	e002      	b.n	800263c <LoopFillZerobss>

08002636 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002636:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002638:	f842 3b04 	str.w	r3, [r2], #4

0800263c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800263c:	4b09      	ldr	r3, [pc, #36]	; (8002664 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800263e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002640:	d3f9      	bcc.n	8002636 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002642:	f7ff ffc3 	bl	80025cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002646:	f000 f817 	bl	8002678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800264a:	f7ff fe5d 	bl	8002308 <main>
  bx  lr    
 800264e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002650:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002654:	08003b34 	.word	0x08003b34
  ldr  r0, =_sdata
 8002658:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800265c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002660:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002664:	20004288 	.word	0x20004288

08002668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002668:	e7fe      	b.n	8002668 <ADC_IRQHandler>
	...

0800266c <__errno>:
 800266c:	4b01      	ldr	r3, [pc, #4]	; (8002674 <__errno+0x8>)
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	2000000c 	.word	0x2000000c

08002678 <__libc_init_array>:
 8002678:	b570      	push	{r4, r5, r6, lr}
 800267a:	4e0d      	ldr	r6, [pc, #52]	; (80026b0 <__libc_init_array+0x38>)
 800267c:	4c0d      	ldr	r4, [pc, #52]	; (80026b4 <__libc_init_array+0x3c>)
 800267e:	1ba4      	subs	r4, r4, r6
 8002680:	10a4      	asrs	r4, r4, #2
 8002682:	2500      	movs	r5, #0
 8002684:	42a5      	cmp	r5, r4
 8002686:	d109      	bne.n	800269c <__libc_init_array+0x24>
 8002688:	4e0b      	ldr	r6, [pc, #44]	; (80026b8 <__libc_init_array+0x40>)
 800268a:	4c0c      	ldr	r4, [pc, #48]	; (80026bc <__libc_init_array+0x44>)
 800268c:	f000 fc8e 	bl	8002fac <_init>
 8002690:	1ba4      	subs	r4, r4, r6
 8002692:	10a4      	asrs	r4, r4, #2
 8002694:	2500      	movs	r5, #0
 8002696:	42a5      	cmp	r5, r4
 8002698:	d105      	bne.n	80026a6 <__libc_init_array+0x2e>
 800269a:	bd70      	pop	{r4, r5, r6, pc}
 800269c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026a0:	4798      	blx	r3
 80026a2:	3501      	adds	r5, #1
 80026a4:	e7ee      	b.n	8002684 <__libc_init_array+0xc>
 80026a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026aa:	4798      	blx	r3
 80026ac:	3501      	adds	r5, #1
 80026ae:	e7f2      	b.n	8002696 <__libc_init_array+0x1e>
 80026b0:	08003b2c 	.word	0x08003b2c
 80026b4:	08003b2c 	.word	0x08003b2c
 80026b8:	08003b2c 	.word	0x08003b2c
 80026bc:	08003b30 	.word	0x08003b30

080026c0 <memset>:
 80026c0:	4402      	add	r2, r0
 80026c2:	4603      	mov	r3, r0
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d100      	bne.n	80026ca <memset+0xa>
 80026c8:	4770      	bx	lr
 80026ca:	f803 1b01 	strb.w	r1, [r3], #1
 80026ce:	e7f9      	b.n	80026c4 <memset+0x4>

080026d0 <_puts_r>:
 80026d0:	b570      	push	{r4, r5, r6, lr}
 80026d2:	460e      	mov	r6, r1
 80026d4:	4605      	mov	r5, r0
 80026d6:	b118      	cbz	r0, 80026e0 <_puts_r+0x10>
 80026d8:	6983      	ldr	r3, [r0, #24]
 80026da:	b90b      	cbnz	r3, 80026e0 <_puts_r+0x10>
 80026dc:	f000 fa0e 	bl	8002afc <__sinit>
 80026e0:	69ab      	ldr	r3, [r5, #24]
 80026e2:	68ac      	ldr	r4, [r5, #8]
 80026e4:	b913      	cbnz	r3, 80026ec <_puts_r+0x1c>
 80026e6:	4628      	mov	r0, r5
 80026e8:	f000 fa08 	bl	8002afc <__sinit>
 80026ec:	4b23      	ldr	r3, [pc, #140]	; (800277c <_puts_r+0xac>)
 80026ee:	429c      	cmp	r4, r3
 80026f0:	d117      	bne.n	8002722 <_puts_r+0x52>
 80026f2:	686c      	ldr	r4, [r5, #4]
 80026f4:	89a3      	ldrh	r3, [r4, #12]
 80026f6:	071b      	lsls	r3, r3, #28
 80026f8:	d51d      	bpl.n	8002736 <_puts_r+0x66>
 80026fa:	6923      	ldr	r3, [r4, #16]
 80026fc:	b1db      	cbz	r3, 8002736 <_puts_r+0x66>
 80026fe:	3e01      	subs	r6, #1
 8002700:	68a3      	ldr	r3, [r4, #8]
 8002702:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002706:	3b01      	subs	r3, #1
 8002708:	60a3      	str	r3, [r4, #8]
 800270a:	b9e9      	cbnz	r1, 8002748 <_puts_r+0x78>
 800270c:	2b00      	cmp	r3, #0
 800270e:	da2e      	bge.n	800276e <_puts_r+0x9e>
 8002710:	4622      	mov	r2, r4
 8002712:	210a      	movs	r1, #10
 8002714:	4628      	mov	r0, r5
 8002716:	f000 f83f 	bl	8002798 <__swbuf_r>
 800271a:	3001      	adds	r0, #1
 800271c:	d011      	beq.n	8002742 <_puts_r+0x72>
 800271e:	200a      	movs	r0, #10
 8002720:	bd70      	pop	{r4, r5, r6, pc}
 8002722:	4b17      	ldr	r3, [pc, #92]	; (8002780 <_puts_r+0xb0>)
 8002724:	429c      	cmp	r4, r3
 8002726:	d101      	bne.n	800272c <_puts_r+0x5c>
 8002728:	68ac      	ldr	r4, [r5, #8]
 800272a:	e7e3      	b.n	80026f4 <_puts_r+0x24>
 800272c:	4b15      	ldr	r3, [pc, #84]	; (8002784 <_puts_r+0xb4>)
 800272e:	429c      	cmp	r4, r3
 8002730:	bf08      	it	eq
 8002732:	68ec      	ldreq	r4, [r5, #12]
 8002734:	e7de      	b.n	80026f4 <_puts_r+0x24>
 8002736:	4621      	mov	r1, r4
 8002738:	4628      	mov	r0, r5
 800273a:	f000 f87f 	bl	800283c <__swsetup_r>
 800273e:	2800      	cmp	r0, #0
 8002740:	d0dd      	beq.n	80026fe <_puts_r+0x2e>
 8002742:	f04f 30ff 	mov.w	r0, #4294967295
 8002746:	bd70      	pop	{r4, r5, r6, pc}
 8002748:	2b00      	cmp	r3, #0
 800274a:	da04      	bge.n	8002756 <_puts_r+0x86>
 800274c:	69a2      	ldr	r2, [r4, #24]
 800274e:	4293      	cmp	r3, r2
 8002750:	db06      	blt.n	8002760 <_puts_r+0x90>
 8002752:	290a      	cmp	r1, #10
 8002754:	d004      	beq.n	8002760 <_puts_r+0x90>
 8002756:	6823      	ldr	r3, [r4, #0]
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	6022      	str	r2, [r4, #0]
 800275c:	7019      	strb	r1, [r3, #0]
 800275e:	e7cf      	b.n	8002700 <_puts_r+0x30>
 8002760:	4622      	mov	r2, r4
 8002762:	4628      	mov	r0, r5
 8002764:	f000 f818 	bl	8002798 <__swbuf_r>
 8002768:	3001      	adds	r0, #1
 800276a:	d1c9      	bne.n	8002700 <_puts_r+0x30>
 800276c:	e7e9      	b.n	8002742 <_puts_r+0x72>
 800276e:	6823      	ldr	r3, [r4, #0]
 8002770:	200a      	movs	r0, #10
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	6022      	str	r2, [r4, #0]
 8002776:	7018      	strb	r0, [r3, #0]
 8002778:	bd70      	pop	{r4, r5, r6, pc}
 800277a:	bf00      	nop
 800277c:	08003ae4 	.word	0x08003ae4
 8002780:	08003b04 	.word	0x08003b04
 8002784:	08003ac4 	.word	0x08003ac4

08002788 <puts>:
 8002788:	4b02      	ldr	r3, [pc, #8]	; (8002794 <puts+0xc>)
 800278a:	4601      	mov	r1, r0
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	f7ff bf9f 	b.w	80026d0 <_puts_r>
 8002792:	bf00      	nop
 8002794:	2000000c 	.word	0x2000000c

08002798 <__swbuf_r>:
 8002798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279a:	460e      	mov	r6, r1
 800279c:	4614      	mov	r4, r2
 800279e:	4605      	mov	r5, r0
 80027a0:	b118      	cbz	r0, 80027aa <__swbuf_r+0x12>
 80027a2:	6983      	ldr	r3, [r0, #24]
 80027a4:	b90b      	cbnz	r3, 80027aa <__swbuf_r+0x12>
 80027a6:	f000 f9a9 	bl	8002afc <__sinit>
 80027aa:	4b21      	ldr	r3, [pc, #132]	; (8002830 <__swbuf_r+0x98>)
 80027ac:	429c      	cmp	r4, r3
 80027ae:	d12a      	bne.n	8002806 <__swbuf_r+0x6e>
 80027b0:	686c      	ldr	r4, [r5, #4]
 80027b2:	69a3      	ldr	r3, [r4, #24]
 80027b4:	60a3      	str	r3, [r4, #8]
 80027b6:	89a3      	ldrh	r3, [r4, #12]
 80027b8:	071a      	lsls	r2, r3, #28
 80027ba:	d52e      	bpl.n	800281a <__swbuf_r+0x82>
 80027bc:	6923      	ldr	r3, [r4, #16]
 80027be:	b363      	cbz	r3, 800281a <__swbuf_r+0x82>
 80027c0:	6923      	ldr	r3, [r4, #16]
 80027c2:	6820      	ldr	r0, [r4, #0]
 80027c4:	1ac0      	subs	r0, r0, r3
 80027c6:	6963      	ldr	r3, [r4, #20]
 80027c8:	b2f6      	uxtb	r6, r6
 80027ca:	4298      	cmp	r0, r3
 80027cc:	4637      	mov	r7, r6
 80027ce:	db04      	blt.n	80027da <__swbuf_r+0x42>
 80027d0:	4621      	mov	r1, r4
 80027d2:	4628      	mov	r0, r5
 80027d4:	f000 f928 	bl	8002a28 <_fflush_r>
 80027d8:	bb28      	cbnz	r0, 8002826 <__swbuf_r+0x8e>
 80027da:	68a3      	ldr	r3, [r4, #8]
 80027dc:	3b01      	subs	r3, #1
 80027de:	60a3      	str	r3, [r4, #8]
 80027e0:	6823      	ldr	r3, [r4, #0]
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	6022      	str	r2, [r4, #0]
 80027e6:	701e      	strb	r6, [r3, #0]
 80027e8:	6963      	ldr	r3, [r4, #20]
 80027ea:	3001      	adds	r0, #1
 80027ec:	4298      	cmp	r0, r3
 80027ee:	d004      	beq.n	80027fa <__swbuf_r+0x62>
 80027f0:	89a3      	ldrh	r3, [r4, #12]
 80027f2:	07db      	lsls	r3, r3, #31
 80027f4:	d519      	bpl.n	800282a <__swbuf_r+0x92>
 80027f6:	2e0a      	cmp	r6, #10
 80027f8:	d117      	bne.n	800282a <__swbuf_r+0x92>
 80027fa:	4621      	mov	r1, r4
 80027fc:	4628      	mov	r0, r5
 80027fe:	f000 f913 	bl	8002a28 <_fflush_r>
 8002802:	b190      	cbz	r0, 800282a <__swbuf_r+0x92>
 8002804:	e00f      	b.n	8002826 <__swbuf_r+0x8e>
 8002806:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <__swbuf_r+0x9c>)
 8002808:	429c      	cmp	r4, r3
 800280a:	d101      	bne.n	8002810 <__swbuf_r+0x78>
 800280c:	68ac      	ldr	r4, [r5, #8]
 800280e:	e7d0      	b.n	80027b2 <__swbuf_r+0x1a>
 8002810:	4b09      	ldr	r3, [pc, #36]	; (8002838 <__swbuf_r+0xa0>)
 8002812:	429c      	cmp	r4, r3
 8002814:	bf08      	it	eq
 8002816:	68ec      	ldreq	r4, [r5, #12]
 8002818:	e7cb      	b.n	80027b2 <__swbuf_r+0x1a>
 800281a:	4621      	mov	r1, r4
 800281c:	4628      	mov	r0, r5
 800281e:	f000 f80d 	bl	800283c <__swsetup_r>
 8002822:	2800      	cmp	r0, #0
 8002824:	d0cc      	beq.n	80027c0 <__swbuf_r+0x28>
 8002826:	f04f 37ff 	mov.w	r7, #4294967295
 800282a:	4638      	mov	r0, r7
 800282c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800282e:	bf00      	nop
 8002830:	08003ae4 	.word	0x08003ae4
 8002834:	08003b04 	.word	0x08003b04
 8002838:	08003ac4 	.word	0x08003ac4

0800283c <__swsetup_r>:
 800283c:	4b32      	ldr	r3, [pc, #200]	; (8002908 <__swsetup_r+0xcc>)
 800283e:	b570      	push	{r4, r5, r6, lr}
 8002840:	681d      	ldr	r5, [r3, #0]
 8002842:	4606      	mov	r6, r0
 8002844:	460c      	mov	r4, r1
 8002846:	b125      	cbz	r5, 8002852 <__swsetup_r+0x16>
 8002848:	69ab      	ldr	r3, [r5, #24]
 800284a:	b913      	cbnz	r3, 8002852 <__swsetup_r+0x16>
 800284c:	4628      	mov	r0, r5
 800284e:	f000 f955 	bl	8002afc <__sinit>
 8002852:	4b2e      	ldr	r3, [pc, #184]	; (800290c <__swsetup_r+0xd0>)
 8002854:	429c      	cmp	r4, r3
 8002856:	d10f      	bne.n	8002878 <__swsetup_r+0x3c>
 8002858:	686c      	ldr	r4, [r5, #4]
 800285a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800285e:	b29a      	uxth	r2, r3
 8002860:	0715      	lsls	r5, r2, #28
 8002862:	d42c      	bmi.n	80028be <__swsetup_r+0x82>
 8002864:	06d0      	lsls	r0, r2, #27
 8002866:	d411      	bmi.n	800288c <__swsetup_r+0x50>
 8002868:	2209      	movs	r2, #9
 800286a:	6032      	str	r2, [r6, #0]
 800286c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002870:	81a3      	strh	r3, [r4, #12]
 8002872:	f04f 30ff 	mov.w	r0, #4294967295
 8002876:	bd70      	pop	{r4, r5, r6, pc}
 8002878:	4b25      	ldr	r3, [pc, #148]	; (8002910 <__swsetup_r+0xd4>)
 800287a:	429c      	cmp	r4, r3
 800287c:	d101      	bne.n	8002882 <__swsetup_r+0x46>
 800287e:	68ac      	ldr	r4, [r5, #8]
 8002880:	e7eb      	b.n	800285a <__swsetup_r+0x1e>
 8002882:	4b24      	ldr	r3, [pc, #144]	; (8002914 <__swsetup_r+0xd8>)
 8002884:	429c      	cmp	r4, r3
 8002886:	bf08      	it	eq
 8002888:	68ec      	ldreq	r4, [r5, #12]
 800288a:	e7e6      	b.n	800285a <__swsetup_r+0x1e>
 800288c:	0751      	lsls	r1, r2, #29
 800288e:	d512      	bpl.n	80028b6 <__swsetup_r+0x7a>
 8002890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002892:	b141      	cbz	r1, 80028a6 <__swsetup_r+0x6a>
 8002894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002898:	4299      	cmp	r1, r3
 800289a:	d002      	beq.n	80028a2 <__swsetup_r+0x66>
 800289c:	4630      	mov	r0, r6
 800289e:	f000 fa1b 	bl	8002cd8 <_free_r>
 80028a2:	2300      	movs	r3, #0
 80028a4:	6363      	str	r3, [r4, #52]	; 0x34
 80028a6:	89a3      	ldrh	r3, [r4, #12]
 80028a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80028ac:	81a3      	strh	r3, [r4, #12]
 80028ae:	2300      	movs	r3, #0
 80028b0:	6063      	str	r3, [r4, #4]
 80028b2:	6923      	ldr	r3, [r4, #16]
 80028b4:	6023      	str	r3, [r4, #0]
 80028b6:	89a3      	ldrh	r3, [r4, #12]
 80028b8:	f043 0308 	orr.w	r3, r3, #8
 80028bc:	81a3      	strh	r3, [r4, #12]
 80028be:	6923      	ldr	r3, [r4, #16]
 80028c0:	b94b      	cbnz	r3, 80028d6 <__swsetup_r+0x9a>
 80028c2:	89a3      	ldrh	r3, [r4, #12]
 80028c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80028c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028cc:	d003      	beq.n	80028d6 <__swsetup_r+0x9a>
 80028ce:	4621      	mov	r1, r4
 80028d0:	4630      	mov	r0, r6
 80028d2:	f000 f9c1 	bl	8002c58 <__smakebuf_r>
 80028d6:	89a2      	ldrh	r2, [r4, #12]
 80028d8:	f012 0301 	ands.w	r3, r2, #1
 80028dc:	d00c      	beq.n	80028f8 <__swsetup_r+0xbc>
 80028de:	2300      	movs	r3, #0
 80028e0:	60a3      	str	r3, [r4, #8]
 80028e2:	6963      	ldr	r3, [r4, #20]
 80028e4:	425b      	negs	r3, r3
 80028e6:	61a3      	str	r3, [r4, #24]
 80028e8:	6923      	ldr	r3, [r4, #16]
 80028ea:	b953      	cbnz	r3, 8002902 <__swsetup_r+0xc6>
 80028ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028f0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80028f4:	d1ba      	bne.n	800286c <__swsetup_r+0x30>
 80028f6:	bd70      	pop	{r4, r5, r6, pc}
 80028f8:	0792      	lsls	r2, r2, #30
 80028fa:	bf58      	it	pl
 80028fc:	6963      	ldrpl	r3, [r4, #20]
 80028fe:	60a3      	str	r3, [r4, #8]
 8002900:	e7f2      	b.n	80028e8 <__swsetup_r+0xac>
 8002902:	2000      	movs	r0, #0
 8002904:	e7f7      	b.n	80028f6 <__swsetup_r+0xba>
 8002906:	bf00      	nop
 8002908:	2000000c 	.word	0x2000000c
 800290c:	08003ae4 	.word	0x08003ae4
 8002910:	08003b04 	.word	0x08003b04
 8002914:	08003ac4 	.word	0x08003ac4

08002918 <__sflush_r>:
 8002918:	898a      	ldrh	r2, [r1, #12]
 800291a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800291e:	4605      	mov	r5, r0
 8002920:	0710      	lsls	r0, r2, #28
 8002922:	460c      	mov	r4, r1
 8002924:	d45a      	bmi.n	80029dc <__sflush_r+0xc4>
 8002926:	684b      	ldr	r3, [r1, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	dc05      	bgt.n	8002938 <__sflush_r+0x20>
 800292c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800292e:	2b00      	cmp	r3, #0
 8002930:	dc02      	bgt.n	8002938 <__sflush_r+0x20>
 8002932:	2000      	movs	r0, #0
 8002934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800293a:	2e00      	cmp	r6, #0
 800293c:	d0f9      	beq.n	8002932 <__sflush_r+0x1a>
 800293e:	2300      	movs	r3, #0
 8002940:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002944:	682f      	ldr	r7, [r5, #0]
 8002946:	602b      	str	r3, [r5, #0]
 8002948:	d033      	beq.n	80029b2 <__sflush_r+0x9a>
 800294a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800294c:	89a3      	ldrh	r3, [r4, #12]
 800294e:	075a      	lsls	r2, r3, #29
 8002950:	d505      	bpl.n	800295e <__sflush_r+0x46>
 8002952:	6863      	ldr	r3, [r4, #4]
 8002954:	1ac0      	subs	r0, r0, r3
 8002956:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002958:	b10b      	cbz	r3, 800295e <__sflush_r+0x46>
 800295a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800295c:	1ac0      	subs	r0, r0, r3
 800295e:	2300      	movs	r3, #0
 8002960:	4602      	mov	r2, r0
 8002962:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002964:	6a21      	ldr	r1, [r4, #32]
 8002966:	4628      	mov	r0, r5
 8002968:	47b0      	blx	r6
 800296a:	1c43      	adds	r3, r0, #1
 800296c:	89a3      	ldrh	r3, [r4, #12]
 800296e:	d106      	bne.n	800297e <__sflush_r+0x66>
 8002970:	6829      	ldr	r1, [r5, #0]
 8002972:	291d      	cmp	r1, #29
 8002974:	d84b      	bhi.n	8002a0e <__sflush_r+0xf6>
 8002976:	4a2b      	ldr	r2, [pc, #172]	; (8002a24 <__sflush_r+0x10c>)
 8002978:	40ca      	lsrs	r2, r1
 800297a:	07d6      	lsls	r6, r2, #31
 800297c:	d547      	bpl.n	8002a0e <__sflush_r+0xf6>
 800297e:	2200      	movs	r2, #0
 8002980:	6062      	str	r2, [r4, #4]
 8002982:	04d9      	lsls	r1, r3, #19
 8002984:	6922      	ldr	r2, [r4, #16]
 8002986:	6022      	str	r2, [r4, #0]
 8002988:	d504      	bpl.n	8002994 <__sflush_r+0x7c>
 800298a:	1c42      	adds	r2, r0, #1
 800298c:	d101      	bne.n	8002992 <__sflush_r+0x7a>
 800298e:	682b      	ldr	r3, [r5, #0]
 8002990:	b903      	cbnz	r3, 8002994 <__sflush_r+0x7c>
 8002992:	6560      	str	r0, [r4, #84]	; 0x54
 8002994:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002996:	602f      	str	r7, [r5, #0]
 8002998:	2900      	cmp	r1, #0
 800299a:	d0ca      	beq.n	8002932 <__sflush_r+0x1a>
 800299c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80029a0:	4299      	cmp	r1, r3
 80029a2:	d002      	beq.n	80029aa <__sflush_r+0x92>
 80029a4:	4628      	mov	r0, r5
 80029a6:	f000 f997 	bl	8002cd8 <_free_r>
 80029aa:	2000      	movs	r0, #0
 80029ac:	6360      	str	r0, [r4, #52]	; 0x34
 80029ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029b2:	6a21      	ldr	r1, [r4, #32]
 80029b4:	2301      	movs	r3, #1
 80029b6:	4628      	mov	r0, r5
 80029b8:	47b0      	blx	r6
 80029ba:	1c41      	adds	r1, r0, #1
 80029bc:	d1c6      	bne.n	800294c <__sflush_r+0x34>
 80029be:	682b      	ldr	r3, [r5, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0c3      	beq.n	800294c <__sflush_r+0x34>
 80029c4:	2b1d      	cmp	r3, #29
 80029c6:	d001      	beq.n	80029cc <__sflush_r+0xb4>
 80029c8:	2b16      	cmp	r3, #22
 80029ca:	d101      	bne.n	80029d0 <__sflush_r+0xb8>
 80029cc:	602f      	str	r7, [r5, #0]
 80029ce:	e7b0      	b.n	8002932 <__sflush_r+0x1a>
 80029d0:	89a3      	ldrh	r3, [r4, #12]
 80029d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029d6:	81a3      	strh	r3, [r4, #12]
 80029d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029dc:	690f      	ldr	r7, [r1, #16]
 80029de:	2f00      	cmp	r7, #0
 80029e0:	d0a7      	beq.n	8002932 <__sflush_r+0x1a>
 80029e2:	0793      	lsls	r3, r2, #30
 80029e4:	680e      	ldr	r6, [r1, #0]
 80029e6:	bf08      	it	eq
 80029e8:	694b      	ldreq	r3, [r1, #20]
 80029ea:	600f      	str	r7, [r1, #0]
 80029ec:	bf18      	it	ne
 80029ee:	2300      	movne	r3, #0
 80029f0:	eba6 0807 	sub.w	r8, r6, r7
 80029f4:	608b      	str	r3, [r1, #8]
 80029f6:	f1b8 0f00 	cmp.w	r8, #0
 80029fa:	dd9a      	ble.n	8002932 <__sflush_r+0x1a>
 80029fc:	4643      	mov	r3, r8
 80029fe:	463a      	mov	r2, r7
 8002a00:	6a21      	ldr	r1, [r4, #32]
 8002a02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a04:	4628      	mov	r0, r5
 8002a06:	47b0      	blx	r6
 8002a08:	2800      	cmp	r0, #0
 8002a0a:	dc07      	bgt.n	8002a1c <__sflush_r+0x104>
 8002a0c:	89a3      	ldrh	r3, [r4, #12]
 8002a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a12:	81a3      	strh	r3, [r4, #12]
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a1c:	4407      	add	r7, r0
 8002a1e:	eba8 0800 	sub.w	r8, r8, r0
 8002a22:	e7e8      	b.n	80029f6 <__sflush_r+0xde>
 8002a24:	20400001 	.word	0x20400001

08002a28 <_fflush_r>:
 8002a28:	b538      	push	{r3, r4, r5, lr}
 8002a2a:	690b      	ldr	r3, [r1, #16]
 8002a2c:	4605      	mov	r5, r0
 8002a2e:	460c      	mov	r4, r1
 8002a30:	b1db      	cbz	r3, 8002a6a <_fflush_r+0x42>
 8002a32:	b118      	cbz	r0, 8002a3c <_fflush_r+0x14>
 8002a34:	6983      	ldr	r3, [r0, #24]
 8002a36:	b90b      	cbnz	r3, 8002a3c <_fflush_r+0x14>
 8002a38:	f000 f860 	bl	8002afc <__sinit>
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <_fflush_r+0x48>)
 8002a3e:	429c      	cmp	r4, r3
 8002a40:	d109      	bne.n	8002a56 <_fflush_r+0x2e>
 8002a42:	686c      	ldr	r4, [r5, #4]
 8002a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a48:	b17b      	cbz	r3, 8002a6a <_fflush_r+0x42>
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	4628      	mov	r0, r5
 8002a4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a52:	f7ff bf61 	b.w	8002918 <__sflush_r>
 8002a56:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <_fflush_r+0x4c>)
 8002a58:	429c      	cmp	r4, r3
 8002a5a:	d101      	bne.n	8002a60 <_fflush_r+0x38>
 8002a5c:	68ac      	ldr	r4, [r5, #8]
 8002a5e:	e7f1      	b.n	8002a44 <_fflush_r+0x1c>
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <_fflush_r+0x50>)
 8002a62:	429c      	cmp	r4, r3
 8002a64:	bf08      	it	eq
 8002a66:	68ec      	ldreq	r4, [r5, #12]
 8002a68:	e7ec      	b.n	8002a44 <_fflush_r+0x1c>
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	bd38      	pop	{r3, r4, r5, pc}
 8002a6e:	bf00      	nop
 8002a70:	08003ae4 	.word	0x08003ae4
 8002a74:	08003b04 	.word	0x08003b04
 8002a78:	08003ac4 	.word	0x08003ac4

08002a7c <_cleanup_r>:
 8002a7c:	4901      	ldr	r1, [pc, #4]	; (8002a84 <_cleanup_r+0x8>)
 8002a7e:	f000 b8a9 	b.w	8002bd4 <_fwalk_reent>
 8002a82:	bf00      	nop
 8002a84:	08002a29 	.word	0x08002a29

08002a88 <std.isra.0>:
 8002a88:	2300      	movs	r3, #0
 8002a8a:	b510      	push	{r4, lr}
 8002a8c:	4604      	mov	r4, r0
 8002a8e:	6003      	str	r3, [r0, #0]
 8002a90:	6043      	str	r3, [r0, #4]
 8002a92:	6083      	str	r3, [r0, #8]
 8002a94:	8181      	strh	r1, [r0, #12]
 8002a96:	6643      	str	r3, [r0, #100]	; 0x64
 8002a98:	81c2      	strh	r2, [r0, #14]
 8002a9a:	6103      	str	r3, [r0, #16]
 8002a9c:	6143      	str	r3, [r0, #20]
 8002a9e:	6183      	str	r3, [r0, #24]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	2208      	movs	r2, #8
 8002aa4:	305c      	adds	r0, #92	; 0x5c
 8002aa6:	f7ff fe0b 	bl	80026c0 <memset>
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <std.isra.0+0x38>)
 8002aac:	6263      	str	r3, [r4, #36]	; 0x24
 8002aae:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <std.isra.0+0x3c>)
 8002ab0:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ab2:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <std.isra.0+0x40>)
 8002ab4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ab6:	4b05      	ldr	r3, [pc, #20]	; (8002acc <std.isra.0+0x44>)
 8002ab8:	6224      	str	r4, [r4, #32]
 8002aba:	6323      	str	r3, [r4, #48]	; 0x30
 8002abc:	bd10      	pop	{r4, pc}
 8002abe:	bf00      	nop
 8002ac0:	08002e51 	.word	0x08002e51
 8002ac4:	08002e73 	.word	0x08002e73
 8002ac8:	08002eab 	.word	0x08002eab
 8002acc:	08002ecf 	.word	0x08002ecf

08002ad0 <__sfmoreglue>:
 8002ad0:	b570      	push	{r4, r5, r6, lr}
 8002ad2:	1e4a      	subs	r2, r1, #1
 8002ad4:	2568      	movs	r5, #104	; 0x68
 8002ad6:	4355      	muls	r5, r2
 8002ad8:	460e      	mov	r6, r1
 8002ada:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002ade:	f000 f949 	bl	8002d74 <_malloc_r>
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	b140      	cbz	r0, 8002af8 <__sfmoreglue+0x28>
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	e880 0042 	stmia.w	r0, {r1, r6}
 8002aec:	300c      	adds	r0, #12
 8002aee:	60a0      	str	r0, [r4, #8]
 8002af0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002af4:	f7ff fde4 	bl	80026c0 <memset>
 8002af8:	4620      	mov	r0, r4
 8002afa:	bd70      	pop	{r4, r5, r6, pc}

08002afc <__sinit>:
 8002afc:	6983      	ldr	r3, [r0, #24]
 8002afe:	b510      	push	{r4, lr}
 8002b00:	4604      	mov	r4, r0
 8002b02:	bb33      	cbnz	r3, 8002b52 <__sinit+0x56>
 8002b04:	6483      	str	r3, [r0, #72]	; 0x48
 8002b06:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002b08:	6503      	str	r3, [r0, #80]	; 0x50
 8002b0a:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <__sinit+0x58>)
 8002b0c:	4a12      	ldr	r2, [pc, #72]	; (8002b58 <__sinit+0x5c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6282      	str	r2, [r0, #40]	; 0x28
 8002b12:	4298      	cmp	r0, r3
 8002b14:	bf04      	itt	eq
 8002b16:	2301      	moveq	r3, #1
 8002b18:	6183      	streq	r3, [r0, #24]
 8002b1a:	f000 f81f 	bl	8002b5c <__sfp>
 8002b1e:	6060      	str	r0, [r4, #4]
 8002b20:	4620      	mov	r0, r4
 8002b22:	f000 f81b 	bl	8002b5c <__sfp>
 8002b26:	60a0      	str	r0, [r4, #8]
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f000 f817 	bl	8002b5c <__sfp>
 8002b2e:	2200      	movs	r2, #0
 8002b30:	60e0      	str	r0, [r4, #12]
 8002b32:	2104      	movs	r1, #4
 8002b34:	6860      	ldr	r0, [r4, #4]
 8002b36:	f7ff ffa7 	bl	8002a88 <std.isra.0>
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	2109      	movs	r1, #9
 8002b3e:	68a0      	ldr	r0, [r4, #8]
 8002b40:	f7ff ffa2 	bl	8002a88 <std.isra.0>
 8002b44:	2202      	movs	r2, #2
 8002b46:	2112      	movs	r1, #18
 8002b48:	68e0      	ldr	r0, [r4, #12]
 8002b4a:	f7ff ff9d 	bl	8002a88 <std.isra.0>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	61a3      	str	r3, [r4, #24]
 8002b52:	bd10      	pop	{r4, pc}
 8002b54:	08003ac0 	.word	0x08003ac0
 8002b58:	08002a7d 	.word	0x08002a7d

08002b5c <__sfp>:
 8002b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b5e:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <__sfp+0x74>)
 8002b60:	681e      	ldr	r6, [r3, #0]
 8002b62:	69b3      	ldr	r3, [r6, #24]
 8002b64:	4607      	mov	r7, r0
 8002b66:	b913      	cbnz	r3, 8002b6e <__sfp+0x12>
 8002b68:	4630      	mov	r0, r6
 8002b6a:	f7ff ffc7 	bl	8002afc <__sinit>
 8002b6e:	3648      	adds	r6, #72	; 0x48
 8002b70:	68b4      	ldr	r4, [r6, #8]
 8002b72:	6873      	ldr	r3, [r6, #4]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	d503      	bpl.n	8002b80 <__sfp+0x24>
 8002b78:	6833      	ldr	r3, [r6, #0]
 8002b7a:	b133      	cbz	r3, 8002b8a <__sfp+0x2e>
 8002b7c:	6836      	ldr	r6, [r6, #0]
 8002b7e:	e7f7      	b.n	8002b70 <__sfp+0x14>
 8002b80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002b84:	b16d      	cbz	r5, 8002ba2 <__sfp+0x46>
 8002b86:	3468      	adds	r4, #104	; 0x68
 8002b88:	e7f4      	b.n	8002b74 <__sfp+0x18>
 8002b8a:	2104      	movs	r1, #4
 8002b8c:	4638      	mov	r0, r7
 8002b8e:	f7ff ff9f 	bl	8002ad0 <__sfmoreglue>
 8002b92:	6030      	str	r0, [r6, #0]
 8002b94:	2800      	cmp	r0, #0
 8002b96:	d1f1      	bne.n	8002b7c <__sfp+0x20>
 8002b98:	230c      	movs	r3, #12
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	4604      	mov	r4, r0
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ba2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ba6:	81e3      	strh	r3, [r4, #14]
 8002ba8:	2301      	movs	r3, #1
 8002baa:	81a3      	strh	r3, [r4, #12]
 8002bac:	6665      	str	r5, [r4, #100]	; 0x64
 8002bae:	6025      	str	r5, [r4, #0]
 8002bb0:	60a5      	str	r5, [r4, #8]
 8002bb2:	6065      	str	r5, [r4, #4]
 8002bb4:	6125      	str	r5, [r4, #16]
 8002bb6:	6165      	str	r5, [r4, #20]
 8002bb8:	61a5      	str	r5, [r4, #24]
 8002bba:	2208      	movs	r2, #8
 8002bbc:	4629      	mov	r1, r5
 8002bbe:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002bc2:	f7ff fd7d 	bl	80026c0 <memset>
 8002bc6:	6365      	str	r5, [r4, #52]	; 0x34
 8002bc8:	63a5      	str	r5, [r4, #56]	; 0x38
 8002bca:	64a5      	str	r5, [r4, #72]	; 0x48
 8002bcc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002bce:	e7e6      	b.n	8002b9e <__sfp+0x42>
 8002bd0:	08003ac0 	.word	0x08003ac0

08002bd4 <_fwalk_reent>:
 8002bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bd8:	4680      	mov	r8, r0
 8002bda:	4689      	mov	r9, r1
 8002bdc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002be0:	2600      	movs	r6, #0
 8002be2:	b914      	cbnz	r4, 8002bea <_fwalk_reent+0x16>
 8002be4:	4630      	mov	r0, r6
 8002be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bea:	68a5      	ldr	r5, [r4, #8]
 8002bec:	6867      	ldr	r7, [r4, #4]
 8002bee:	3f01      	subs	r7, #1
 8002bf0:	d501      	bpl.n	8002bf6 <_fwalk_reent+0x22>
 8002bf2:	6824      	ldr	r4, [r4, #0]
 8002bf4:	e7f5      	b.n	8002be2 <_fwalk_reent+0xe>
 8002bf6:	89ab      	ldrh	r3, [r5, #12]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d907      	bls.n	8002c0c <_fwalk_reent+0x38>
 8002bfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c00:	3301      	adds	r3, #1
 8002c02:	d003      	beq.n	8002c0c <_fwalk_reent+0x38>
 8002c04:	4629      	mov	r1, r5
 8002c06:	4640      	mov	r0, r8
 8002c08:	47c8      	blx	r9
 8002c0a:	4306      	orrs	r6, r0
 8002c0c:	3568      	adds	r5, #104	; 0x68
 8002c0e:	e7ee      	b.n	8002bee <_fwalk_reent+0x1a>

08002c10 <__swhatbuf_r>:
 8002c10:	b570      	push	{r4, r5, r6, lr}
 8002c12:	460e      	mov	r6, r1
 8002c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c18:	2900      	cmp	r1, #0
 8002c1a:	b090      	sub	sp, #64	; 0x40
 8002c1c:	4614      	mov	r4, r2
 8002c1e:	461d      	mov	r5, r3
 8002c20:	da07      	bge.n	8002c32 <__swhatbuf_r+0x22>
 8002c22:	2300      	movs	r3, #0
 8002c24:	602b      	str	r3, [r5, #0]
 8002c26:	89b3      	ldrh	r3, [r6, #12]
 8002c28:	061a      	lsls	r2, r3, #24
 8002c2a:	d410      	bmi.n	8002c4e <__swhatbuf_r+0x3e>
 8002c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c30:	e00e      	b.n	8002c50 <__swhatbuf_r+0x40>
 8002c32:	aa01      	add	r2, sp, #4
 8002c34:	f000 f972 	bl	8002f1c <_fstat_r>
 8002c38:	2800      	cmp	r0, #0
 8002c3a:	dbf2      	blt.n	8002c22 <__swhatbuf_r+0x12>
 8002c3c:	9a02      	ldr	r2, [sp, #8]
 8002c3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002c42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002c46:	425a      	negs	r2, r3
 8002c48:	415a      	adcs	r2, r3
 8002c4a:	602a      	str	r2, [r5, #0]
 8002c4c:	e7ee      	b.n	8002c2c <__swhatbuf_r+0x1c>
 8002c4e:	2340      	movs	r3, #64	; 0x40
 8002c50:	2000      	movs	r0, #0
 8002c52:	6023      	str	r3, [r4, #0]
 8002c54:	b010      	add	sp, #64	; 0x40
 8002c56:	bd70      	pop	{r4, r5, r6, pc}

08002c58 <__smakebuf_r>:
 8002c58:	898b      	ldrh	r3, [r1, #12]
 8002c5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c5c:	079d      	lsls	r5, r3, #30
 8002c5e:	4606      	mov	r6, r0
 8002c60:	460c      	mov	r4, r1
 8002c62:	d507      	bpl.n	8002c74 <__smakebuf_r+0x1c>
 8002c64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002c68:	6023      	str	r3, [r4, #0]
 8002c6a:	6123      	str	r3, [r4, #16]
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	6163      	str	r3, [r4, #20]
 8002c70:	b002      	add	sp, #8
 8002c72:	bd70      	pop	{r4, r5, r6, pc}
 8002c74:	ab01      	add	r3, sp, #4
 8002c76:	466a      	mov	r2, sp
 8002c78:	f7ff ffca 	bl	8002c10 <__swhatbuf_r>
 8002c7c:	9900      	ldr	r1, [sp, #0]
 8002c7e:	4605      	mov	r5, r0
 8002c80:	4630      	mov	r0, r6
 8002c82:	f000 f877 	bl	8002d74 <_malloc_r>
 8002c86:	b948      	cbnz	r0, 8002c9c <__smakebuf_r+0x44>
 8002c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c8c:	059a      	lsls	r2, r3, #22
 8002c8e:	d4ef      	bmi.n	8002c70 <__smakebuf_r+0x18>
 8002c90:	f023 0303 	bic.w	r3, r3, #3
 8002c94:	f043 0302 	orr.w	r3, r3, #2
 8002c98:	81a3      	strh	r3, [r4, #12]
 8002c9a:	e7e3      	b.n	8002c64 <__smakebuf_r+0xc>
 8002c9c:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <__smakebuf_r+0x7c>)
 8002c9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002ca0:	89a3      	ldrh	r3, [r4, #12]
 8002ca2:	6020      	str	r0, [r4, #0]
 8002ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca8:	81a3      	strh	r3, [r4, #12]
 8002caa:	9b00      	ldr	r3, [sp, #0]
 8002cac:	6163      	str	r3, [r4, #20]
 8002cae:	9b01      	ldr	r3, [sp, #4]
 8002cb0:	6120      	str	r0, [r4, #16]
 8002cb2:	b15b      	cbz	r3, 8002ccc <__smakebuf_r+0x74>
 8002cb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002cb8:	4630      	mov	r0, r6
 8002cba:	f000 f941 	bl	8002f40 <_isatty_r>
 8002cbe:	b128      	cbz	r0, 8002ccc <__smakebuf_r+0x74>
 8002cc0:	89a3      	ldrh	r3, [r4, #12]
 8002cc2:	f023 0303 	bic.w	r3, r3, #3
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	81a3      	strh	r3, [r4, #12]
 8002ccc:	89a3      	ldrh	r3, [r4, #12]
 8002cce:	431d      	orrs	r5, r3
 8002cd0:	81a5      	strh	r5, [r4, #12]
 8002cd2:	e7cd      	b.n	8002c70 <__smakebuf_r+0x18>
 8002cd4:	08002a7d 	.word	0x08002a7d

08002cd8 <_free_r>:
 8002cd8:	b538      	push	{r3, r4, r5, lr}
 8002cda:	4605      	mov	r5, r0
 8002cdc:	2900      	cmp	r1, #0
 8002cde:	d045      	beq.n	8002d6c <_free_r+0x94>
 8002ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ce4:	1f0c      	subs	r4, r1, #4
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	bfb8      	it	lt
 8002cea:	18e4      	addlt	r4, r4, r3
 8002cec:	f000 f94a 	bl	8002f84 <__malloc_lock>
 8002cf0:	4a1f      	ldr	r2, [pc, #124]	; (8002d70 <_free_r+0x98>)
 8002cf2:	6813      	ldr	r3, [r2, #0]
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	b933      	cbnz	r3, 8002d06 <_free_r+0x2e>
 8002cf8:	6063      	str	r3, [r4, #4]
 8002cfa:	6014      	str	r4, [r2, #0]
 8002cfc:	4628      	mov	r0, r5
 8002cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d02:	f000 b940 	b.w	8002f86 <__malloc_unlock>
 8002d06:	42a3      	cmp	r3, r4
 8002d08:	d90c      	bls.n	8002d24 <_free_r+0x4c>
 8002d0a:	6821      	ldr	r1, [r4, #0]
 8002d0c:	1862      	adds	r2, r4, r1
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	bf04      	itt	eq
 8002d12:	681a      	ldreq	r2, [r3, #0]
 8002d14:	685b      	ldreq	r3, [r3, #4]
 8002d16:	6063      	str	r3, [r4, #4]
 8002d18:	bf04      	itt	eq
 8002d1a:	1852      	addeq	r2, r2, r1
 8002d1c:	6022      	streq	r2, [r4, #0]
 8002d1e:	6004      	str	r4, [r0, #0]
 8002d20:	e7ec      	b.n	8002cfc <_free_r+0x24>
 8002d22:	4613      	mov	r3, r2
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	b10a      	cbz	r2, 8002d2c <_free_r+0x54>
 8002d28:	42a2      	cmp	r2, r4
 8002d2a:	d9fa      	bls.n	8002d22 <_free_r+0x4a>
 8002d2c:	6819      	ldr	r1, [r3, #0]
 8002d2e:	1858      	adds	r0, r3, r1
 8002d30:	42a0      	cmp	r0, r4
 8002d32:	d10b      	bne.n	8002d4c <_free_r+0x74>
 8002d34:	6820      	ldr	r0, [r4, #0]
 8002d36:	4401      	add	r1, r0
 8002d38:	1858      	adds	r0, r3, r1
 8002d3a:	4282      	cmp	r2, r0
 8002d3c:	6019      	str	r1, [r3, #0]
 8002d3e:	d1dd      	bne.n	8002cfc <_free_r+0x24>
 8002d40:	6810      	ldr	r0, [r2, #0]
 8002d42:	6852      	ldr	r2, [r2, #4]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	4401      	add	r1, r0
 8002d48:	6019      	str	r1, [r3, #0]
 8002d4a:	e7d7      	b.n	8002cfc <_free_r+0x24>
 8002d4c:	d902      	bls.n	8002d54 <_free_r+0x7c>
 8002d4e:	230c      	movs	r3, #12
 8002d50:	602b      	str	r3, [r5, #0]
 8002d52:	e7d3      	b.n	8002cfc <_free_r+0x24>
 8002d54:	6820      	ldr	r0, [r4, #0]
 8002d56:	1821      	adds	r1, r4, r0
 8002d58:	428a      	cmp	r2, r1
 8002d5a:	bf04      	itt	eq
 8002d5c:	6811      	ldreq	r1, [r2, #0]
 8002d5e:	6852      	ldreq	r2, [r2, #4]
 8002d60:	6062      	str	r2, [r4, #4]
 8002d62:	bf04      	itt	eq
 8002d64:	1809      	addeq	r1, r1, r0
 8002d66:	6021      	streq	r1, [r4, #0]
 8002d68:	605c      	str	r4, [r3, #4]
 8002d6a:	e7c7      	b.n	8002cfc <_free_r+0x24>
 8002d6c:	bd38      	pop	{r3, r4, r5, pc}
 8002d6e:	bf00      	nop
 8002d70:	200041dc 	.word	0x200041dc

08002d74 <_malloc_r>:
 8002d74:	b570      	push	{r4, r5, r6, lr}
 8002d76:	1ccd      	adds	r5, r1, #3
 8002d78:	f025 0503 	bic.w	r5, r5, #3
 8002d7c:	3508      	adds	r5, #8
 8002d7e:	2d0c      	cmp	r5, #12
 8002d80:	bf38      	it	cc
 8002d82:	250c      	movcc	r5, #12
 8002d84:	2d00      	cmp	r5, #0
 8002d86:	4606      	mov	r6, r0
 8002d88:	db01      	blt.n	8002d8e <_malloc_r+0x1a>
 8002d8a:	42a9      	cmp	r1, r5
 8002d8c:	d903      	bls.n	8002d96 <_malloc_r+0x22>
 8002d8e:	230c      	movs	r3, #12
 8002d90:	6033      	str	r3, [r6, #0]
 8002d92:	2000      	movs	r0, #0
 8002d94:	bd70      	pop	{r4, r5, r6, pc}
 8002d96:	f000 f8f5 	bl	8002f84 <__malloc_lock>
 8002d9a:	4a23      	ldr	r2, [pc, #140]	; (8002e28 <_malloc_r+0xb4>)
 8002d9c:	6814      	ldr	r4, [r2, #0]
 8002d9e:	4621      	mov	r1, r4
 8002da0:	b991      	cbnz	r1, 8002dc8 <_malloc_r+0x54>
 8002da2:	4c22      	ldr	r4, [pc, #136]	; (8002e2c <_malloc_r+0xb8>)
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	b91b      	cbnz	r3, 8002db0 <_malloc_r+0x3c>
 8002da8:	4630      	mov	r0, r6
 8002daa:	f000 f841 	bl	8002e30 <_sbrk_r>
 8002dae:	6020      	str	r0, [r4, #0]
 8002db0:	4629      	mov	r1, r5
 8002db2:	4630      	mov	r0, r6
 8002db4:	f000 f83c 	bl	8002e30 <_sbrk_r>
 8002db8:	1c43      	adds	r3, r0, #1
 8002dba:	d126      	bne.n	8002e0a <_malloc_r+0x96>
 8002dbc:	230c      	movs	r3, #12
 8002dbe:	6033      	str	r3, [r6, #0]
 8002dc0:	4630      	mov	r0, r6
 8002dc2:	f000 f8e0 	bl	8002f86 <__malloc_unlock>
 8002dc6:	e7e4      	b.n	8002d92 <_malloc_r+0x1e>
 8002dc8:	680b      	ldr	r3, [r1, #0]
 8002dca:	1b5b      	subs	r3, r3, r5
 8002dcc:	d41a      	bmi.n	8002e04 <_malloc_r+0x90>
 8002dce:	2b0b      	cmp	r3, #11
 8002dd0:	d90f      	bls.n	8002df2 <_malloc_r+0x7e>
 8002dd2:	600b      	str	r3, [r1, #0]
 8002dd4:	50cd      	str	r5, [r1, r3]
 8002dd6:	18cc      	adds	r4, r1, r3
 8002dd8:	4630      	mov	r0, r6
 8002dda:	f000 f8d4 	bl	8002f86 <__malloc_unlock>
 8002dde:	f104 000b 	add.w	r0, r4, #11
 8002de2:	1d23      	adds	r3, r4, #4
 8002de4:	f020 0007 	bic.w	r0, r0, #7
 8002de8:	1ac3      	subs	r3, r0, r3
 8002dea:	d01b      	beq.n	8002e24 <_malloc_r+0xb0>
 8002dec:	425a      	negs	r2, r3
 8002dee:	50e2      	str	r2, [r4, r3]
 8002df0:	bd70      	pop	{r4, r5, r6, pc}
 8002df2:	428c      	cmp	r4, r1
 8002df4:	bf0d      	iteet	eq
 8002df6:	6863      	ldreq	r3, [r4, #4]
 8002df8:	684b      	ldrne	r3, [r1, #4]
 8002dfa:	6063      	strne	r3, [r4, #4]
 8002dfc:	6013      	streq	r3, [r2, #0]
 8002dfe:	bf18      	it	ne
 8002e00:	460c      	movne	r4, r1
 8002e02:	e7e9      	b.n	8002dd8 <_malloc_r+0x64>
 8002e04:	460c      	mov	r4, r1
 8002e06:	6849      	ldr	r1, [r1, #4]
 8002e08:	e7ca      	b.n	8002da0 <_malloc_r+0x2c>
 8002e0a:	1cc4      	adds	r4, r0, #3
 8002e0c:	f024 0403 	bic.w	r4, r4, #3
 8002e10:	42a0      	cmp	r0, r4
 8002e12:	d005      	beq.n	8002e20 <_malloc_r+0xac>
 8002e14:	1a21      	subs	r1, r4, r0
 8002e16:	4630      	mov	r0, r6
 8002e18:	f000 f80a 	bl	8002e30 <_sbrk_r>
 8002e1c:	3001      	adds	r0, #1
 8002e1e:	d0cd      	beq.n	8002dbc <_malloc_r+0x48>
 8002e20:	6025      	str	r5, [r4, #0]
 8002e22:	e7d9      	b.n	8002dd8 <_malloc_r+0x64>
 8002e24:	bd70      	pop	{r4, r5, r6, pc}
 8002e26:	bf00      	nop
 8002e28:	200041dc 	.word	0x200041dc
 8002e2c:	200041e0 	.word	0x200041e0

08002e30 <_sbrk_r>:
 8002e30:	b538      	push	{r3, r4, r5, lr}
 8002e32:	4c06      	ldr	r4, [pc, #24]	; (8002e4c <_sbrk_r+0x1c>)
 8002e34:	2300      	movs	r3, #0
 8002e36:	4605      	mov	r5, r0
 8002e38:	4608      	mov	r0, r1
 8002e3a:	6023      	str	r3, [r4, #0]
 8002e3c:	f7ff fba0 	bl	8002580 <_sbrk>
 8002e40:	1c43      	adds	r3, r0, #1
 8002e42:	d102      	bne.n	8002e4a <_sbrk_r+0x1a>
 8002e44:	6823      	ldr	r3, [r4, #0]
 8002e46:	b103      	cbz	r3, 8002e4a <_sbrk_r+0x1a>
 8002e48:	602b      	str	r3, [r5, #0]
 8002e4a:	bd38      	pop	{r3, r4, r5, pc}
 8002e4c:	20004284 	.word	0x20004284

08002e50 <__sread>:
 8002e50:	b510      	push	{r4, lr}
 8002e52:	460c      	mov	r4, r1
 8002e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e58:	f000 f896 	bl	8002f88 <_read_r>
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	bfab      	itete	ge
 8002e60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002e62:	89a3      	ldrhlt	r3, [r4, #12]
 8002e64:	181b      	addge	r3, r3, r0
 8002e66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002e6a:	bfac      	ite	ge
 8002e6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002e6e:	81a3      	strhlt	r3, [r4, #12]
 8002e70:	bd10      	pop	{r4, pc}

08002e72 <__swrite>:
 8002e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e76:	461f      	mov	r7, r3
 8002e78:	898b      	ldrh	r3, [r1, #12]
 8002e7a:	05db      	lsls	r3, r3, #23
 8002e7c:	4605      	mov	r5, r0
 8002e7e:	460c      	mov	r4, r1
 8002e80:	4616      	mov	r6, r2
 8002e82:	d505      	bpl.n	8002e90 <__swrite+0x1e>
 8002e84:	2302      	movs	r3, #2
 8002e86:	2200      	movs	r2, #0
 8002e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e8c:	f000 f868 	bl	8002f60 <_lseek_r>
 8002e90:	89a3      	ldrh	r3, [r4, #12]
 8002e92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e9a:	81a3      	strh	r3, [r4, #12]
 8002e9c:	4632      	mov	r2, r6
 8002e9e:	463b      	mov	r3, r7
 8002ea0:	4628      	mov	r0, r5
 8002ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ea6:	f000 b817 	b.w	8002ed8 <_write_r>

08002eaa <__sseek>:
 8002eaa:	b510      	push	{r4, lr}
 8002eac:	460c      	mov	r4, r1
 8002eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eb2:	f000 f855 	bl	8002f60 <_lseek_r>
 8002eb6:	1c43      	adds	r3, r0, #1
 8002eb8:	89a3      	ldrh	r3, [r4, #12]
 8002eba:	bf15      	itete	ne
 8002ebc:	6560      	strne	r0, [r4, #84]	; 0x54
 8002ebe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002ec2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002ec6:	81a3      	strheq	r3, [r4, #12]
 8002ec8:	bf18      	it	ne
 8002eca:	81a3      	strhne	r3, [r4, #12]
 8002ecc:	bd10      	pop	{r4, pc}

08002ece <__sclose>:
 8002ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ed2:	f000 b813 	b.w	8002efc <_close_r>
	...

08002ed8 <_write_r>:
 8002ed8:	b538      	push	{r3, r4, r5, lr}
 8002eda:	4c07      	ldr	r4, [pc, #28]	; (8002ef8 <_write_r+0x20>)
 8002edc:	4605      	mov	r5, r0
 8002ede:	4608      	mov	r0, r1
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	6022      	str	r2, [r4, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f7ff fb30 	bl	800254c <_write>
 8002eec:	1c43      	adds	r3, r0, #1
 8002eee:	d102      	bne.n	8002ef6 <_write_r+0x1e>
 8002ef0:	6823      	ldr	r3, [r4, #0]
 8002ef2:	b103      	cbz	r3, 8002ef6 <_write_r+0x1e>
 8002ef4:	602b      	str	r3, [r5, #0]
 8002ef6:	bd38      	pop	{r3, r4, r5, pc}
 8002ef8:	20004284 	.word	0x20004284

08002efc <_close_r>:
 8002efc:	b538      	push	{r3, r4, r5, lr}
 8002efe:	4c06      	ldr	r4, [pc, #24]	; (8002f18 <_close_r+0x1c>)
 8002f00:	2300      	movs	r3, #0
 8002f02:	4605      	mov	r5, r0
 8002f04:	4608      	mov	r0, r1
 8002f06:	6023      	str	r3, [r4, #0]
 8002f08:	f7ff fb54 	bl	80025b4 <_close>
 8002f0c:	1c43      	adds	r3, r0, #1
 8002f0e:	d102      	bne.n	8002f16 <_close_r+0x1a>
 8002f10:	6823      	ldr	r3, [r4, #0]
 8002f12:	b103      	cbz	r3, 8002f16 <_close_r+0x1a>
 8002f14:	602b      	str	r3, [r5, #0]
 8002f16:	bd38      	pop	{r3, r4, r5, pc}
 8002f18:	20004284 	.word	0x20004284

08002f1c <_fstat_r>:
 8002f1c:	b538      	push	{r3, r4, r5, lr}
 8002f1e:	4c07      	ldr	r4, [pc, #28]	; (8002f3c <_fstat_r+0x20>)
 8002f20:	2300      	movs	r3, #0
 8002f22:	4605      	mov	r5, r0
 8002f24:	4608      	mov	r0, r1
 8002f26:	4611      	mov	r1, r2
 8002f28:	6023      	str	r3, [r4, #0]
 8002f2a:	f7ff fb46 	bl	80025ba <_fstat>
 8002f2e:	1c43      	adds	r3, r0, #1
 8002f30:	d102      	bne.n	8002f38 <_fstat_r+0x1c>
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	b103      	cbz	r3, 8002f38 <_fstat_r+0x1c>
 8002f36:	602b      	str	r3, [r5, #0]
 8002f38:	bd38      	pop	{r3, r4, r5, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20004284 	.word	0x20004284

08002f40 <_isatty_r>:
 8002f40:	b538      	push	{r3, r4, r5, lr}
 8002f42:	4c06      	ldr	r4, [pc, #24]	; (8002f5c <_isatty_r+0x1c>)
 8002f44:	2300      	movs	r3, #0
 8002f46:	4605      	mov	r5, r0
 8002f48:	4608      	mov	r0, r1
 8002f4a:	6023      	str	r3, [r4, #0]
 8002f4c:	f7ff fb3a 	bl	80025c4 <_isatty>
 8002f50:	1c43      	adds	r3, r0, #1
 8002f52:	d102      	bne.n	8002f5a <_isatty_r+0x1a>
 8002f54:	6823      	ldr	r3, [r4, #0]
 8002f56:	b103      	cbz	r3, 8002f5a <_isatty_r+0x1a>
 8002f58:	602b      	str	r3, [r5, #0]
 8002f5a:	bd38      	pop	{r3, r4, r5, pc}
 8002f5c:	20004284 	.word	0x20004284

08002f60 <_lseek_r>:
 8002f60:	b538      	push	{r3, r4, r5, lr}
 8002f62:	4c07      	ldr	r4, [pc, #28]	; (8002f80 <_lseek_r+0x20>)
 8002f64:	4605      	mov	r5, r0
 8002f66:	4608      	mov	r0, r1
 8002f68:	4611      	mov	r1, r2
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	6022      	str	r2, [r4, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	f7ff fb2a 	bl	80025c8 <_lseek>
 8002f74:	1c43      	adds	r3, r0, #1
 8002f76:	d102      	bne.n	8002f7e <_lseek_r+0x1e>
 8002f78:	6823      	ldr	r3, [r4, #0]
 8002f7a:	b103      	cbz	r3, 8002f7e <_lseek_r+0x1e>
 8002f7c:	602b      	str	r3, [r5, #0]
 8002f7e:	bd38      	pop	{r3, r4, r5, pc}
 8002f80:	20004284 	.word	0x20004284

08002f84 <__malloc_lock>:
 8002f84:	4770      	bx	lr

08002f86 <__malloc_unlock>:
 8002f86:	4770      	bx	lr

08002f88 <_read_r>:
 8002f88:	b538      	push	{r3, r4, r5, lr}
 8002f8a:	4c07      	ldr	r4, [pc, #28]	; (8002fa8 <_read_r+0x20>)
 8002f8c:	4605      	mov	r5, r0
 8002f8e:	4608      	mov	r0, r1
 8002f90:	4611      	mov	r1, r2
 8002f92:	2200      	movs	r2, #0
 8002f94:	6022      	str	r2, [r4, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	f7ff faca 	bl	8002530 <_read>
 8002f9c:	1c43      	adds	r3, r0, #1
 8002f9e:	d102      	bne.n	8002fa6 <_read_r+0x1e>
 8002fa0:	6823      	ldr	r3, [r4, #0]
 8002fa2:	b103      	cbz	r3, 8002fa6 <_read_r+0x1e>
 8002fa4:	602b      	str	r3, [r5, #0]
 8002fa6:	bd38      	pop	{r3, r4, r5, pc}
 8002fa8:	20004284 	.word	0x20004284

08002fac <_init>:
 8002fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fae:	bf00      	nop
 8002fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fb2:	bc08      	pop	{r3}
 8002fb4:	469e      	mov	lr, r3
 8002fb6:	4770      	bx	lr

08002fb8 <_fini>:
 8002fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fba:	bf00      	nop
 8002fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fbe:	bc08      	pop	{r3}
 8002fc0:	469e      	mov	lr, r3
 8002fc2:	4770      	bx	lr
